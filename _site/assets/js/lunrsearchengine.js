
var documents = [{
    "id": 0,
    "url": "http://localhost:4000/404.html",
    "title": "404",
    "body": "404 Page does not exist!Please use the search bar at the top or visit our homepage! "
    }, {
    "id": 1,
    "url": "http://localhost:4000/about",
    "title": "Flashreads Info",
    "body": "---template:  page title:  Contact description:  Flashreads info slug:  contact ---We are accepting tech-related short(1 minute read) blogs. The blogs will always be published or re-shared under the Author's name. ### ContributeFork the [flashread/blogs](https://github. com/flashreads/blogs) repository and make a PR with your changes. To add a new blog:* Please, do not just copy and paste content from the web. * Add it to the corresponding directory **{topic}/{number. title. md}** e. g python/013-find-pypi-downloads. md* Follow the [template](https://github. com/flashreads/blogs/blob/master/template. md) example for structuring the markdown file. * The tags, author, and meta description labels are required. * Fork the repository and make PR. ## Join us If you want to join our organization and contribute more often send a email to zoran. pandovski@gmail. com## ThemeThanks to Completejavascript for the [gatsby theme](https://github. com/completejavascript/gatsby-blog-template). ## LicenseThis work is licensed under a Creative Commons Attribution-ShareAlike 2. 0 Generic License. &lt;/div&gt; "
    }, {
    "id": 2,
    "url": "http://localhost:4000/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 3,
    "url": "http://localhost:4000/",
    "title": "Home",
    "body": "      Featuredll Stories:                                                                                                     Checked VS Unchecked eceptions in Java              :       Checked versus Unchecked Java Exceptions:                                                               Kosta Lazarevski                 27 Feb 2022                                                                                                                                     Catch and fix NullPointerException in Java              :       What is a NullPointerException?:                                                               Kosta Lazarevski                 27 Feb 2022                                                                                                                                     Catch and fix ArrayIndexOutOfBoundsException in Java              :       What is a ArrayIndexOutOfBoundsException?:                                                               Kosta Lazarevski                 27 Feb 2022                                                                                                                                     Eventlisteners and its use              :       EventListener in Javascript:                                                               Harshvardhan Rathore                 10 Nov 2021                                                                                                                                     Javascript higher-order functions and Iterators              :       Functions Assigned to Variables:                                                               Kosta Lazarevski                 10 Nov 2021                                                                                                                                     Type Casting              :       Type Casting:                                                               Ryan Omoruyi                 31 Oct 2021                                               &laquo; Prev       1        2        3        4        5        6        7        8        9        10        11        12        13        14        15        16        17        18        19        20        21        22        23      Next &raquo; "
    }, {
    "id": 4,
    "url": "http://localhost:4000/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ “sitemap. xml”   absolute_url }}   "
    }, {
    "id": 5,
    "url": "http://localhost:4000/page2/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 6,
    "url": "http://localhost:4000/page3/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 7,
    "url": "http://localhost:4000/page4/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 8,
    "url": "http://localhost:4000/page5/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 9,
    "url": "http://localhost:4000/page6/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 10,
    "url": "http://localhost:4000/page7/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 11,
    "url": "http://localhost:4000/page8/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 12,
    "url": "http://localhost:4000/page9/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 13,
    "url": "http://localhost:4000/page10/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 14,
    "url": "http://localhost:4000/page11/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 15,
    "url": "http://localhost:4000/page12/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 16,
    "url": "http://localhost:4000/page13/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 17,
    "url": "http://localhost:4000/page14/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 18,
    "url": "http://localhost:4000/page15/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 19,
    "url": "http://localhost:4000/page16/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 20,
    "url": "http://localhost:4000/page17/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 21,
    "url": "http://localhost:4000/page18/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 22,
    "url": "http://localhost:4000/page19/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 23,
    "url": "http://localhost:4000/page20/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 24,
    "url": "http://localhost:4000/page21/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 25,
    "url": "http://localhost:4000/page22/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 26,
    "url": "http://localhost:4000/page23/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 27,
    "url": "http://localhost:4000/2022-02-27-checked-vs-unchecked-exceptions-in-java",
    "title": "Checked VS Unchecked eceptions in Java",
    "body": "2022/02/27 - Checked versus Unchecked Java Exceptions: We can devide Java exceptions into three categories:: Errors and Exceptions can be frustrating at times, but at the end of the day we need to know how to solve them. That is what we do. This little blog will help you learn about the types of Java Exceptions and they mean. These three categories are broken down into checked and unchecked classifications—error and runtime exceptions. Errors and Runtime Exceptions are classified as an unchecked, which means are not checked at compile time and can result in runtime errors. Checked - these are exceptions that are checked by the compiler at compile time. These exceptions must be caught by a try/catch in the code or noted as thrown by the method. For instance, if a program attempts to access a file that is currently unavailable, the method to access the file must either catch or throw a FileNotFoundException. Error - errors are exceptions that happen externally to your Java program. One common example of the error is when the Java virtual machine (JVM) runs out of memory, which will throw an OutOfMemoryError. Runtime - runtime exceptions are internal to your application but are not typically recoverable. For example, an object that is expected to have a value but is actually null. In this case, a NullPointerException exception would be thrown. These three categories are broken down into checked and unchecked classifications—error and runtime exceptions and are grouped together as unchecked, which, per their name, are not checked at compile time and can result in runtime errors. "
    }, {
    "id": 28,
    "url": "http://localhost:4000/2022-02-27-catch-and-fix-null-pointer-exception-in-java",
    "title": "Catch and fix NullPointerException in Java",
    "body": "2022/02/27 - What is a NullPointerException?: java. lang. NullPointerException is a runtime exception in Java. It occurs when a variable is accessed which is not pointing to any object and refers to nothing hence it is null. Since the NullPointerException is a runtime exception, it doesn’t need to be caught and handled explicitly in application code. What are the reasons for getting NullPointerException?: The NullPointerException occurs due to a situation in where an uninitialized object is attempted to be accessed. This means the object reference does not point anywhere and has a null value. Some of the most common scenarios for a NullPointerException are: Accessing a null object’s properties: Throwing null from a method that throws an exception: Incorrect configuration for dependency injection frameworks ex:(Spring): Passing null parameters to a method: Calling methods on a null object: Using synchronized on a null object: Accessing an index element (like in an array) of a null object: Example of a NullPointerException: In this example we are trying to call a printLength methos which accepts a String as a parameter and prints its length. If the value of the String that it is passed as a parameter is null, a java. lang. NullPointerException will be thrown. 12345678910111213141516171819202122232425262728293031public class NullPointerExceptionExample {  private static void printLength(String str) {    System. out. println(str. length());  }  public static void main(String args[]) {    String nullString = null;    printLength(nullString);  }}Exception in thread  main  java. lang. NullPointerException  at NullPointerExceptionExample. printLength(NullPointerExceptionExample. java:3)  at NullPointerExceptionExample. main(NullPointerExceptionExample. java:8)How to Avoid getting NullPointerException: The NullPointerException can be avoided using checks and preventive techniques like the following: Making sure an object is initialized properly by adding a null check before referencing its methods or properties. Using Apache Commons StringUtils for String operations e. g. using StringUtils. isNotEmpty() for verifying if a string is empty before using it further. 123456789101112131415161718192021222324252627282930313233import org. apache. commons. lang3. StringUtils;public class NullPointerExceptionExample {  private static void printLength(String str) {    if (StringUtils. isNotEmpty(str)) {      System. out. println(str. length());    } else {      System. out. println( This time there is no NullPointerException );    }  }  public static void main(String args[]) {    String nullString = null;    printLength(nullString);  }}Using primitives rather than objects where possible, since they cannot have null references e. g. using int instead of Integer and boolean instead of Boolean. So next time make sure that you double check your code and prevent NullPointerException. "
    }, {
    "id": 29,
    "url": "http://localhost:4000/2022-02-27-catch-and-fix-array-out-of-bounds-exception",
    "title": "Catch and fix ArrayIndexOutOfBoundsException in Java",
    "body": "2022/02/27 - What is a ArrayIndexOutOfBoundsException?: java. lang. ArrayIndexOutOfBoundsException is a runtime exception in Java. occurs while processing an array and asking for a position that does not exist within the size of the array. Since the ArrayIndexOutOfBoundsException is a runtime exception, it doesn’t need to be caught and handled explicitly in application code. Example of a ArrayIndexOutOfBoundsException: In this example we are trying to access an element at index 5 of the animals array, which has only 2 elements. In this case java. lang. ArrayIndexOutOfBoundsException will be thrown. 12345678910111213141516171819public class ArrayIndexOutOfBoundsExample { public void processArray() {  List animals = new ArrayList&lt;&gt;();  names. add( cat );  names. add( dog );  return animals. get(5); }}How to Avoid getting ArrayIndexOutOfBoundsException: The ArrayIndexOutOfBoundsException can be avoided using checks and preventive techniques like the following:    Always remember that the array is a zero-based index, the first element is at the 0th index and the last element is at length - 1 index.     Pay special attention to the start and end conditions of the loop.  "
    }, {
    "id": 30,
    "url": "http://localhost:4000/2021-11-10-Eventlistener",
    "title": "Eventlisteners and its use",
    "body": "2021/11/10 - EventListener in JavascriptAn Eventlistener is a method in JavaScript that attaches an event to to an element. The listener is programed to start an event when the input or signaling the event handler. Syntax:- element. addEventListener(event, function, useCapture); some EventListeners are :- onload //when the page loads onclick //when a user clicks something onmouseover //when a user mouses over something onmouseup //when a user mouses down from something onmousedown //when a user mouses up from something onmouseout //when a user mouses out something onfocus //when a user puts the cursor in a form field onblur //When a user leaves a form field ```Events in javascript // On clicking button this function works Click me 12345function clicked() { console. log( The button was clicked.  )}// On loading page this function works 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051window. onload =function(){ console. log( The document was loaded.  );}let ids = document. getElementById( firstcontainer )ids. addEventListener('click', function(){  console. log( clicked on container );})ids. addEventListener('mouseout', function(){ console. log( mouseout container );})ids. addEventListener('mouseover', function(){ console. log( mouse on container );})ids. addEventListener('mouseup', function(){ console. log( mouseup clicked on container );})ids. addEventListener('mousedown', function(){ console. log( mousedown clicked on container );})1234567891011You can add many event handlers to one element. ## The removeEventListener() methodbody. removeEventListener(‘click’, bodyClickHandler); // on each click of the page, you will no longer see a message ``` we use the removeEventListener method correctly. This time when a click event occurs, removeEventListener will remove the function bodyClickHandler which effectively eliminates the listener, and no clicks will generate a message. "
    }, {
    "id": 31,
    "url": "http://localhost:4000/2021-11-10-javascript-higher-order-functions-and-Iterators",
    "title": "Javascript higher-order functions and Iterators",
    "body": "2021/11/10 - Functions Assigned to Variables: In JavaScript, functions are a data type just as strings, numbers, and arrays are data types. Therefore, functions can be assigned as values to variables, but are different from all other data types because they can be invoked. 1234567891011121314151617181920212223let addTree = (number) =&gt; {  return number + 3; }  //now we will assign the value of the function to a variable let func = addTree;  addTree(3) // the output will be 6  //Becouse the func variable has a function value, it can be invoked func(5) //The output will be 8Callback Functions: A callback function is a function that is passed into another function as an argument. This function can then be invoked during the execution of that higher order function (that it is an argument of). As we said previously, in JavaScript, functions are objects, hence can be passed as arguments. 123456789101112131415161718192021222324252627 const is even = (number) =&gt; {  return number % 2 = 0; }  let printMessage = (evenFunc, num) =&gt; {  const isNumEven = even(num);  console. log(`The number ${num} is even number: ${isEven}. `) }  //Pass isEven at the callback function printMessage(isEven, 8); //Prints: The number 8 is an even unber: trueHigher-order Functions: As we said previously functions can be assigned to variables hence they can be passed into other functions as parameters or returned from them as well. A higher-order function is a function that accepts functions as parameters and/or returns a function. Array Method . forEach(): The . forEach() method executres a callback function on each of the eelements in an array in order. In the example bellow, the callback function containig a console. log() method will be executed as many times as there are elements in the array, once for each element. 12345678910111213const elements = [28, 98, 1, 24, 52, 10];  elements. forEach(element =&gt; {  console. log(element); }); //Will print each element from the elements arrayArray methd . map(): The . map() method executes a callback function on each element in an array. It returns a new array made up of the return values from the callback function. The original array does not get altered, and the returned array may contain different elements than the original array. 1234567891011121314151617const numbers = [1, 2, 3, 5, 7];const multiplied = numbers. map(number =? { return number * 2;});console. log(multiplied);//Output: [2, 4, 6, 10, 14]Array Method . filter(): The . filter() method executes a callback function on each element in an array. The callback function for each of the elements must return either true or false. The returned array is a new array with any elements for which the callback function returns true. 123456789101112131415const numbers = [1, 2, 3, 4, 5, 6];const evenNumbersArray = numbers. filter(number =&gt; { return number % 2 = 0;});console. log(evenNumbersArray);//Output: [2, 4, 6]Array method . reduce(): The . reduce() method iterates through an array and returns a single value. It takes a callback function with two parameters (accumulator, currentValue) as arguments. On each iteration, accumulator is the value returned by the last iteration, and the currentValue is the current element. Optionally, a second argument can be passed which acts as the initial value of the accumulator. 1234567891011const numbers = [1, 2, 3, 4, 5];const sum = numbers. reduce((accumulator, currentValue) =? { return accumulator + currentValue;});"
    }, {
    "id": 32,
    "url": "http://localhost:4000/2021-10-31-type-casting",
    "title": "Type Casting",
    "body": "2021/10/31 - Type CastingType casting is when the data type of a variable is casted to another type. There are two types of casting: Widening and Narrowing. Converting a Variable’s Type Using Widening Casting: With this type of casting, there is no extra code that needs to be written. Java does this for you under the hood when a smaller type is converted to a larger type. When dealing with numbers, a byte is the smallest data type (whole numbers from -128 to 127), then a short (whole numbers from -32,768 to 32,767), int (whole numbers from -2,147,483,648 to 2,147,483,647), long (whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807), float (fractional numbers with 6 to 7 decimal places), and double (fractional numbers with 15 decimal places). 1234567  int intType = 2021;  // casting at assignment  float floatType = intType; // Outputs 2021. 0Converting a Variable’s Type Using Narrowing Casting: This casting is used when converting from a larger data type to a smaller type. For example, converting from a long to an int requires Narrowing casting. For example: 12345678910111213141516171819  long longType = 2000000L;  // Cast by wrapping the desired type in parentheses before the value  int intType = (int) longType; // Outputs 2000000  // won't work if the long value is greater or less than int's range  longType = 3000000000L; // greater than the upper limit of int type  // the data is cast to an int  // since the long value is out of int's range, Java tries converting to a value within range  intType = (int) longType; // Outputs -1294967296Typecasting WYNTK: Typecasting doesn’t work for all data classes. Some may wonder if you can convert a char to a String and vice versa. Primitive data types are the only data types that can be casted in this manner. And since the String class is not a primitive type, it’s not allowed. There are, however, built in methods in the String class that help do this; like the String. valueOf(char c) method and in the Character class like Character. toString(char c). "
    }, {
    "id": 33,
    "url": "http://localhost:4000/2021-10-31-flexbox",
    "title": "Getting Started with Flexbox",
    "body": "2021/10/31 - Getting Started with CSS FlexboxFlexbox is a layout method that consists of boxes that … flex. Content is organized into boxes that can be scaled up and down and can be placed in rows and columns. What is CSS Flexbox?: Flexbox is a one-dimensional layout. That is, its properties and specifications are related to rows or columns. This is different from a CSS grid that has both rows and columns in two dimensions at the same time. You can use Flexbox to create grid layouts by nesting containers and elements. How to Use Flexbox: Flexbox consists of a alot of properties, the first step is using Flexbox is by invoking it with the display property.  display : flex;Then we have the “flex-direction” property tells your container which direction its items should go in and therefore also says which direction the main-axis is going in. for example :- flex-direction : column;We also have the “flex-wrap” property which tells your code whether its items are allowed to wrap to the next line, like the lines on the page of a book, or whether they need to stay forced onto one line. an example is :- flex-wrap : wrap;Flexbox has other Properties that you can learn here :- https://developer. mozilla. org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox "
    }, {
    "id": 34,
    "url": "http://localhost:4000/2021-10-30-java-arrays-vs-arraylists",
    "title": "Arrays vs. ArrayLists in Java",
    "body": "2021/10/30 - Arrays vs. ArrayListsAlthough ‘arrays’ and ‘Arraylists’ both store information in the form of lists, one of the most fundamental differences between the two is how an array is a ‘fixed legnth data structure’ while an Arraylist is a ‘variable length Collection class’. This means that the legnth of an array cannot be cahnced after being created, but the legnth of an Arraylist can. In addition, since ArrayList implements the Collection interface, it can only store ‘objects’, whereas arrays can store both ‘objects’ and ‘primitives’ such as int, boolean, char, etc. To make an ArrayList of integers, for example, we would need to convert integers into an object. Declaring ArraysThere are two ways to declare and initialize arryas: ## 1) Declaring and initializing at the same time Example: 123456789101112131415public static void main(String args) { int[] numList = {1, 2, 3, 4, 5, 6, 7}; }Here, the declaring part - which declares the type and name of the array - and the initializing part - which initializes the elements in the arrays - are combined into one line. ## 2) Declaring then initializing later Example: 123456789101112131415161718192021public static void main(String args) {  int[] numList = new int[7]; numList[0] = 1; numList[1] = 2; numList[6] = 7; }Here, we first declared the type, name, and length of the array. Then, initialized by assigning a value to each index of the array. Declaring ArrayListsLike declaring arrays, there are multiple ways to declare ArrayLists as well 1) Initialization with add(): Example: 12345678910111213141516171819202122232425public static void main(String args) { ArrayList&lt;String&gt; example = new ArrayList&lt;String&gt;();  example. add( this ); example. add( is ); example. add( an ); example. add( example ); } Here, we first created the ArrayList with the type (String) and the name (example). Then, we initialized the elements with add(). ## 2) Initialize using asList() Example: 1234567891011121314151617 public static void main(String args[]) {  ArrayList&lt;String&gt; example = new ArrayList&lt;String&gt;(  Arrays. asList( this ,  is ,  an ,  example ));  }Here, the ArrayList is declared and initialized all at once by initializing the Strings using asList(). 3) Initialize using List. of(): Example: 1234567891011121314151617public static void main(String args[]) { List&lt;String&gt; example = new ArrayList&lt;&gt;(  List. of( this ,  is ,  an ,  example ));  }List asList(), this method declared and initialized the ArrayList all at once. "
    }, {
    "id": 35,
    "url": "http://localhost:4000/2021-10-28-type-comparison",
    "title": "Type Comparison",
    "body": "2021/10/28 - Type ComparisonThe most common way to determine if a given object is an instance of a given class, superclass or interface, is by using the binary operator instanceof. It includes implicit null check and generates a compile-time error if the types are not related. But it doesn’t allow primitives and requires the types to be know at compile time. If you want to check dynamically at runtime: Use the equivalent method boolean isInstance(Object obj) in Class. It also includes null check, but allows for primitives: 12345678910111213141516171819202122232425  a instanceof B   // returns false for null  null instanceof B  a. getClass(). isInstance(b);  // commonly used for generics  Class&lt;T&gt; type = b. getClass();  type. isInstance(a);  // Note that the parameter is autoboxed to type Integer  int x = 4;  Integer. class. isInstance(x);Check compatibility of two types: When you need to check subtyping relation use the method boolean isAssignableFrom(Class&lt;?&gt; cls) in Class. It may throw NullPointerException. 1234567891011121314151617  // is it possible to B b = new A()  Class&lt;?&gt; aClass = CharSequence. class;  Class&lt;?&gt; bClass = String. class;  bClass. isAssignableFrom(aClass());  // works for arrays  CharSequence[]. class. isAssignableFrom(String[]. class); // true  Integer[]. class. isAssignableFrom(String[]. class); //falsePattern Matching (Java 14): 123456789  if(a instanceof B b) {    // b is casted    b. toString();  }Special types: 123456789101112131415161718192021222324252627  // Enums  enum Color { WHITE, GRAY, BLACK }  Color. class. isEnum(); // Enum. class. isAssignableFrom(Color. class);   Color. WHITE instanceof Enum; // true  // Arrays  String[]. class. isArray();  // get the type of the variables in an array (null if obj is not an array)  Class&lt;?&gt; componentType = obj. getComponentType();   // Primitives  int. class. isPrimitive();"
    }, {
    "id": 36,
    "url": "http://localhost:4000/2021-10-28-regex",
    "title": "A simple Guide to RegEx",
    "body": "2021/10/28 - A simple Guide to RegEXRegular Expressions: Regular expression is a set of characters, called as the pattern, which helps in finding substrings in a given string. The pattern is used to detect the substrings For example, suppose you have a dataset of customer reviews about your restaurant. Say, you want to extract the emojis from the reviews because they are a good predictor os the sentiment of the review. Take another example, the artificial assistants such as Siri, Google Now use information retrieval to give you better results. When you ask them for any query or ask them to search for something interesting on the screen, they look for common patterns such as emails, phone numbers, place names, date and time and so on. This is because then the assitant can automatically make a booking or ask you to call the resturant to make a booking. Regular expressions are very powerful tool in text processing. It will help you to clean and handle your text in a much better way. Let’s import the regular expression library in python. In [1]: import re Let’s do a quick search using a pattern. In [2]: re. search(‘Ravi’, ‘Ravi is an exceptional student!’) Out[2]: &lt;re. Match object; span=(0, 4), match=’Ravi’&gt; In [3]: print output of re. search()match = re. search(‘Ravi’, ‘Ravi is an exceptional student!’) print(match. group()) Ravi Let’s define a function to match regular expression patterns In [4]: def find_pattern(text, patterns): 1234567if re. search(patterns, text):  return re. search(patterns, text)else:  return 'Not Found!'Quantifiers In [5]: ‘*’: Zero or moreprint(find_pattern(“ac”, “ab*”)) print(find_pattern(“abc”, “ab*”)) print(find_pattern(“abbc”, “ab*”)) &lt;re. Match object; span=(0, 1), match=’a’&gt; &lt;re. Match object; span=(0, 2), match=’ab’&gt; &lt;re. Match object; span=(0, 3), match=’abb’&gt; In [6]: ’?’: Zero or one (tells whether a pattern is absent or present)print(find_pattern(“ac”, “ab?”)) print(find_pattern(“abc”, “ab?”)) print(find_pattern(“abbc”, “ab?”)) &lt;re. Match object; span=(0, 1), match=’a’&gt; &lt;re. Match object; span=(0, 2), match=’ab’&gt; &lt;re. Match object; span=(0, 2), match=’ab’&gt; In [7]: ’+’: One or moreprint(find_pattern(“ac”, “ab+”)) print(find_pattern(“abc”, “ab+”)) print(find_pattern(“abbc”, “ab+”)) Not Found! &lt;re. Match object; span=(0, 2), match=’ab’&gt; &lt;re. Match object; span=(0, 3), match=’abb’&gt; In [8]: {n}: Matches if a character is present exactly n number of timesprint(find_pattern(“abbc”, “ab{2}”)) &lt;re. Match object; span=(0, 3), match=’abb’&gt; In [9]: {m,n}: Matches if a character is present from m to n number of timesprint(find_pattern(“aabbbbbbc”, “ab{3,5}”))  # return true if ‘b’ is present 3-5 times print(find_pattern(“aabbbbbbc”, “ab{7,10}”)) # return true if ‘b’ is present 7-10 times print(find_pattern(“aabbbbbbc”, “ab{,10}”))  # return true if ‘b’ is present atmost 10 times print(find_pattern(“aabbbbbbc”, “ab{10,}”))  # return true if ‘b’ is present from at least 10 times &lt;re. Match object; span=(1, 7), match=’abbbbb’&gt; Not Found! &lt;re. Match object; span=(0, 1), match=’a’&gt; Not Found! Anchors In [10]: ’^’: Indicates start of a string’$’: Indicates end of stringprint(find_pattern(“James”, “^J”))  # return true if string starts with ‘J’ print(find_pattern(“Pramod”, “^J”)) # return true if string starts with ‘J’ print(find_pattern(“India”, “a$”))  # return true if string ends with ‘a’ print(find_pattern(“Japan”, “a$”))  # return true if string ends with ‘a’ &lt;re. Match object; span=(0, 1), match=’J’&gt; Not Found! &lt;re. Match object; span=(4, 5), match=’a’&gt; Not Found! Wildcard In [11]: ’. ’: Matches any characterprint(find_pattern(“a”, “. ”)) print(find_pattern(“#”, “. ”)) &lt;re. Match object; span=(0, 1), match=’a’&gt; &lt;re. Match object; span=(0, 1), match=’#’&gt; Character sets In [12]: Now we will look at ‘[’ and ‘]’. They’re used for specifying a character class, which is a set of characters that you wish to match. Characters can be listed individually as followsprint(find_pattern(“a”, “[abc]”)) Or a range of characters can be indicated by giving two characters and separating them by a ‘-‘. print(find_pattern(“c”, “[a-c]”)) # same as above &lt;re. Match object; span=(0, 1), match=’a’&gt; &lt;re. Match object; span=(0, 1), match=’c’&gt; In [13]: ’^’ is used inside character set to indicate complementary setprint(find_pattern(“a”, “[^abc]”)) # return true if neither of these is present - a,b or c Not Found! Character sets Pattern	Matches [abc]	Matches either an a, b or c character [abcABC]	Matches either an a, A, b, B, c or C character [a-z]	Matches any characters between a and z, including a and z [A-Z]	Matches any characters between A and Z, including A and Z [a-zA-Z]	Matches any characters between a and z, including a and z ignoring cases of the characters [0-9]	Matches any character which is a number between 0 and 9 Meta sequences Pattern	Equivalent to \s	[ \t\n\r\f\v] \S	[^ \t\n\r\f\v] \d	[0-9] \D	[^0-9] \w	[a-zA-Z0-9_] \W	[^a-zA-Z0-9_] Greedy vs non-greedy regex In [14]: print(find_pattern(“aabbbbbb”, “ab{3,5}”)) # return if a is followed by b 3-5 times GREEDY &lt;re. Match object; span=(1, 7), match=’abbbbb’&gt; In [15]: print(find_pattern(“aabbbbbb”, “ab{3,5}?”)) # return if a is followed by b 3-5 times GREEDY &lt;re. Match object; span=(1, 5), match=’abbb’&gt; In [16]: Example of HTML codeprint(re. search(“&lt;. *&gt;”,”&lt;HTML&gt;My Page&lt;/HTML&gt;”)) &lt;re. Match object; span=(0, 35), match=’&lt;HTML&gt;My Page&lt;/HTML&gt;’&gt; In [17]: Example of HTML codeprint(re. search(“&lt;. *?&gt;”,”&lt;HTML&gt;My Page&lt;/HTML&gt;”)) &lt;re. Match object; span=(0, 6), match=’&lt;HTML&gt;’&gt; The five most important re functions that you would be required to use most of the times are match() Determine if the RE matches at the beginning of the string search() Scan through a string, looking for any location where this RE matches finall() Find all the substrings where the RE matches, and return them as a list finditer() Find all substrings where RE matches and return them as asn iterator sub() Find all substrings where the RE matches and substitute them with the given string In [18]: - this function uses the re. match() and let’s see how it differs from re. search()def match_pattern(text, patterns): 1234567if re. match(patterns, text):  return re. match(patterns, text)else:  return ('Not found!')In [19]: print(find_pattern(“abbc”, “b+”)) &lt;re. Match object; span=(1, 3), match=’bb’&gt; In [20]: print(match_pattern(“abbc”, “b+”)) Not found! In [21]: Example usage of the sub() function. Replace Road with rd. : street = ‘21 Ramakrishna Road’ print(re. sub(‘Road’, ‘Rd’, street)) 21 Ramakrishna Rd In [22]: print(re. sub(‘R\w+’, ‘Rd’, street)) 21 Rd Rd In [23]: Example usage of finditer(). Find all occurrences of word Festival in given sentence: text = ‘Diwali is a festival of lights, Holi is a festival of colors!’ pattern = ‘festival’ for match in re. finditer(pattern, text): 123print('START -', match. start(), end=  )print('END -', match. end())START - 12END - 20 START - 42END - 50 In [24]: Example usage of findall(). In the given URL find all datesurl = “http://www. telegraph. co. uk/formula-1/2017/10/28/mexican-grand-prix-2017-time-does-start-tv-channel-odds-lewisl/2017/05/12” date_regex = ‘/(\d{4})/(\d{1,2})/(\d{1,2})/’ print(re. findall(date_regex, url)) [(‘2017’, ‘10’, ‘28’)] In [25]: Exploring Groups: m1 = re. search(date_regex, url) print(m1. group()) ## print the matched group /2017/10/28/ In [26]: print(m1. group(1)) # - Print first group 2017 In [27]: print(m1. group(2)) # - Print second group 10 In [28]: print(m1. group(3)) # - Print third group 28 In [29]: print(m1. group(0)) # - Print zero or the default group /2017/10/28/ "
    }, {
    "id": 37,
    "url": "http://localhost:4000/2021-10-28-ftp",
    "title": "A simple Guide to FTP",
    "body": "2021/10/28 - A simple Guide to FTP connectionFTP The File Transfer Protocol (FTP) is a standard network protocol used to transfer computer files between a client and server on a computer network. FTP is built on a client-server model architecture and uses separate control and data connections between the client and the server. The client can send FTP commands such as STAT, PWD, RETR, and STOR. The ftplib module has multiple methods that can wrap these commands. ExampleCreate a send_command. py script and write the following content in it: 123456789101112131415161718192021222324252627282930313233  import os  import ftplib  ftp_host='xxx'  ftp_user_name='xxx'  ftp_password='xxx'  session = ftplib. FTP(ftp_host,ftp_user_name,ftp_password)  # file to send  file = open('origin_filename. txt','rb')  # send the file  session. storbinary('STOR 'end_filename. txt', file)  # close file and FTP  file. close()  session. quit()Run the script as follows: 123  python3 send_command. py"
    }, {
    "id": 38,
    "url": "http://localhost:4000/2021-10-28-python-generate-requirements-file",
    "title": "Generate requirements.txt file with packages that you need for project.",
    "body": "2021/10/28 - What is requirements. txt file ?requirements. txt file contains the python packages names that required to run the project . requirements. txt file is located in root directory of project. example : 1234567alembic==1. 6. 5appdirs==1. 4. 4arrow==1. 1. 1asgiref==3. 4. 1How to generate requirements. txt file ?pip freeze command gives complete list of every package installed on your computer along with version numbers. There two ways to put this complete list of packages into requirements. txt file and as follows : 1231. Copy pip freeze command output to requirements. txt file2. Modify the pip freeze command as  pip freeze &gt; requirements. txt   so that output of command  pip freeze  stores into requirements. txt file. "
    }, {
    "id": 39,
    "url": "http://localhost:4000/2021-10-27-errors-in-java",
    "title": "Errors In Java",
    "body": "2021/10/27 - ERRORSError results in abnormal working of the program. Some errors dont let the program to be compiled meanwhile some errors occur during execution after succesful compilation. Based on this factor errors are classified into three main types. Types Of Errors: There are three types of errors in Java    Syntax errors     Logical errors     Runtime errors (Exception)  1. Syntax errors: These are the errors which occur when our compiler finds violation of Java syntax in our program. It is also called as compile time error as it is detected by the compiler. Example: 12345678910111213141516171819202122232425262728293031public static void main(String args[]){  //Semicolon missing  int a=9  // semicolon missing  int b=3+a;  System. print. println(b);  // Datatype missing   d=3456;}2. Logical errors: These are also called as bugs. This occurs when the program compiles and runs but the expected output is not received when certain input is given. These happen due to not using appropriate logic in the program by the user. Example: 123456789101112131415161718192021222324252627public static void main(String args[]){    // Find product of a and b  int a = 34;  int b=0;    int c= a/b;  System. out. println( product of a and b is +c);  //But here c is the quotient not the product of a and b}3. Runtime errors: These errors are encountered while the program is executing. They get successfully compiled but throw an exception while running. These are also called Exceptions. They are hard to find as compiler doesnt point at the line where the error as ocurred. Example: 123456789101112131415161718192021public static void main(String args[]){    //Number divided by 0 is not defined  int a = 34;  int b=0;  int c= a/b;  System. out. println(c);}"
    }, {
    "id": 40,
    "url": "http://localhost:4000/2021-10-25-generate-random-int-within-range",
    "title": "Generate a random integer within specific range",
    "body": "2021/10/25 - Generate a random integer within specific range in JavaVery often you need to generate a random number within some range. Java offers a Random. nextInt(int bound) method, which gives you a random integer between 0 (inclusive) and the bound (exclusive). We can use this method to generate a random number between a and b: 1234567891011121314151617public static int nextRandomIntBetween(int a, int b) {  if (b &lt;= a) {    throw new IllegalArgumentException( b must be greater than a );  }  int m = b - a;  Random random = new Random();  return random. nextInt(m) + a;}First, we must ensure that b is greater than a. nextInt(int bound) does not accept negative values. Then, we calculate the difference b - a. This is the range of our random integers and we can use this to generate random number between 0 and b - a. Finally, we add the value of a to the random number, which will make the random number exactly in the range we wanted. Here is the full example: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package com. flashreads. examples;import java. security. SecureRandom;import java. util. Base64;import java. util. Random;public class RandomNumberWithinRangeExample {  public static void main(String[] args) {    System. out. println( Here are 10 numbers between 5 (inclusive) and 8 (exclusive): );    for(int i = 0; i &lt; 10; i++) {      System. out. println(nextRandomIntBetween(5, 8));    }  }  public static int nextRandomIntBetween(int a, int b) {    if (b &lt;= a) {      throw new IllegalArgumentException( b must be greater than a );    }    int m = b - a;    Random random = new Random();    return random. nextInt(m) + a;  }}Output: 1234567891011121314151617181920212223Here are 10 numbers between 5 (inclusive) and 8 (exclusive):6755567766"
    }, {
    "id": 41,
    "url": "http://localhost:4000/2021-10-24-cryptographically-secure-random",
    "title": "Cryptographically Secure Random in Java",
    "body": "2021/10/24 - Generate cryptographically secure random number in JavaIn many cases you might need to generate a cryptographically secure random number. The difference between a random number generated using the standard Random generator or via ThreadLocalRandom, is that the algorithm used to generate the pseudo-random number (PRNG) is usually cryptographically strong i. e. the probability of predicting the random number is very small. The typical usage of such generated numbers and values is when you need to generate a secret key/password or other random bytes which are hard to guess and most often used in authentication/authorization flows, or when generating random secret keys for encryption. To generate a cryptographically secure random numbers or sequences in Java, you should use SecureRandom. Here is a simple example of generating a random integer: 1234567SecureRandom random = new SecureRandom();var i = random. nextInt();System. out. println( This is my random number:   + i);SecureRandom extends the Random class and implements all methods already exposed in Random, so it can be used as a drop-in replacement for it. Here are some more examples. Generate a random sequence of bytes: 1234567891011SecureRandom random = new SecureRandom();byte[] buffer = new byte[128];random. nextBytes(buffer);// we have now generated a 128 bytes with random values. Generate a random base64 string: 123456789101112131415161718192021222324252627import java. security. SecureRandom;import java. util. Base64;public class CryptoSafeRandom {  public static void main(String[] args) {    SecureRandom random = new SecureRandom();    var buffer = new byte[12];    random. nextBytes(buffer);    String randomString = Base64. getEncoder(). encodeToString(buffer);    System. out. println( This is my cryptographically secure random string:   + randomString);  }}Output: 123This is my cryptographically secure random string: D++46PI36dOUmhHI"
    }, {
    "id": 42,
    "url": "http://localhost:4000/2021-10-24-how-to-create-terminal-aliases",
    "title": "How to create terminal aliases",
    "body": "2021/10/24 - What is an AliasAliases are nothing more than keyboard shortcuts or abbreviations, and although they’re a bit limited, they’re great for simple commands. Alias Structure   alias     shortcut name     =     ‘your_command’  How to Create a Permanent Alias in the Text Editor (Sublime)Open a terminal of your choice and insert this command which will open the bash profile in Sublime Editor: subl ~/. bash_profile Alias Examples123456789alias c=’clear’alias gp=’git pull’alias gs=’git status’Save ChangesOnce you have created the alias(es), restart the terminaln to save/apply these changes "
    }, {
    "id": 43,
    "url": "http://localhost:4000/2021-10-24-fix-EADDRINUSE-err",
    "title": "How to fix EADDRINUSE error",
    "body": "2021/10/24 - Here’s an interesting error you can come across when working with nodejs servers: Error: listen EADDRINUSE: address already in use :::5000 at Server. setupListenHandle [as _listen2] (net. js:1318:16) at listenInCluster (net. js:1366:12) at Server. listen (net. js:1452:7) Emitted ‘error’ event on Server instance at: at emitErrorNT (net. js:1345:8) at processTicksAndRejections (internal/process/task_queues. js:80:21) { code: ‘EADDRINUSE’, errno: -4091, syscall: ‘listen’, address: ‘::’, port: 5000 } [nodemon] app crashed - waiting for file changes before starting… I know for a fact that port 5000 was only in use for this app. My question was, what is EADDRINUSE(which I hurriedly read as ear in use). It simply means that you have multiple instances of your server running or multiple node. As easy fix for this before you go on to read multiple confusing stack overflow posts is to find your PID. Nope, that is not the pelvic inflammatory disease. It is referring to your process identifier. Each process can be identified and to find it, you need the following command:       netstat -ano   findstr :5000   5000 is the problem port in my case, but it could be 3000 for you. So, the port number is basically what you need to type immediately after the colon.       netstat -ano   findstr :portnumberhere   Then, you need to kill what will be displayed in your terminal for that port. In mine, I was shown this:       $ netstat -ano   findstr :5000   TCP 0. 0. 0. 0:5000 0. 0. 0. 0:0 LISTENING 7440 TCP [::]:5000 [::]:0 LISTENING 7440 the number 7440 is the PID, so the command to kill it after identifying it is: tskill 7440 You can also use taskkill 7400(remember, 7400 is the PID for you), although it might not work sometimes. Everything is now running and problem solved:) "
    }, {
    "id": 44,
    "url": "http://localhost:4000/2021-10-23-how-operators-work-in-javascript",
    "title": "How operators work in Javascript",
    "body": "2021/10/23 - How Operators work in JavascriptBefore we dive deep even futher let’s get to know what is operators. Operator is a special function that is written differently than a regular function, Generally operator take two parameters and return one result. Lets say you want to create a variable 12345const a = 5 + 4;console. log(a);I bet you can guess what the result is 1239;Correct 9, obviously 5 + 4 is equal to 9, but there is a question you may ask, “How the Javascript do that?” or “How Javascript know that 5 + 4 is an addition?”. Well, first the Javascript engine will see the + sign and add the numbers in between which is 5 and 4. The + sign is an operators and it’s actually a function, kinda like this: 1234567function +(num1, num2) { return // sum the two numbers}The function will run as soon as the Javascript see this 5 + 4 line of code, the different is instead calling the function normally like +(5, 4) the Javascript engine provide an ability to write a Infix notation. Infix simply mean the function + sit between the two parametes. To get an idea how it work we will compare Prefix, Infix and Postfix notation. Prefix Notation equal to +5 4 the + sign sit in the beginning \ Infix Notation equal to 5 + 4 the + sign sit in the middle \ Postfix Notation equal to 5 4+ the + sign sit in the end You can see the Infix notation sit between the two parameters, but in the end it’s just a function and return a value. In this case the + operator get called and return 5 and 4 added together. The - operator work exactly the same for example: 12345const a = 3 - 2;console. log(a);I think you can already guess the result, it’s 1 because - is an operator a minus sign. or you can do another one 12345const a = 3 &gt; 2;console. log(a);&gt; the greater than is just a function, a special function, this operator work the same way except that this operator return a Boolean value. Whenever you write +, -, &lt;, &gt; and all other operators out there that this is just a special types of function. The two parametes is being passed to the function and the function have a pre written code inside of it that Javascript engine provide for you and then it will return a value it could be a Number, Boolean etc. So please keep in mind that operators is just a function. Thank you for reading 🙇‍♂️. "
    }, {
    "id": 45,
    "url": "http://localhost:4000/2021-10-23-data-validation-using-joi",
    "title": "Performing Data Validation using JOI",
    "body": "2021/10/23 - Data Validation in Node. js Applications Using JoiEvery application built consists of data. Be it a Web, Mobile or even Console based application, data is either displayed or accepted from a user as an input. Before you store the user input recieved, data validation is highly recommended to prevent the risk of a malicious SQL query being executed on your database. You can perform the data validation directly from the client side application where the input is recieved, and also at your server side application, before the data is stored. A Node. js package which you can use to perform data validation in Node. js applications is Joi. Let’s proceed to get simplified understanding of Joi and see examples of how it can be used. What is Joi?: As described in the Joi documentation, “Joi is a data validator library for JavaScript”. Joi’s comprehensive API provides support for validating the data type of a value, and can also be extended to validate properties of a string. For example, checking the length of a string, or checking if a value is a valid email, or date within a specified range. The first step to take when using Joi is to construct a schema. At it’s basics, a Joi schema is an object with fields that model the data being validated agaisnt. Let’s proceed to construct a schema for a user’s data within an imaginary application. Modeling A User Data Schema: For the imaginary application, we would expect that a user’s data must contain the following three fields;    A name field containing a string data type that has a minimum length of 5 characters and a maximum character count of 25     A description field similar to the name field, but has a minimum acceptable character count of 50 and maximum count of 300.     An email field containing a string data type with the “@” character. The email must have a Top Level Domain (TLD) of “. com”. A TLD is the last part of a domain, that is after the dot (. ) character.   const Joi = require( joi ) const userSchema = Joi. object({  name: Joi. string(). min(3). max(25). required(),  description: Joi. string(). alphanum(). min(50). max(250). required(),  email: Joi. string(). email({   tlds: { allow: [ com ] }  }). required() });Note: Based on the needs for your application, you might have more fields within your schema. Visit the API section of the Joi documentation for a complete list of Joi’s API. Validating Values Using The Schema: At this point there is now a userSchema variable contain a Joi schema that models a user application. Let’s go through the next code snipet below that explains how the schmea can be used. You can validate data using the schema by calling the assert method within the schema object and passing in the data to be validated agaisnt. The snippet below demonstrates how this is done; const validateData = ({ name, description, email }) =&gt; { try {   Joi. assert({ name, description, email }, userSchema); } catch (e) {  console. log(`Erorr validating data: ${e}`) }}validateData({  name:  John Doe ,  description:  Some pretty long and organized description of me the author ,  email: 'john. doe@gmail. com'})When the validateData function in the code snippet above is executed, the name, description andemail arguments passed to the function will be validated using the assert method in the try/catch block. If the values don’t meet up with the validation standards, an exception will thrown and handled the catch block. This forms the basic usage of the Joi Schema to for validating your data. You can also use the validate and attempt methods depending on your application’s needs. "
    }, {
    "id": 46,
    "url": "http://localhost:4000/2021-10-22-accessibility",
    "title": "Getting Started with Web Accessibility",
    "body": "2021/10/22 - Getting Started with Web AccessibilityCoding, writing, and designing your first webpage can be exciting. Like other web developers, I learned by copying and pasting code and testing different things out or even reading W3School pages so I can write my own code. But one thing that goes missing when web developers first learn to make website is web accessibility. What is Web Accessibility?:       Chances are, regardless of where you spend your time on the internet, you’ve heard about web accessibility recently. The World Wide Web Consortium (W3C) defines web accessibility as “[when] websites, tools, and technologies are designed and developed so that people with disabilities can use them” [Introduction to Web Accessibility   Web Accessibility Initiative (WAI)   W3C](https://www. w3. org/WAI/fundamentals/accessibility-intro/#what). Disabilities can range anywhere from auditory, physical, visual, speech, to cognitive. Web accessibility can also benefit those without disabilities - whether you have a situational limitation, a temporary disability (like a broken arm), if you have limited bandwidth with your Internet connection, and even as you age.    Things to Look For: So how does someone start implementing accessibility in their projects? Great question! First and foremost, web accessibility should be implemented from the start. Placing it at the end isn’t impossible but this can cause more work and in some cases, it can be costly. Color Contrast: Color contrast is one of the “low hanging fruit” when it comes to accessibility. If you place white text on a white background, will you be able to read it? What about black text on a black background? One thing to keep in mind for color contrast is if your background is light, use dark text (and vice versa). Text on background color contrast must meet 4. 5:1 and non-text color contrast must meet at least 3:1. (But these can be higher!) Here’s a link to a contrast checker! WebAIM: Contrast Checker Text Alternatives for Images: Creating alt text for images is another quick and easy way to add accessibility to your website. # &lt;img src= https://www. google. com/images/branding/googlelogo/1x/googlelogo_color_272x92dp. png &gt;What’s wrong with the code example above? It seems correct, right? You have your image tag, it doesn’t need to be closed, and you have a URL linking to the image. We’re missing alt text! Here’s how we correct it: # &lt;img src= https://www. google. com/images/branding/googlelogo/1x/googlelogo_color_272x92dp. png  alt= Google logo &gt;There we go! In this example, we added the alt attribute and a text value to our image. So now, when screenreader users move over the image, they may hear something along the lines of “image Google logo”. This is extremely beneficial for screenreader users who are blind. Here’s a great article on image alt text WebAIM: Alternative Text Web Content Accessibility Guidelines (WCAG): While I could write more and more about web accessibility, I’ll leave the journey to you! There are some wonderful accessibility resources out there but the accessibility “source of truth” comes from W3C. It’s called the Web Content Accessibility Guidelines "
    }, {
    "id": 47,
    "url": "http://localhost:4000/2021-10-21-web-geolocation-api",
    "title": "Javascript Geolocation API",
    "body": "2021/10/21 - Web Geolocation APIThis API is used to determine the location of a user in web applications. The user must give the application permission for the location information to be accessed. Using Geolocation API: The navigator. geolocation object is used together with the getCurrentPosition() to get the user’s current location. The getCurrentPosition() can succeed or fail. It accepts three callbacks [success, error, options]. The last two callbacks are optional. 12345navigator. geolocation. getCurrentPosition(success, error, options);Example: 123456789101112131415161718192021function success(position) { console. log(`Latitude : ${position. coords. latitude} Longitude: ${position. coords. longitude}`);}function error(err) { console. log(`ERROR: ${err. message}`);}navigator. geolocation. getCurrentPosition(success, error);"
    }, {
    "id": 48,
    "url": "http://localhost:4000/2021-10-21-react-components",
    "title": "React JS Components",
    "body": "2021/10/21 - React JS ComponentsReact JS: React is a Javascript library created by Facebook in 2013. It is used to create user interfaces and UI components. React JS is a popular library used by companies such as Reddit, Salesforce, Hulu, and Netflix due to its ability to create fast and dynamic websites. Components: A component is a reusable peice of code. Much like a function, it is able to take in an input (props) to generate an output (React element). In the example below, the name prop is passed into the Greeting component so that the Greeting component can be reused multiple times with different names without repeating code. import React from  react ;const Greeting = ({ name }) =&gt; { return (  &lt;h1&gt;Hello {name}, I hope you're having a great day!&lt;/h1&gt;  );};export default Greeting;Here is an example of the Greeting component being invoked with different names: import React from 'react';import Greeting from '. /Greeting';const App = () =&gt; {  return (    &lt;div&gt;      &lt;Greeting name= Alex /&gt;      &lt;Greeting name= Rachel /&gt;      &lt;Greeting name= John /&gt;      &lt;Greeting name= Sammie /&gt;    &lt;/div&gt;  );};export default App"
    }, {
    "id": 49,
    "url": "http://localhost:4000/2021-10-20-javascript-promise-async-await-function",
    "title": "JavaScript Promise Async/Await Functions",
    "body": "2021/10/20 - Promise Async/Await FunctionsIn javascript there are 2 ways to tame the asynchronous beast. You need to use the following Functions:    Promise (then/catch) introduced in ES6     Async/Await introduced in ES7  These 2 syntaxes gives exactly same underlying functionality, however the readability and scope is different. We will explore how they helps us in generating maintainable code, while other functions make chaos :boom: . In this snippet we will see in example how we can relate the daily household task into JS understanding. JavaScript runs code line by line, moving to the next line of code only after the previous one has been executed. But executing code like this can only take us so far. Sometimes, we need to perform tasks that take a long or unpredictable amount of time to complete: fetching data or triggering side-effects via an API, for example. Rather than letting these tasks block JavaScript’s main thread, the language allows us to run certain tasks in parallel. ES6 saw the introduction of the Promise object as well as new methods to handle the execution of these Promises: then, catch, and finally. But a year later, in ES7, the language added another approach and two new keywords: async and await. In my opinion, unless a library or legacy codebase forces you to use then/catch, the better choice for readability and maintainability is async/await. To demonstrate that, we’ll use both syntaxes to solve the daily household tasks. then, catch And finallythen and catch and finally are methods of the Promise object, and they are chained one after the other. Each takes a callback function as its argument and returns a Promise. As example: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// First you need to buy some vegges from groceryconst grocery = new Promise( (resolve, reject) =&gt; {  if(shopOpen){   resolve('buy the grocery');  }else{   reject('it is a holiday, shop closed');  } });// Then you need to chop the vegges into piecesconst chopping = new Promise( (resolve, reject) =&gt; {  resolve('vegges are chopped'); });// Finally you can cook the foodconst cooking = new Promise( (resolve, reject) =&gt; {  resolve('food is ready'); });Using then, catch and finally, we could perform a series of actions based on whether the Promise is resolved (then) or rejected (catch) — while finally allows us to execute code once the Promise is settled, regardless of whether it was resolved or rejected: 123456789101112131415161718192021222324252627282930313233343536373839// Let's do cookinggrocery . then((value) =&gt; {  chopping   . then((value) =&gt; {     cooking      . then((value) =&gt; {       // Food      })   }) }). catch((error) =&gt; {  // it is a holiday, shop closed }) . finally(() =&gt; {  // take water });async And awaitBy contrast, async and await are keywords which make synchronous-looking code asynchronous. We use async when defining a function to signify that it returns a Promise. Notice how the placement of the async keyword depends on whether we’re using regular functions or arrow functions: 12345678910111213141516171819async function doSomethingAsynchronous() { // logic}const doSomethingAsynchronous = async () =&gt; { // logic};await, meanwhile, is used before a Promise. It pauses the execution of an asynchronous function until the Promise is resolved. For example, to await our grocery above, we could write: 1234567891011121314151617181920212223const grocery = async () { try {  const value = await 'buy the grocery';  return value } catch (e) {  const value = await 'it is a holiday, shop closed';  return value }}Then you can still use the same pattern 123456789101112131415161718192021222324252627// Let's do cookinggrocery . then((value) =&gt; {  // Do Something }). catch((error) =&gt; {  // it is a holiday, shop closed }) . finally(() =&gt; {  // take water });"
    }, {
    "id": 50,
    "url": "http://localhost:4000/2021-10-17-python-functions",
    "title": "Creating functions in Python",
    "body": "2021/10/18 - What is a Function in PythonFormally, a function is a useful device that groups together a set of statements so they can be run more than once. They can also let us specify parameters that can serve as inputs to the functions. On a more fundamental level, functions allow us to not have to repeatedly write the same code again and again. If you remember back to the lessons on strings and lists, remember that we used a function len() to get the length of a string. Since checking the length of a sequence is a common task you would want to write a function that can do this repeatedly at command. def Statements: Let’s see how to build out a function’s syntax in Python. It has the following form: 12345678910111213def name_of_function(arg1,arg2):  '''  This is where the function's Document String (docstring) goes  '''  # Do stuff here  # Return desired resultExample 1: A simple print ‘hello’ function: 1234567891011def say_hello():  print('hello')#Call the Functionsay_hello()Example 2: A simple greeting function: Let’s write a function that greets people with their name. 123456789def greeting(name):  print('Hello %s' %(name))greeting('Jose') #calling the functionUsing return: Let’s see an example that use a return statement. return allows a function to return a result that can then be stored as a variable, or used in whatever manner a user wants. 12345678910111213141516171819202122232425import mathdef is_prime2(num):  '''  Better method of checking for primes.   '''  if num % 2 == 0 and num &gt; 2:     return False  for i in range(3, int(math. sqrt(num)) + 1, 2):    if num % i == 0:      return False  return TrueGreat! You should now have a basic understanding of creating your own functions to save yourself from repeatedly writing code! "
    }, {
    "id": 51,
    "url": "http://localhost:4000/2021-10-17-Reduce-method-in-javascript",
    "title": "Reduce Array method in JavaScript",
    "body": "2021/10/17 - Reduce Method in JavascriptThe reduce() method iterates over the array from left-to-right and produces a single result according to the requirement. The Syntax of Reduce method: 123456789101112131415161718192021222324252627282930313233// Inline callback function  array. reduce(function CallbackFunction(PreviousValue, CurrentValue, CurrentIndex, Array) {     //function implementation   }, InitialValue)// Arrow function  array. reduce((PreviousValue, CurrentValue, CurrentIndex, Array) =&gt; {     //function implementation  }, InitialValue)// Callback function  function CallbackFunction(PreviousValue, CurrentValue, CurrentIndex, Array) {     //function implementation   }  array. reduce(CallbackFunction, InitialValue) Example: Taking an example of multiplying all the elements of an array: Our first thought to implement this requirement is using for loop, the code will be as follows: 12345678910111213  let myarray=[2,4,6,8];   let mulresult=1;    //Variable to store the result  for(let i=0;i&lt;myarray. length;i++){  //For loop to iterate over the array    mulresult=mulresult*myarray[i];    }  console. log(mulresult); //Output: 384 We can implement the same requirement using reduce() in a much cleaner and simpler way! This allows us to loop through the array’s elements, and at each iteration the current array value is multiplied with the result from the previous step, until we have reached the final element. 12345678910111213141516171819202122232425262728293031323334353637383940414243  let myarray=[2,4,6,8];  // Using Inline callback function  let inlineresult = myarray. reduce(function CallbackFunction(Previous, Current) {      return Previous*Current;    }); //Inital value is not defined   // inlineresult= 2*4*6*8   console. log(inlineresult); // Output: 384   // Using Arrow function  let arrowresult = myarray. reduce((Previous, Current) =&gt; {       return Previous*Current;    },1); //Intial value=1  // arrowresult= 1*2*4*6*8   console. log(arrowresult); // Output: 384   // Using Callback Function  const myreducerfn = (Previous, Current) =&gt; Previous*Current;  let fnresult=myarray. reduce(myreducerfn,20); //Intial value=20  // fnresult= 20*2*4*6*8   console. log(fnresult); // Output: 7680 Parameters: The parameters which the method takes are:  InitialValue –   This parameter is OPTIONAL     If specified, the PreviousValue is assigned the InitialValue when the callback function is initially called.     If not specified, the PreviousValue is assigned the first element of the array.   CallbackFunction – The function takes four arguments:   PreviousValue - The returned result from the previous step.     CurrentValue - The value of the current array element.     CurrentIndex - The current index value (OPTIONAL)     Selected Array - The array to traverse (OPTIONAL)  "
    }, {
    "id": 52,
    "url": "http://localhost:4000/2021-10-16-javascript-arrow-functions",
    "title": "JavaScript Arrow Functions",
    "body": "2021/10/16 - Arrow FunctionsAn arrow function expression has a shorter syntax compared to regular functions expressions. There are two key differences: arrow functions are always anonymous and are non-binding of ‘this’. Before: 1234567hello = function() { return  Hello World! ;};After: 1234567hello = () =&gt; { return  Hello World! ;};It can be even shorter if the function has only ONE statement that returns a value. Example: 123hello = () =&gt;  Hello World! ;How to Use Parameters: 123hello = (param) =&gt;  Hello   + param;OR without parenthesis 123hello = (param) =&gt;  Hello   + param;How to Handle ‘this’: Regular functions always define its ‘this’ value but arrow functions treat ‘this’ keyword differently. They do not define their own context since it doesn’t have its own ‘this’ context. It is inherited from the parent scope whenever you call ‘this’. Example: Regular Function: 12345678910111213141516171819202122232425var obj = { count: 10, doSomethingLater: function() {  setTimeout(function() {   // the function executes on the window scope   this. count++;   console. log(this. count);  }, 300); },};obj. doSomethingLater(); // result is  NaN , because the property  count  is not in the window scope. Arrow Function: 123456789101112131415161718192021222324252627282930313233var obj = { count: 10, doSomethingLater: function() {  // The traditional function binds  this  to the  obj  context.   setTimeout(() =&gt; {   // Since the arrow function doesn't have its own binding and   // setTimeout (as a function call) doesn't create a binding   // itself, the  obj  context of the traditional function will   // be used within.    this. count++;   console. log(this. count);  }, 300); },};obj. doSomethingLater();"
    }, {
    "id": 53,
    "url": "http://localhost:4000/2021-10-14-Install-postgres-on-docker",
    "title": "how to run PostgreSQL on Docker",
    "body": "2021/10/14 - PostgreSQL database in DockerSometimes it is needed to have a local copy of production database or to have a specific pgsql version for dev and test purposes. This small guide will help with it. Steps to reproduce: Create local folder for database files: 123$ mkdir /var/postgres-data/Or you could use path like ${HOME}/postgres-data/, your choise. Now we start container by command: 123456789101112131415$ docker run -d \	--name pgsql_for_website \	-	-e POSTGRES_PASSWORD=Password312 \	-v /var/postgres-data/:/var/lib/postgresql/data \    -p 5432:5432    postgresOR you could create dockerfile for PostgreSQL container. Something like this: 1234567891011121314151617181920212223242526272829version: '3. 7'services: db:  container_name: pgsql_for_website  image: postgres:12-alpine  restart: always  ports:   -  5432:5432   environment:   POSTGRES_USER: postgres   POSTGRES_PASSWORD: Password312   POSTGRES_DB: pgdb  volumes:   - /var/postgres-data:/var/lib/postgresql/data/and run it: 123$ docker-compose -f compose-postgresql. yml up -dCheck that container is running: 123$ docker psIf you have a lot of containers in output, use grep: 123$ docker ps | grep postgreOutput will be like: 12345$ docker ps | grep postgred63fe2debc4e   postgres:12-alpine    docker-entrypoint. s…   5 min ago   Up 5 min   0. 0. 0. 0:5432-&gt;5432/tcp  pgsql_for_websiteConnect to pgsql container with bash and then psql: 12345$ docker exec -it pgsql_for_website bash$ psql -h localhost -U postgresTo migrate database from other database you need to create a DB dump: 123$ pg_dump --username [username] [database name] &gt; pgdump. sqlAnd restore it to created container as it would be done to any PostgreSQL server: 123$ psql -h [host with pgsql container address] -d [database name] --username [username] -f pgdump. sqlIn our case it would be: 123$ psql -h [host with pgsql container address] -d pgdb --username postgres -f pgdump. sqlAt last, connection string would looks like: 123postgres://postgres:Password312@[host with pgsql container address]:5432/pgdbAnd for deletion you could use next commands: 12345$ docker container stop pgsql_for_website $ docker container rm pgsql_for_websiteOr 123$ docker container rm -f pgsql_for_websiteOutput would contain deleted container name. "
    }, {
    "id": 54,
    "url": "http://localhost:4000/2021-10-14-wget-howto",
    "title": "wget command usage short guide",
    "body": "2021/10/14 - wgetWget is a tool for downloading files from the Internet. It supports HTTP, HTTPS and FTP protocols. It is flexible, so it could be use in background, in scripts, automation. wget usage: Syntax is simple: 123$ wget [options] [URL]And it could be used without any options: 123$ wget [options] https://cdn. kernel. org/pub/linux/kernel/v5. x/linux-5. 14. 12. tar. xzSpecify downloaded file name 123$ wget -O [filename] [options] [URL]Example: 123$ wget -O linux. tar. xz https://cdn. kernel. org/pub/linux/kernel/v5. x/linux-5. 14. 12. tar. xzSelect download destination 123$ wget -P [path] [options] [URL]To define download speed use “–rate-limit” construction: 123$ wget --rate-limit [speed value] [options] [URL]And example with 1 mbps speed limit: 123$ wget --rate-limit 1m https://cdn. kernel. org/pub/linux/kernel/v5. x/linux-5. 14. 12. tar. xzContinue download. Wget is good with downloading via unstable connections, so use “-c” for continue downloading after interruption: 123$ wget -c [options] [URL]Background download: 123$ wget -b [options] [URL]Ignore certificate during HTTPS download: 123$ wget --no-check-certificate [URL]FTP download is possible too: 123$ wget --ftp-user=[username] --ftp-password=[password] [FTP URL]"
    }, {
    "id": 55,
    "url": "http://localhost:4000/2021-10-14-curl-howto",
    "title": "curl command usage short guide",
    "body": "2021/10/14 - CurlCurl is a tool for data transfer. It supports a variety of protocols - HTTP, HTTPS, FTP, SFTP, TFTP, IMAP, POP3, SCP, SMTP and a bunch of other protocols, full list is available in man output. It is tiny, flexible, could provide verbose information, good for automation, since user interaction witch curl is not needed. Curl usage: Syntax is simple: 123$ curl [options] [URL]The basic request to GitHub would be look like: 123$ curl github. comDownloading files with the same name, as in the URL 123$ curl -O [URL]Or with specific file name: 123$ curl -o [filename] [URL]Continue downloading of stopped download is possible with “-C” parameter 123$ curl -C -O [URL]Verbose output 12345$ curl -v [options] [URL]$ curl --verbose [options] [URL]Authenticate on remote server 123$ curl -u {username}:{password} [URL]For example, download FTP file with authentication would look like: 123$ curl -u ftpuser16:Password111 -O ftp://example. com/bugrep. tgzFile upload: 123$ curl -T -u {username}:{password} [URL]Progress bar: It is possible to change curl meter to progress bar: 12345$ curl -# [URL]$ curl --progress-bar [URL]Or disable any progress information: 12345$ curl -s [URL]$ curl --silent [URL]HTTP and HTTPS: Include HTTPS headers to output 12345$ curl -i https://github. com$ curl --include https://github. comSpecify HTTP-request type: 123$ curl --request [request type] [options] [URL]Example 123$ curl --request GET https://github. comProxy server also could be specified: 123curl -x [proxy address]:[port] [URL]If proxy server requires authentication, curl can be used with next command: 12345curl -x [proxy address]:[port] -U [user]:[password] [URL]curl -x [proxy address]:[port] --proxy-user [user]:[password] [URL]SMTP If you do not like to send emails via telnet you could use curl 123$ curl –url [SMTP URL] –mail-from [sender address] –mail-rcpt [recipient address] -n –ssl-reqd -u {email}:{password} -T [mail text file]"
    }, {
    "id": 56,
    "url": "http://localhost:4000/2021-10-14-sed-explained",
    "title": "Sed Usage",
    "body": "2021/10/13 - Sed Explained: SED command in UNIX is stands for stream editor and it can perform lot’s of function on file like, searching, find and replace, insertion or deletion. Though most common use of SED command in UNIX is for substitution or for find and replace. By using SED you can edit files even without opening it, which is much quicker way to find and replace something in file, than first opening that file in VI Editor and then changing itSed Syntax :: sed OPTIONS. . . [SCRIPT] [INPUTFILE. . . ] Some Examples For Sed ::  For these examples we will be working with a file called example. c Displaying partial text of a file ::  This example only shows only from line 10 to 21 and option -n supresses the printing of the entire file1` sed -n 10,21p example. c` Deleting a line using sed command ::  N is the line number and d is the option for deletion. 1`sed Nd example. c`Deleting a range of lines ::  Delete from line 2 to 100 and for deleting the line other than the ones mentioned use “!d”1`sed '2,100d' example. c`Adding Blank lines/spaces ::  To add a blank line after every non-blank line, we will use option ‘G’1`sed G example. c`Search and Replacing a string using sed ::  To search &amp; replace a string from the file, we will use the following example1`sed 's/int/float/' example. c`   Here s means to search for int and replace with float for every line but only for the first occurence     For replacing all the occurences use g option  1`sed 's/int/float/g' example. c` For replacing only nth occurence use n(eg:10)1`sed 's/int/float/10' example. c` For replacing all nth occurences use ng(eg:10g)1`sed 's/int/float/10g' example. c` Replace a string on a particular line , for example line 51`sed '5 s/int/float/' example. c`  Replace a string on a particular range of lines , for example line 5 to 101`sed '5,10 s/int/float/' example. c` Adding and/or changing lines with matched pattern ::    Add a line after/before the matched search : To add a new line with some content after every pattern match, use option ‘a’   sed '/int/a  Hello , You know you are awesome right ? ' example. c     To add a new line with some content a before every pattern match, use option ‘i’   sed '/int/i  Hello , You know you are awesome right ? ' example. c     Change a whole line with matched pattern : To change a whole line to a new line when a search pattern matches we need to use option ‘c’ with sed   sed '/int/c  Hello , You know you are awesome right ? ' example. c   There is a whole lot more to sed , for more info refer More examples"
    }, {
    "id": 57,
    "url": "http://localhost:4000/2021-10-13-grep-howto",
    "title": "Grep command usage cheatsheet",
    "body": "2021/10/13 - What is Grep?Grep stands for “global regular expression print” and it is an ultimate command to search text or any file for lines that contain a match to the specified text pattern, word or regex. By default, grep outputs only the matched lines. Basic grep usage: 123$ grep pattern filenameAs a result grep would give all patterns found in file named “filename”. For example: 123456789$ grep pattern filenamepatternpattern1zzzpattern44Also you could use pipe to filter output of any command. For example, let’s find installed PostgreSQL client version on Ubuntu server via next command: 12345$ dpkg --list | grep postgresql-client-i parameter used for case-insensetive grep 12345$ grep -i pattern filename-v - inverted match of grep 12345$ grep -v pattern filename-w used for search only for words match. For example file named “filename” from very first example had several matches, but with this argument there would be only one: 12345$ grep -w pattern filenamepatternRecursive search Let’s find all files matching pattern in this directory and all subdirectories by -r/R argument: 12345$ grep -R pattern . Also we could use grep to find file by its content: 12345$ grep -rnw '/path/to/somewhere/' -e 'pattern'"
    }, {
    "id": 58,
    "url": "http://localhost:4000/2021-10-13-charts",
    "title": "Flowchart",
    "body": "2021/10/13 - FLOWCHARTSWhat is a Flowchart? Flowchart is a graphical representation of an algorithm. Programmers often use it as a program-planning tool to solve a problem. It makes use of symbols which are connected among them to indicate the flow of information and processing. The process of drawing a flowchart for an algorithm is known as “flowcharting”. Terminal: The oval symbol indicates Start, Stop and Halt in a program’s logic flow. A pause/halt is generally used in a program logic under some error conditions. Terminal is the first and last symbols in the flowchart. Input/Output: A parallelogram denotes any function of input/output type. Program instructions that take input from input devices and display output on output devices are indicated with parallelogram in a flowchart. Processing: A box represents arithmetic instructions. All arithmetic processes such as adding, subtracting, multiplication and division are indicated by action or process symbol. Decision Diamond symbol represents a decision point. Decision based operations such as yes/no question or true/false are indicated by diamond in flowchart. Flow lines: Flow lines indicate the exact sequence in which instructions are executed. Arrows represent the direction of flow of control and relationship among different symbols of flowchart. Advantages of Flowchart:    Flowcharts are better way of communicating the logic of system.     Flowcharts act as a guide for blueprint during program designed.     Flowcharts helps in debugging process.     With the help of flowcharts programs can be easily analyzed.     It provides better documentation.     Flowcharts serve as a good proper documentation.  Disadvantages of Flowchart:    It is difficult to draw flowchart for large and complex programs.     In this their is no standard to determine the amount of detail.     Difficult to reproduce the flowcharts.     It is very difficult to modify the Flowchart.  "
    }, {
    "id": 59,
    "url": "http://localhost:4000/2021-10-12-ahoy-commands",
    "title": "Ahoy Commands",
    "body": "2021/10/12 - AHOY!This tool is very useful for automating and organizing your projects giving own CLI app with zero code and dependencies and can speed up your development. 123$ ahoy uptranslates to 12345$ docker-compose build$ docker-compose startInstallation: Instalation script for Linux user: sudo wget -q https://github. com/devinci-code/ahoy/releases/download/1. 1. 0/ahoy-`uname -s`-amd64 -O /usr/local/bin/ahoy &amp;&amp; sudo chown $USER /usr/local/bin/ahoy &amp;&amp; chmod +x /usr/local/bin/ahoyUsage: The ahoy commands are specified in . ahoy. yml file placed in your root directory of your project. The file can be initialized with command: 123$ ahoy initahoy. yml example: One example for your docker-compose environment 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485ahoyapi: v2  commands:  up:   usage: Build and start project.    cmd: |    docker-compose up -d  $@   stop:   usage: Stops the project   cmd: |    docker-compose stop  $@    down:   usage: Delete project (CAUTION).    cmd: |    if [  $1  ==  y  ]; then     docker-compose down --volumes    else     ahoy confirm  Running this command will destroy your     current site, database and build?      Are you sure you didn't mean ahoy stop?  &amp;&amp;     # Run this if confirm returns true     docker-compose down --volumes ||     # Run this if confirm returns false     echo  OK, probably a wise choice. . .      fi   build:   usage: Build project.    cmd: |    docker-compose up -d --build  $@   cli:   usage: Start a shell inside a container.    cmd: docker-compose exec  $@  sh  copy-config:   usage: Copy config file to container | ahoy copy-config FILE CONTAINER   cmd: docker cp $1 $(docker-compose ps -q $2):/app/config  dump-db:   usage: Creates dump of your datbase container using custom script   cmd: |     source . /scripts/database_dump. sh"
    }, {
    "id": 60,
    "url": "http://localhost:4000/2021-10-11-python-methods",
    "title": "Creating Object Oriented methods",
    "body": "2021/10/12 - MethodsMethods are functions defined inside the body of a class. They are used to perform operations with the attributes of our objects. Methods are a key concept of the OOP paradigm. They are essential to dividing responsibilities in programming, especially in large applications. You can basically think of methods as functions acting on an Object that take the Object itself into account through its self argument. Let’s go through an example of creating a Circle class: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class Circle:  pi = 3. 14  # Circle gets instantiated with a radius (default is 1)  def __init__(self, radius=1):    self. radius = radius     self. area = radius * radius * Circle. pi  # Method for resetting Radius  def setRadius(self, new_radius):    self. radius = new_radius    self. area = new_radius * new_radius * self. pi  # Method for getting Circumference  def getCircumference(self):    return self. radius * self. pi * 2c = Circle()print('Radius is: ',c. radius)print('Area is: ',c. area)print('Circumference is: ',c. getCircumference())In the init method above, in order to calculate the area attribute, we had to call Circle. pi. This is because the object does not yet have its own . pi attribute, so we call the Class Object Attribute pi instead. In the setRadius method, however, we’ll be working with an existing Circle object that does have its own pi attribute. Here we can use either Circle. pi or self. pi. Now let’s change the radius and see how that affects our Circle object: 1234567891011c. setRadius(2)print('Radius is: ',c. radius)print('Area is: ',c. area)print('Circumference is: ',c. getCircumference())Great! Notice how we used self. notation to reference attributes of the class within the method calls. Review how the code above works and try creating your own method. "
    }, {
    "id": 61,
    "url": "http://localhost:4000/2021-10-11-python-iterators%20and%20generators",
    "title": "Iterators and Generators in Python",
    "body": "2021/10/12 - Generators and Iterators in PythonGenerator functions allow us to write a function that can send back a value and then later resume to pick up where it left off. This type of function is a generator in Python, allowing us to generate a sequence of values over time. The main difference in syntax will be the use of a yield statement. In most aspects, a generator function will appear very similar to a normal function. The main difference is when a generator function is compiled they become an object that supports an iteration protocol. That means when they are called in your code they don’t actually return a value and then exit. Instead, generator functions will automatically suspend and resume their execution and state around the last point of value generation ￼￼ To start getting a better understanding of generators, let’s go ahead and see how we can create some. 123456789101112131415# Generator function for the cube of numbers (power of 3)def gencubes(n):  for num in range(n):    yield num**3for x in gencubes(10):  print(x)Generators are best for calculating large sets of results (particularly in calculations that involve loops themselves) in cases where we don’t want to allocate the memory for all of the results at the same time. Let’s create another example generator which calculates fibonacci numbers: 123456789101112131415161718192021222324252627# Generator function for the cube of numbers (power of 3)def genfibon(n):       Generate a fibonnaci sequence up to n       a = 1  b = 1  for i in range(n):    yield a    a,b = b,a+bfor num in genfibon(10):  print(num)next() built-in function in Python: A key to fully understanding generators is the next() function and the iter() function. The next() function allows us to access the next element in a sequence. Lets check it out: 12345678910111213141516171819# Generator function for the cube of numbers (power of 3)def simple_gen():  for x in range(3):    yield x# Assign simple_gen g = simple_gen()print(next(g)) #prints out a value in the generatoriter() built-in Fuction in Python: Let’s go ahead and check out how to use iter() A string object supports iteration, We can directly iterate over a string with The iter() function. 12345678910111213141516171819s = 'hello'#Iterate over stringfor let in s:  print(let)s_iter = iter(s)next(s_iter) # print each of the value in s when called The main takeaway from this article is that using the yield keyword at a function will cause the function to become a generator. This change can save you a lot of memory for large use cases. "
    }, {
    "id": 62,
    "url": "http://localhost:4000/2021-10-11-python-forloops",
    "title": "Forloops in Python",
    "body": "2021/10/12 - What are For Loops?A for loop acts as an iterator in Python; it goes through items that are in a sequence or any other iterable item. Objects that we can iterate over include strings, lists, tuples, and even built-in iterables for dictionaries, such as keys or values. Using For Loops in a List: 1234567list1 = [1,2,3,4,5,6,7,8,9,10]for num in list1:  print(num) # Prints out each number in list1Using For Loops in a String: We’ve used for loops with lists, how about with strings? Remember strings are a sequence so when we iterate through them we will be accessing each item in that string. 12345for letter in 'This is a string. ':  print(letter) #print each letter in the stringUsing For Loops in Tuples: Tuples have a special quality when it comes to for loops. If you are iterating through a sequence that contains tuples, the item can actually be the tuple itself, this is an example of tuple unpacking. During the for loop we will be unpacking the tuple inside of a sequence and we can access the individual items inside that tuple! 123456789101112131415list2 = [(2,4),(6,8),(10,12)]for tup in list2:  print(tup) #prints each tuple# Now with unpacking!for (t1,t2) in list2:  print(t1)Using For Loops in a Dictionary: Cool! With tuples in a sequence we can access the items inside of them through unpacking! The reason this is important is because many objects will deliver their iterables through tuples. Let’s start exploring iterating through Dictionaries to explore this further! 12345678910111213141516171819d = {'k1':1,'k2':2,'k3':3} #This is a Dictionary in pythonfor item in d:  print(item) #This prints out each keys in the dictionary# Dictionary unpacking for both keys and valuesfor k,v in d. items():  print(k)  print(v) We have learned how to use for loops to iterate through tuples, lists, strings, and dictionaries. "
    }, {
    "id": 63,
    "url": "http://localhost:4000/2021-10-11-insertion-sort-python",
    "title": "Insertion Sort in Python",
    "body": "2021/10/12 - Insertion Sort in PythonInsertion Sort is type of sorting algorithm that is relatively simple to implement. It does not have the best runtime, i. e. O(n^2), compared to more advanced sorting algorithms such as quicksort or merge sort but is a good starting sorting algorithm to learn. It can be used to sort smaller arrays consisting of strings or numbers. Pseudocode: Here is the pseudocode of insertion code (from wikipedia): 12345678910111213141516171819i ← 1while i &lt; length(A)  j ← i  while j &gt; 0 and A[j-1] &gt; A[j]    swap A[j] and A[j-1]    j ← j - 1  end while  i ← i + 1end whileThe general idea behind it is to iterate through the array from beginning to end and swaps each element from the current element to the beginning of the array if a “greater” prior element is found compare to the current element. It basically sorts “subsections” of the array repeatedly until the entire array is sorted by “inserting” new elements in the right order in the subsection of the array. Python Implementation: Without further ado, here is my Python (3) implementation of it: 123456789101112131415161718192021def insertion_sort(array):  for i in range(1, len(array)):    j = i    while j &gt; 0 and array[j - 1] &gt; array[j]:      # swap the two array elements      temp = array[j - 1]      array[j - 1] = array[j]      array[j] = temp      j -= 1  return arrayAs you can see, it closely follows the pseudocode, with some minimal code savings using the range function. The swap was implemented inline but could be implemented as a separate function as well. Runtime: As mentioned, the average runtime for this algorithm is O(n^2). The best case is an array that is already sorted with a runtime of O(n) as the current element in the array will only be compared once with a prior element. The worst case is an array that is sorted in reverse as each new element will need to be compared (and swapped) with every prior element to the beginning of the array. Thanks for reading, any comment or feedback is most welcome! "
    }, {
    "id": 64,
    "url": "http://localhost:4000/2021-10-11-DataStructures",
    "title": "DataStructures - Basic concept",
    "body": "2021/10/12 - Basic data structures:: Python has four basic structure namely Lists,Dictionary,Tuple and sets. These data structures are in built that come along with python and we also have user defined data structure. List:: Lists are the type of container which can store data of different types in the memory. Lists are created using ‘[]’(square braces) Example: 123l1=[34,56,78,'list',(2,3)]Sets:: Sets are again similar to lists and tuples but diffrence would be it does not store duplicate values. It is enclosed in curly braces{} Example: 123s1={2,45,(4. 5,7),s}Tuple:: Tuple is similar to Lists but the diffrence is tuples are immutable where lists are mutable. Tuples are created using round braces() Example: 123t1=(1,2,3,(67,78),'tuple')Dictionary:: Okay now dictionary are not at all like lists. These data structures store key-value pair. Take an anology of a dictionary where there is a word and a meaning to that. Dictionaries in python are created using curly braces. Example: 123d1={1:a,2:b,3:c}Some of the user defined data structures are as follows: Array:: These data structures are similar to lists but it is homogeneous that is the elements having same datatype. Linked list:: These are the data structure that holds the value of next element using pointers. Stack:: These data structure follow the principle of last in first out. Basically, we can access only the last entered value. We can also do operations like push or pop. Queue:: These are the data structures that work following the principle of first in first out. You totally relate it to a queue in real life. Hash maps:: Hash maps are same as dictionaries in python. Graph:: Graphs stores the data in the collection of points called vertices and edges. "
    }, {
    "id": 65,
    "url": "http://localhost:4000/2021-10-11-git-installation",
    "title": "Git Installation",
    "body": "2021/10/11 - Git InstallationBefore working on Git repositories it is advised to get a good knowledge of Git. Git is an open source version control system. It is easy to learn and has very fast performance irrespective of the system. Steps to install Git:    Download and install Git for your system.     After installation open a terminal in your system and write git to check proper installation.   If it returns something like this below then congrats. Git has been installed. &lt;img src=”https://user-images. githubusercontent. com/40291960/136825925-cfeccd43-78a9-4eb1-a485-00b9110fc4be. png” height=300&gt; Set up Git credentials:  In the terminal/shell type:12345git config --global user. name  Your name here git config --global user. email  your_email@example. com These will configure the git to set your name and email as default. You can also add(optional): 12345git config --global color. ui truegit config --global core. editor emacs The first command is to enable colors in the terminal which are used to better understand the current state of the code. The second command is to change the default text editor to emacs. You can change “emacs” to any other text editor desired. For more information refer to GitHub Docs: "
    }, {
    "id": 66,
    "url": "http://localhost:4000/2021-10-11-ist-comprehension",
    "title": "List Comprehension In Python",
    "body": "2021/10/11 - What Is A List Comprehension: List comprehensions are a really cool way to add data to a list in python, from within the list itself. For example, say we wanted to populate a list with numbers from 0-5, we could use a for loop to accomplish this as follows: 12345678910111213nums = []for i in range(6):  nums. append(i)print(nums)Which would result in the following 123[0, 1, 2, 3, 4, 5]Doing this would give us an array that contains numbers from 0 - 5 , just like we wanted however there’s a much cooler way to achieve this, and moreso its a “one-liner”. Let’s see how: 1234567nums = [x for x in range(6)]print(nums)This took us from roughly 5 lines of code to one!. So let me explain what just happened. To create a list comprehension, you create a list first and then add logic for the data inside the square brackets. Usually it follows this template: 123array = [x(placeholder variable) (for statement)]   x: is the placeholder variable and represents every item in the list. It’s exactly like the for loop variable in the first example i. It is always the first part of the list comprehension     for statement: this is the for-loop that populates the list with actual values for x, and can take any form you want, you could even have conditional blocks in it.  Let’s see an example of list comprehension that uses conditional statements in it. If we wanted to populate a list with letters or characters from a word except vowels in it we could use a list comprehension to accomplish that as follows: 1234567891011vowels = 'aeiou'letters = [x for x in  apple  if x not in vowels]print(letters)This would result in the following: 123['p', 'p', 'l']We could also include an else statement however we need to put the if and else block before the for loop. 1234567891011vowels = 'aeiou'letters = [x if x not in vowels else 0 for x in  apple ]print(letters)This would result in the following: 123[0, 'p', 'p', 'l', 0]This is obviously a much easier way to populate your lists in python and can come in handy when you don’t have the luxury of writing a full loop. Have fun coding!. "
    }, {
    "id": 67,
    "url": "http://localhost:4000/2021-10-10-the-event-loop",
    "title": "The JavaScript Event Loop",
    "body": "2021/10/10 - What are Asynchronous Operations in JavaScript?: You may already know that the JavaScript V8 engine executes on a single thread, which means if there are synchronous operations that take longer periods of time, they would inturn block the subsequent synchronous operations. Therefore, JavaScript uses asynchronous operations in order to prevent blocking during code execution. In the JavaScript engine, we have the following components:    Call Stack     Event Loop     WEB APIs environment     Call-back Queue     Micro-task Queue  Whenever there is any asynchronous task, JS moves it to the WEB APIs Environment, for example, when you have an img tag with a very large image in the “src” attribute, this image is not downloaded synchronously, because that would block the thread, instead it is moved into the WEB API Environment where the image is loaded. 1234567&lt;img src= largeimg. jpg  /&gt;Now, if you want to do something once the image is loaded, you will need to listen to the image’s ‘load’ event. 123456789document. querySelector('img'). addEventListener('load', () =&gt; console. log('Image has been loaded!'));Now once the image has been loaded, this callback function is still not executed, instead now it is moved into the Callback queue. The callback function waits in the callback queue, the event loop will check for synchronous code, and wait until the call stack is empty. Once the call stack is empty, the event loop will push in a first in callback function into the call stack in one event loop tick. And that is when that call back function is executed. However, this changes when there are micro-tasks such as Promises. When there is a promise, it is sent to the microtask queue. Microtasks will always have priority over the callbacks and they can and will halt the callbacks until they are executed, event loop will always prioritize microtasks. This is how the JavaScript Call Stack, Event Loop, Call Back Queue, Microtasks Queue and WEB API Environments work. An Example: Here is a code snippet that can gives more clarity on the sequence of execution in JavaScript: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455//Synchronous Code - Always prioritized over async codeconsole. log('Asynchronous TEST start');//It is a 0 Second Timer, But a timer is not a microtasksetTimeout(() =&gt; console. log('0 sec timer'), 0);//Promise is a microtaskPromise. resolve('Resolved promise 1'). then(res =&gt; console. log(res));//2nd promise is a microtask tooPromise. resolve('Resolved promise 2'). then(res =&gt; {for (let i = 0; i &lt; 1000000000; i++) {} //very large loopconsole. log(res);}); //Synchronous Code - Always prioritized over async codeconsole. log('Test end');"
    }, {
    "id": 68,
    "url": "http://localhost:4000/2021-10-10-selecting-elements-from-dom",
    "title": "Selecting Elements From The DOM",
    "body": "2021/10/10 - What is the DOM?: Simply put, the DOM (Document Object Model) is the tree in the browser that keeps track of all elements (nodes) on the page as well as their attributes and properties. At some point, you’d need to select an element from the DOM for various reasons. You might want to add an event listener, or change a style,etc. There are four main methods that can help us achieve this:    document. getElementById - Takes an Id and gets the first element with that Id.     document. getElementsByClassName - Takes a class name and gets all elements with that class name.     document. querySelector - Takes a query and gets the first element matching that query.     document. querySelectorAll - Takes a query and returns all elements matching that query.  Of the four methods above, the first two are the older and have been used for a very long time, hence, a lot of people know it and often teach it to others. I beg to differ though as my experience with 3 and 4 have been spectacular. They both take CSS-like queries as their input and working with them has greatly improved my speed. You can use them like so 1234567document. querySelector( div. box &gt; p ); //Returns the p tag that is in a div with a class of boxdocument. querySelectorAll( section. card h2 ); //Returns all the h2 tags that are children ( or grandchildren ) of// the section element with a class of tagTo get the elements we got in the code snippet above, we’d have to add new Ids or classes to our elements which I feel is unnecessary. If you aren’t already using methods 3 and 4, I really do hope you switch. Thanks. "
    }, {
    "id": 69,
    "url": "http://localhost:4000/2021-10-08-equests-library",
    "title": "Requests library in Python",
    "body": "2021/10/09 - Python Requests Library: Sometimes we need with a script written in Python accessing to an API or download the content of a web page. For that we can use the Requests Library First we need to install the library: 123pip install requestsCode Example : 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import requests# The requests module provides us different methods (get, post, update, delete)r = requests. get('http://www. google. com')# In the request method also it is possible to specify the headers, the cookies and the data sentheaders = { 'accept' : '*/*' }payload = { 'title' : 'Download web page with python' }cookies = dict(example_cookie='value')r = requests. post('https://reqres. in/api/posts', data=payload, headers=headers, cookies=cookies)# With the object returned # We could check the status code of the responser. status_code# We could obtain the content of the page as a stringr. text# Or if the url is an API, we could obtain the response in json formatr. json()"
    }, {
    "id": 70,
    "url": "http://localhost:4000/2021-10-08-Binary-serch-tree",
    "title": "What are Binary serch tree in python",
    "body": "2021/10/09 - What is Binary search Trees?: Binary Search Tree is a node-based binary tree data structure which has the following properties: The left subtree of a node contains only nodes with keys lesser than the node’s key. The right subtree of a node contains only nodes with keys greater than the node’s key. The left and right subtree each must also be a binary search tree. There must be no duplicate nodes. ###Pros of a BST    When balanced, a BST provides lightning-fast O(log(n)) insertions, deletions, and lookups.     Binary search trees are pretty simple. An ordinary BST, unlike a balanced tree like a red-black tree, requires very little code to get running.  ###Cons of a BST    Slow for a brute-force search. If you need to iterate over each node, you might have more success with an array.     When the tree becomes unbalanced, all fast O(log(n)) operations quickly degrade to O(n).     Since pointers to whole objects are typically involved, a BST can require quite a bit more memory than an array, although this depends on the implementation.  There are many applications of binary search trees in real life, and one of the most common use cases is storing indexes and keys in a database. For example, when you create a primary key column in MySQL or PostgresQL, you create a binary tree where the keys are the values of the column and the nodes point to database rows. This allows the application to easily search for database rows by specifying a key, for example, to find a user record using the email primary key. Code Example : # Binary Search Tree operations in Python# Create a nodeclass Node:  def __init__(self, key):    self. key = key    self. left = None    self. right = None# Inorder traversaldef inorder(root):  if root is not None:    # Traverse left    inorder(root. left)    # Traverse root    print(str(root. key) +  -&gt; , end=' ')    # Traverse right    inorder(root. right)# Insert a nodedef insert(node, key):  # Return a new node if the tree is empty  if node is None:    return Node(key)  # Traverse to the right place and insert the node  if key &lt; node. key:    node. left = insert(node. left, key)  else:    node. right = insert(node. right, key)  return node# Find the inorder successordef minValueNode(node):  current = node  # Find the leftmost leaf  while(current. left is not None):    current = current. left  return current# Deleting a nodedef deleteNode(root, key):  # Return if the tree is empty  if root is None:    return root  # Find the node to be deleted  if key &lt; root. key:    root. left = deleteNode(root. left, key)  elif(key &gt; root. key):    root. right = deleteNode(root. right, key)  else:    # If the node is with only one child or no child    if root. left is None:      temp = root. right      root = None      return temp    elif root. right is None:      temp = root. left      root = None      return temp    # If the node has two children,    # place the inorder successor in position of the node to be deleted    temp = minValueNode(root. right)    root. key = temp. key    # Delete the inorder successor    root. right = deleteNode(root. right, temp. key)  return rootroot = Noneroot = insert(root, 8)root = insert(root, 3)root = insert(root, 1)root = insert(root, 6)root = insert(root, 7)root = insert(root, 10)root = insert(root, 14)root = insert(root, 4)print( Inorder traversal:  , end=' ')inorder(root)print( \nDelete 10 )root = deleteNode(root, 10)print( Inorder traversal:  , end=' ')inorder(root)"
    }, {
    "id": 71,
    "url": "http://localhost:4000/2021-10-07-git-basic-commands",
    "title": "Most Used Commands of Git",
    "body": "2021/10/07 - Git commands Cheat Sheetto check your Git configuration: 123git config -lto setup your Git username: 123git config --global user. name  name to setup your Git user email: 123git config --global user. email  signups@fabiopacifici. com to cache your login credentials in Git: 123git config --global credential. helper cacheto initialize a Git repo: 123git initto add a file to the staging area in Git: 123git add filename_hereto add all files in the staging area in Git: 123git add . to add only certain files to the staging area in Git: 123git add fil*to check a repository’s status in Git: 123git statusto commit changes in the editor in Git: 123git committo commit changes with a message in Git: 123git commit -m  your commit message here to commit changes (and skip the staging area) in Git: 123git commit -a -m your commit message here to see your commit history in Git: 123git logto see your commit history including changes in Git: 123git log -pto see a specific commit in Git: 123git show commit-idto see log stats in Git: 123git log --statto rename files in Git: 123git mv oldfile newfileto revert staged changes in Git: 12345git reset HEAD filenamegit reset HEAD -pto create a new branch in Git: 123git branch branch_nameto switch to a newly created branch in Git: 123git checkout branch_nameto list branches in Git: 123git branchto create a branch in Git and switch to it immediately: 123git checkout -b branch_nameto delete a branch in Git: 123git branch -d branch_nameto merge two branches in Git: 123git merge branch_nameto add a remote repository in Git: 123git add remote https://repo_hereto see remote URLs in Git: 123git remote -vto push changes to a remote repo in Git: 123git pushto pull changes from a remote repo in Git: 123git pullto merge a remote repo with your local repo in Git: 123git merge origin/main"
    }, {
    "id": 72,
    "url": "http://localhost:4000/2021-10-05-Jenkins-Pipeline-CI-CD-Overview",
    "title": "Jenkins Pipeline Example.",
    "body": "2021/10/05 - Jenkins PipelineJenkins Pipeline is a continuous delivery (CD) pipeline and has automated expression of processes that enables the code to move from the version control system and through all the processes of testing and deployment, so that the best and reliable built is handed over to your end users and customers. Pipeline provides an extensible set of tools for modeling simple-to-complex delivery pipelines “as code” via the Pipeline domain-specific language (DSL) syntax. Creating a Jenkinsfile and committing it to source control provides a number of immediate benefits:: 1. Automatically creates a Pipeline build process for all branches and pull requests. 2. Code review/iteration on the Pipeline (along with the remaining source code). 3. Audit trail for the Pipeline. 4. Single source of truth for the Pipeline, which can be viewed and edited by multiple members of the project. Why Pipeline?: Pipeline adds a powerful set of automation tools onto Jenkins, supporting use cases that span from simple continuous integration to comprehensive CD pipelines. By modeling a series of related tasks, users can take advantage of the many features of Pipeline: 1234567891011  1. Code: Pipelines are implemented in code and typically checked into source control, giving teams the ability to edit, review, and iterate upon their delivery pipeline.  2. Durable: Pipelines can survive both planned and unplanned restarts of the Jenkins controller.  3. Pausable: Pipelines can optionally stop and wait for human input or approval before continuing the Pipeline run.  4. Versatile: Pipelines support complex real-world CD requirements, including the ability to fork/join, loop, and perform work in parallel.  5. Extensible: The Pipeline plugin supports custom extensions to its DSL [1] and multiple options for integration with other plugins. Pipeline concepts: The following concepts are key aspects of Jenkins Pipeline, which tie in closely to Pipeline syntax. Pipeline: A Pipeline is a user-defined model of a CD pipeline. A Pipeline’s code defines your entire build process, which typically includes stages for building an application, testing it and then delivering it. Node: A node is a machine which is part of the Jenkins environment and is capable of executing a Pipeline. Stage: A stage block defines a conceptually distinct subset of tasks performed through the entire Pipeline (e. g. “Build”, “Test” and “Deploy” stages), which is used by many plugins to visualize or present Jenkins Pipeline status/progress. [6] Step: A single task. Fundamentally, a step tells Jenkins what to do at a particular point in time (or “step” in the process). For example, to execute the shell command make use the sh step: sh ‘make’. When a plugin extends the Pipeline DSL, [1] that typically means the plugin has implemented a new step. Pipeline syntax overview Pipeline example: Example of a Jenkinsfile using Declarative Pipeline syntax: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849pipeline {   agent any   options {    skipStagesAfterUnstable()  }  stages {    stage('Build') {       steps {         sh 'make'       }    }    stage('Test'){      steps {        sh 'make check'        junit 'reports/**/*. xml'       }    }    stage('Deploy') {      steps {        sh 'make publish'      }    }  }}123456789101112131415161718192021222324252627282930311. pipeline is Declarative Pipeline-specific syntax that defines a  block  containing all content and instructions for executing the entire Pipeline. 2. agent is Declarative Pipeline-specific syntax that instructs Jenkins to allocate an executor (on a node) and workspace for the entire Pipeline. 3. stage is a syntax block that describes a stage of this Pipeline. Read more about stage blocks in Declarative Pipeline syntax on the Pipeline syntax page. As mentioned above, stage blocks are optional in Scripted Pipeline syntax. 4. steps is Declarative Pipeline-specific syntax that describes the steps to be run in this stage. 5. sh is a Pipeline step (provided by the Pipeline: Nodes and Processes plugin) that executes the given shell command. 6. junit is another Pipeline step (provided by the JUnit plugin) for aggregating test reports. 7. node is Scripted Pipeline-specific syntax that instructs Jenkins to execute this Pipeline (and any stages contained within it), on any available agent/node. This is effectively equivalent to agent in Declarative Pipeline-specific syntax. More On Jenkins Pipeline at:Jenkins Pipeline Pipeline Syntax Using Jenkinsfile "
    }, {
    "id": 73,
    "url": "http://localhost:4000/2021-10-05-data-encapsulation-java",
    "title": "Data Encapsulation In Java",
    "body": "2021/10/05 - ENCAPSULATIONEncapsulation is defined as the wrapping up of data under a single unit. It is the mechanism that binds together code and the data it manipulates. In Encapsulation, the variables or data of a class is hidden from any other class and can be accessed only through any member function of its own class in which it is declared. It is also known as a combination of data-hiding and abstraction. Implementation of DATA ENCAPSULATION in JAVA: Program to show Data Enacpsulation: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111class Encapsulate {  // private variables declared  // these can only be accessed by  // public methods of class  private String StudentName;  private int StudentRoll;  private int StudentAge;   // get method for age to access  // private variable StudentAge  public int getAge() { return StudentAge; }   // get method for name to access  // private variable STudentName  public String getName() { return StudentName; }   // get method for roll to access  // private variable StudentRoll  public int getRoll() { return StudentRoll; }   // set method for age to access  // private variable Studentage  public void setAge(int newAge) { StudentAge = newAge; }   // set method for name to access  // private variable StudentName  public void setName(String newName)  {    StudentName = newName;  }   // set method for roll to access  // private variable StudentRoll  public void setRoll(int newRoll) { StudentRoll = newRoll; }} public class TestEncapsulation {  public static void main(String[] args)  {    Encapsulate obj = new Encapsulate();     // setting values    obj. setName( Vasav );    obj. setAge(19);    obj. setRoll(51);     System. out. println( Student name:   + obj. getName());    System. out. println( Student age:   + obj. getAge());    System. out. println( Student roll:   + obj. getRoll());     // Direct access of StudentRoll is not possible    // due to encapsulation  }}Output 1234567Student name: VasavStudent age: 19Student roll: 51In the above program, the class Encapsulate is encapsulated as the variables are declared as private. The get methods like getAge() , getName() , getRoll() are set as public, these methods are used to access these variables. The setter methods like setName(), setAge(), setRoll() are also declared as public and are used to set the values of the variables. Uses And Advantages Of Data Abstraction:    Data Hiding: The user will have no information about the private data variables.     Increased Flexibility     Use in Big e-Commerce websites.     It reduces Human error.  "
    }, {
    "id": 74,
    "url": "http://localhost:4000/2021-10-05-const-and-let-in-javascript",
    "title": "A little about const and let keywords in Javascript",
    "body": "2021/10/05 - cons and let keywords:    const and let both are the keywords for variable declaration.     const and let both are the block scope.  ### Block Scope Example 123456789101112131415   const blockVariableExample = () =&gt; {      let number = 123;      console. log(number) // Prints 123    }       blockVariableExample;    console. log(number) // Here it gives error as number varaible can only be accessed inside blockVariableExample function   const cannot be redeclared or updated while we can redeclare let variables.   const Example:   123456789101112131415 const number = 123    // Updating a const variable number = 324 // Gives error assignment to const variable    // Redeclaring a const variable const number = 567 // Gives error identifier number has already been declared    let Example:   1234567891011121314151617 let number = 123    // Updating a let variable number = 324 // It updates the variable number to 324    // Redeclaring a let variable let number = 567 // Gives error identifier number has already been declared      "
    }, {
    "id": 75,
    "url": "http://localhost:4000/2021-10-04-git-and-github",
    "title": "Git and Github",
    "body": "2021/10/04 - Differences Between Git and Github If you have worked on coding projects you might came across these terms but many new developers get confused between git and GitHub. They are not same though they are connected with each other. Let’s see some differences. Git: Git is a Version control system that records changes to a file or set of files over time. It helps in comparing, differentiating and reverting the changes between two versions of the project. It really helpful in preventing conflicts specially when a lot of people are working on one larger project. Github: GitHub is a Web-based Git version control repository hosting service. Github is designed to manage open-source projects that are using git. It provides features like : creating a branch, creating a Pull Request, raising issues, etc. Summarizing the differences::       S no.    Git   Github   | —– | —————————————– | ————————————————- |       1.    Git is a version control system.    Github is a hosting service for git repositories.          2.    It is installed locally on system.    It is a cloud based service.          3.    It is a command line tool.    It is a Graphical user interface.          4.    It helps in tracking the changes locally.    It helps in collaborating with others.          5.    It was first released in 2005.    It was launched in 2008.    "
    }, {
    "id": 76,
    "url": "http://localhost:4000/2021-10-02-Decision%20Trees",
    "title": "Why Decision trees are so popular in Machine Learning algorithms",
    "body": "2021/10/03 - What is Decision Trees?: Decision trees-like model more specifically it is probablity tree that enables the user to made decision on the basis on conditions. This condition can be understand as if-then statements so there’s if condition then it will choose some vertex else other. The solution choosen after particular condition is called decision. This algorithm can be used for both regression and classification. In this trees internal nodes represents conditions and the leaf node depicts decision. But why they are so popular?: First off, Lets look which module allow you to make decision tree: 1234567From sklearn. tree import DecisionTreeClassifier classifier= DecisionTreeClassifier(criterion='entropy', random_state=0) #for classificationclassifier= DecisionTreeRegressor(criterion='entropy', random_state=0) #for regression1. This tree based algorithm can visualized and inclusing its conditions. https://scikit-learn. org/stable/auto_examples/tree/plot_iris_dtc. html https://scikit-learn. org/stable/_images/iris. sv you can see how the decision tree made is plotted. 2. Less preprocessing is required when compared to other algorithms. Less effort in preprocessing makes it much handy. 3. This algorithm can handle missing values and it works healthy while working with outliers. 4. The usage is simple hence its very understandable. It looks like if-else statements 5. They can be stacked with other algorithms and can reach excellent results 6. They dont require setting of lots of parameters and can easily handle multidimensional data. Thats it! Now you know what makes decision trees so popular! But this doesn’t mean they can perform outstanding always. "
    }, {
    "id": 77,
    "url": "http://localhost:4000/2021-10-01-sftp-setup",
    "title": "SFTP Configuration in Linux(CENTOS)",
    "body": "2021/10/01 - SFTP ConfigurationWhat is SFTP?: SFTP (Secure File Transfer Protocol) is a file transfer protocol that leverages a set of utilities that provide secure access to a remote computer to deliver secure communications. It leverages SSH (Secure Socket Shell or Secure Shell) and is frequently also referred to as ‘Secure Shell File Transfer Protocol’. Instructions: To install an SFTP server on a CENTOS Linux Server, follow the below steps:  Execute the following command to check whether SSH is installed123  sudo rpm -qa | grep ssh If SSH is not installed, run the following command123  sudo yum install openssh-server Open port 22123  sudo iptables -I INPUT -p tcp --dport 22 -j ACCEPT Create a user and provide new password for that user12345  sudo useradd {user_name}  sudo passwd {user_name} Create a directory for the file transfer and make the changes1234567  sudo mkdir {directory_name}  sudo chgrp {user_name} {directory_name}  sudo chown {user_name} {directory_name} In /etc/ssh/sshd_config file add the below configuration:12345678910111213141516171819  Match User {user_name}  ForceCommand internal-sftp  PubkeyAuthentication yes  PasswordAuthentication yes  ChrootDirectory {directory_name}  PermitTunnel no  AllowAgentForwarding no  AllowTcpForwarding no  X11Forwarding no Restart the SFTP Service123  sudo systemctl restart sshd. service Testing(provide password on prompted)123  sftp {user_name}@{server_address}"
    }, {
    "id": 78,
    "url": "http://localhost:4000/2021-10-01-tar-gzip-in-linux",
    "title": "How to compress and uncompress files in linux.",
    "body": "2021/10/01 - Compressing , Uncompressing Files In Linux?The most commonly used commands in linux are tar, gzip and gunzip for compressing and uncompressing files in linux. Tar vs GzipThe tar command is used to compress a group of files into an archive. The command is also used to extract or modify tar archives as well. The tar command does not necessarily compresses the files in the archive it just groups them into a single file. To achieve compression and reduce disk usage on your linux systems the gzip option can be used with tar. Basic Syntax For Tar?: 12345tar [options] [archive-file] [file or directory to be archived]Options For Tar?: 12345678910111213141516171819202122232425-c : Creates archive-x : Extracts the archive-f : creates archive with given filename-t : displays or lists files in archived file-u : archives and adds to an existing archive file-v : Displays verbose information-A : Concatenates the archive files-z : compresses the tar file using gzip-j : compresses the tar file using bzip2-W : Verifies an archive file-r : updates or adds file or directory in already existing . tar fileExample Usage Of Tar and Gzip::  Extract an archive:12345$tar xfv archive. tar(Options: x = extract, f = file, v = verbose)  Create an archive with files or folder:12345$tar cfv archive. tar file1 file2 file3(Options: c = create)  Create compressed archives with tar using gzip:12345tar cfzv archive. tar file1 file2 file3(Options: z = compress with gzip)  Extract files from gzip tar Archive archive. tar. gz:12345$tar xvzf archive. tar. gz(Options: x = extract, f = file, v = verbose) More Useful Resources:: Create Tar GZ File Tar in linux Tar Examples "
    }, {
    "id": 79,
    "url": "http://localhost:4000/2021-10-01-simplify-man-commands-in-linux",
    "title": "TLDR community pages to simplify man commands in linux.",
    "body": "2021/10/01 - man command vs tldrman command in Linux is used to display the user manual of any command that we can run on the terminal. It provides a detailed view of the command which includes NAME, SYNOPSIS, DESCRIPTION, OPTIONS, EXIT STATUS, RETURN VALUES, ERRORS, FILES, VERSIONS, EXAMPLES, AUTHORS and SEE ALSO. $man [OPTION]. . . [COMMAND NAME]. . . This is the syntax of the man command. Upon entering ‘man tar’ (tar command is used for compressing or extracting from compressed files in linux) a whole list of long descriptive details appear. To avoid going through such long descriptions, we can make use of tldr pages which are a community effort to simplify the beloved man pages. What does tldr do ?: *Basic execution: tldr *Example: tldr ls, tldr tar, tldr ps etc.  tldr tar on executing tldr tar only the relevant commands related to tar and their short description appears as shown below:OUTPUT: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051[c]reate an archive and write it to a [f]ile:tar cf  [c]reate a g[z]ipped archive and write it to a [f]ile:tar czf  [c]reate a g[z]ipped archive from a directory using relative paths:tar czf --directory= . E[x]tract a (compressed) archive [f]ile into the current directory [v]erbosely:tar xvf E[x]tract a (compressed) archive [f]ile into the target directory:tar xf --directory=[c]reate a compressed archive and write it to a [f]ile, using [a]rchive suffix to determine the compression program:tar caf  Lis[t] the contents of a tar [f]ile [v]erbosely:tar tvf E[x]tract files matching a pattern from an archive [f]ile:tar xf --wildcards   How to install tldr on your linux systems?: One of the most mature clients of tldr is node. JS and hence npm can be used to install tldr, simply install nodejs on your system and execute the below command: npm install -g tldr Link for tldr for more details :: tdlr "
    }, {
    "id": 80,
    "url": "http://localhost:4000/2021-10-01-sending-signals-to-processes-in-linux",
    "title": "Sending Signals For Controlling Processes In Linux.",
    "body": "2021/10/01 - Sending Signals In LinuxThe most basic approach of controlling processes in linux is by sending signals to the processes. There are multiple signals that can be sent to a process. There are multiple signals that can be sent to a process. Simply run below command to view all the available signals: kill -l To send signals to a process we can use kill, pkill and pgrep commands in linux. Finding Process IDs in Linux ?: PS is the most common used command in linux to view all active processes in linux, use the below commands to view the process: To view all processes: 12345678910111213$psOR$ps auxTo find a particular process PID: 12345678910111213$pidof &lt;application_name&gt;OR$ps -ef | grep &lt;application_name&gt;example: 123456789101112131415$pidof java26901OR$ps -ef | grep javaCommon signals in linux ?: Most signals in linux are for internal use by the system, or for system administrators when they perform any server operation or developer when they write code. The following are signals which are useful for a system user: 123456789101112131415SIGHUP 1 – sent to a process when its controlling terminal is closed. SIGINT 2 – sent to a process by its controlling terminal when a user interrupts the process by pressing [Ctrl+C]. SIGQUIT 3 – sent to a process if the user sends a quit signal [Ctrl+D]. SIGKILL 9 – this signal immediately terminates (kills) a process and the process will not perform any clean-up operations. SIGTERM 15 – this a program termination signal (kill will send this by default). SIGTSTP 20 – sent to a process by its controlling terminal to request it to stop (terminal stop); initiated by the user pressing [Ctrl+Z]. The following are kill commands examples to kill a java application using its PID (ProcessId) once it freezes or becomes unresponsive: 123456789101112131415161718192021$pidof java 26901$kill 9 26901OR$kill -KILL 26901OR$kill -SIGKILL 26901To kill an application using its name, use pkill or killall like so: 1234567$pkill java$killall javaSome useful references:: Find PID In Linux Find Linux Process Memory Ram Cpu Usage Find Processes By Memory "
    }, {
    "id": 81,
    "url": "http://localhost:4000/2021-10-01-rsync-for-syncing-remote-local-directories",
    "title": "How to synchronize remote and local directories using rsync.",
    "body": "2021/10/01 - What is Rsync?Rsync stands for “remote sync” which is a remote and local file synchronization tool. It is based on an algorithm that minimizes the amount of data copied/synced by only moving the particular files that have changed. Rsync is a very flexible network-enabled syncing tool. Due to its ubiquity on Linux and Unix-like systems and its popularity as a tool for system scripts, it is included on most Linux distributions by default. Basic Syntax?: The basic syntax of rsync is similar to scp , ssh and cp. Syncing Local Systems?: To sync files on the same system the below command can be used: 12345$rsync -r &lt;dir_name&gt;/ &lt;dir_name&gt;eg. If we want to synchronize Dir1 to Dir2 recursively the command would go as follows: 123$rsync -r Dir1/ Dir2r stands for recursively. Instead of using -r we can use the -a flag which is most commonly used. The -a option is kind of a combination flag. It stands for “archive” and syncs recursively and preserves symbolic links, special and device files, modification times, group, owner, and permissions. Syntax: 12345$rsync -a &lt;dir_name&gt;/ &lt;dir_name&gt;Example: 12345$rsync -a Dir1/ Dir2Note: The trailing / in Dir1 is required to place all the contents inside Dir1 to Dir2 if / is not provided Dir1 will be placed in Dir2 and hierarchy will be as $~/Dir2/Dir1/files For Verbose details of what is being synced ?: To know more about what files are being synced from a directory to another we can pass ‘v’ flags which means verbose as follows: 12345$rsync -av &lt;dir_name&gt;/ &lt;dir_name&gt;Syncing files to remote systems ?: Rsync can be used to transfer files and synchronize one linux server to another the only prerequisite is to have ssh access to the systems and also rsync needs to be installed on both the systems. Once SSH access verified between the two machines rsync can be performed from one system to another. Example 1 Rsync From Local to remote host:: 1234567$rsync -a ~/dir1 username@remote_host:destination_directoryExample 2 Rsync From Remote to local host:: 1234567$rsync -a username@remote_host:/home/username/dir1 place_to_sync_on_local_machineLike cp and similar tools, the source is always the first argument, and the destination is always the second. ConclusionRsync makes it a good option for many different file-level operations. Rsync can simplify file transfers over networks and add robustness to local directory syncing. Useful Resources:How to use Rsync 10 practical examples of rsync "
    }, {
    "id": 82,
    "url": "http://localhost:4000/2021-09-03-plugins-vscode",
    "title": "Useful Plugins to VS Code",
    "body": "2021/09/03 - Useful plugins to VS CodeSome useful plugins/extensions for VSCode IDE. Tip: To install the plugins quickly, launch VS Code Quick Open (Ctrl + P), paste the command and press Enter. 123ext install &lt;plugin&gt;Extensions: Generic:  Beautify - HookyQR - Beautify code in place for VS Code. 123ext install HookyQR. beautify Code Runner - Jun Han - Run code snippet or code file for multiple languages. 123ext install formulahendry. code-runner CodeMetrics - Kiss Tamás - Computes complexity in TypeScript / JavaScript / Lua files. 123ext install kisstkondoros. vscode-codemetrics ESLint - Dirk Baeumer - Integrates ESLint JavaScript into VS Code. 123ext install dbaeumer. vscode-eslint GitLens - Eric Amodio - Supercharge the Git capabilities built into Visual Studio Code. 123ext install eamodio. gitlens vscode-icons - VSCode Icons Team - Icons for Visual Studio Code. 123ext install vscode-icons-team. vscode-iconsFor specific languages: Python:  Jupyter - Microsoft - Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more. 123ext install ms-toolsai. jupyter Pylance - Microsoft - A performant, feature-rich language server for Python in VS Code. 123ext install ms-python. vscode-pylance Python - Microsoft - IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more. 123ext install ms-python. pythonSQL:  SQLite - alexcvzz - Explore and query SQLite databases. 123ext install alexcvzz. vscode-sqliteMarkdown:  markdownlint - David Anson - Markdown linting and style checking for Visual Studio Code. 123ext install DavidAnson. vscode-markdownlintThemes:  Dracula Official - Dracula Theme - Official Dracula Theme. A dark theme for many editors, shells, and more. 123ext install dracula-theme. theme-dracula Omni Theme - RocketSeat - A dark theme made by Rocketseat. 123ext install rocketseat. theme-omni"
    }, {
    "id": 83,
    "url": "http://localhost:4000/2021-03-16-noopener-noreferrer-for-links",
    "title": "Always use noopener or noreferrer for links opened in new tabs",
    "body": "2021/03/16 - Always use “noopener” or “noreferrer” for links opened in new tabsIn order to open a link in a new tab, we use the target= _blank  attribute. However, it can lead to some issues if you aren’t aware of them. First, the newly opened tab uses the same process with the opener one. Hence, it can slow down your page. More importantly, the new tab is able to access the window object of the opener page via the window. opener object. Imagine that the new tab executes the following code: 123window. opener. location =  http://fake. website. here ;As the code implies, it redirects the original tab to a fake website. What happens if the fake website has the same UI as the real one? Since users already opened it, they may not realize that the website they are looking at isn’t real. Adding rel= noopener  fixes the issues. It’s good to know that there is the rel= noreferrer  attribute. It not only fixes the issues that noopener does, but also prevents the Referer header from being sent to the new tab. 12345678910111213141516171819&lt;!-- Don't --&gt;&lt;a target= _blank &gt;. . . &lt;/a&gt;&lt;!-- Do --&gt;&lt;a target= _blank  rel= noopener &gt;. . . &lt;/a&gt;&lt;!-- Or --&gt;&lt;a target= _blank  rel= noreferrer &gt;. . . &lt;/a&gt;&lt;a target= _blank  rel= noopener noreferrer &gt;. . . &lt;/a&gt; Some modern browsers, such as Chrome 88+, automatically adds the noopener behavior if it’s missing.  However, it’s still recommended to add rel= noopener  or rel= noreferrer  to avoid the security and performance issues in old legacy browsers. "
    }, {
    "id": 84,
    "url": "http://localhost:4000/2021-03-10-using-template-strings",
    "title": "Start using template strings now!",
    "body": "2021/03/10 - Start using template stringsWorking with strings is not that easy when it comes to JS. Keep in mind that this is about vanilla JavaScript (or just simply JavaScript, no frameworks here, right?). Strings are a series of characters, no big deal here if you´re not a beginner. If you are, a string is how you´re going to store text, like your name, a product description or anything else text related. Here´s how template strings work in a very simple way: 1. Boosting your code with template strings: Example: 12345678910111213function killRoach (mop){ return `I killed the roach with ${mop}. ` }; killRoach( my mop ); // Output: I killed the roach with the mop. It doesn´t seem to be that useful, huh? Let´s see how it would be without template strings: 2. Without template strings: 1234567891011function killRoach (mop){ return  I killed the roach with  + mop +  .   }; killRoach ( my hands ); // Output: I killed the roach with my hands. Just picture having to do this a dozen times a day, picture the poor one that will maintain this code. This quotation marks and sum operators hell may seem harmless but they will surelly melt your brain when it´s 2pm and you have to get things done. It´s a powerful move that will make your code more readable and easier to work with, not to mention the elegance it brings. You´ll save time, focus on harder tasks with just a simple change as this. No more keyboard punching, hair pulling and despair working with a pletora of strings. Easy and effective. Did you start already? "
    }, {
    "id": 85,
    "url": "http://localhost:4000/2021-03-01-callbacks-in-java",
    "title": "CallBacks in Java",
    "body": "2021/03/01 - Using Callbacks to perform some task after an Async event in JavaLet’s discuss the problem first and then we can understand what a callback is! Let’s see a code that does some async task which might take some time but we want to do some other work in the meantime. After getting the response or the data been produced, we want to consume the data. 1234567891011121314151617181920212223242526272829303132333435class MyThread extends Thread{  @Override  public void run() {    super. run();    // some api calls or async task that might take some time  }}public class Main {  public static void main(String[] args) {    MyThread myThread = new MyThread();    myThread. start();    // now we dont want to wait, instead we want to initialize the ui with basic components    initUi();    // after getting the response from the api, we want to update the ui.     // but the code won't wait for that to end and waiting is not a option for us  }}Now how can we know when the data is ready to consume rather than waiting for it? Well, that’s where Callback comes in. The word Callback is self-describing. It is calling back, like instead of going forward, we are going backward! Let’s create two concrete methods onSuccess() and onFailure() and let the thread that is running separately, call these methods back to the main thread! We will create an interface and pass an object to the thread. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273interface Callback{  void onSuccess(Data data); // method that to be called if the task succeded  void onFailure(Data data); // method that to be called if the task failed}class MyThread extends Thread{  Callback callback;  MyThread(Callback callback){    this. callback = callback;  }  @Override  public void run() {    super. run();    // some api calls or async task that might take some time    if(response. status == SUCCESS)callback(response. data);    else callback(response. errorMessage);  }}public class Main {  public static void main(String[] args) {    MyThread myThread = new MyThread(new Callback() { // passing the      @Override      public void onSuccess(Data data) {        loadSuccessUi(data);      }      @Override      public void onFailure(Data data) {        loadFailureUi(data);      }    });    myThread. start();    loadUi();    // now initial ui will be loaded without waiting for the response    // when the reponse is ready the ui will be updated  }}We will give the desired body to onSuccess and onFailure methods and then pass the object to the new thread that will call these methods back to the main thread and pass necessary args. In short, these two methods are working on the main thread but getting invoked from the seprate thread! "
    }, {
    "id": 86,
    "url": "http://localhost:4000/2020-12-20-pandas-read-file-backslash",
    "title": "Pandas read files",
    "body": "2020/12/20 - Sometimes when reading a file in Pandas you may incur in the following error after declaring the path name: 12345 SyntaxError: (unicode error) ‘unicodeescape’ codec can’t decode bytes in position 2-3: truncated \UXXXXXXXX escape. This happens because path names tend to have backslashes in them (e. g. ‘C:\Documents\File. csv’). In Python, backslash is used to signify special characters, but when we use it in a path name we want to refer to actual backslashes, not to special characters. To solve this issue, you need to add an r before the path name, so that Python can interpret backslashes as strings. Example: 123df = pd. read_csv(r'C:\Documents\File. csv')"
    }, {
    "id": 87,
    "url": "http://localhost:4000/2020-11-04-abstract-classes-in-java",
    "title": "Abstract Classes in Java",
    "body": "2020/11/04 - AbstractionAbstraction is a process of hiding the implementation details and showing only functionality to the user. Focus is set on the purpose of the object and not it’s functionality. CLasses: A class which is declared with the abstract keyword is an abstract class in Java. It can have Abstract methods(no body) and Non-abstract methods(has a body). An abstract class can not be initiated, meaning we can`t create an onject of its type. Let’s see why do we need abstract classes. Let’s say that we hava a class Aimal that has a lot of subclasses(Dog, Cat, etc. ) We don`t want to hava an Animal object becouse we only model a certain animals. Here is an example: 1234567891011121314151617181920212223242526272829303132333435abstract class Animal{ //abstract methods public abstract void sound(); //no body }public class Dog extends Animal{ @Override //impleenting the abstract method public void sound(){ System. out. println( Woof! ) }public static void main(String args[]) { Animal obj = new Dog(); obj. sound(); }}When to use abstract classes:    An abstract class is a good choice if we are using the inheritance concept since it provides a common base class implementation to derived classes.     An abstract class is good to use if we want to declare non-public members. In an interface, all methods must be public.     If we want to add new methods in the future, then an abstract class is a better choice. Because if we add new methods to an interface, then all of the classes that already implemented that interface will have to be changed to implement the new methods.     If we want to create multiple versions of our component, create an abstract class. Abstract classes provide a simple and easy way to version our components. By updating the base class, all inheriting classes are automatically updated with the change. Interfaces, on the other hand, cannot be changed once created. If a new version of an interface is required, we must create a whole new interface.     If we want to provide common, implemented functionality among all implementations of our component, use an abstract class. Abstract classes allow us to partially implement our class, whereas interfaces contain no implementation for any members.  "
    }, {
    "id": 88,
    "url": "http://localhost:4000/2020-11-01-map-interface-in-java",
    "title": "Map Interface in Java",
    "body": "2020/11/01 - Map InterfaceA Map contains values on the basis of key, i. e. key and value pair. Each key and value pair is known as an entry. A Map contains unique keys. A Map is useful if you have to search, update or delete elements on the basis of a key. A Map is an object that maps keys to values. A map cannot contain duplicate keys: Each key can map to at most one value. The Map interface includes methods for basic operations (such as put(), get(), remove(), containsKey(), containsValue(), size(), and empty()), bulk operations (such as putAll() and clear()), and collection views (such as keySet(), entrySet(), and values()). A Map is useful if you have to search, update or delete elements on the basis of a key. The Java platform contains three general-purpose Map implementations: HashMap, TreeMap, and LinkedHashMap. Their behavior and performance are precisely analogous to HashSet, TreeSet, and LinkedHashSet. This is Map Interface(‘java. util. Map’) hierarchy: HaspMap: HashMap is the implementation of Map, but it doesn’t maintain any order. Lets an examples of HashMap implementation: 1234567891011121314151617181920212223242526272829303132333435// Import the HashMap classimport java. util. HashMap;public class MyClass { public static void main(String[] args) {  // Create a HashMap object called capitalCities  HashMap&lt;String, String&gt; capitalCities = new HashMap&lt;String, String&gt;();  // Add keys and values (Country, City)  capitalCities. put( England ,  London );  capitalCities. put( Germany ,  Berlin );  capitalCities. put( Norway ,  Oslo );  capitalCities. put( USA ,  Washington DC );  System. out. println(capitalCities); }}Output: {USA=Washington DC, Norway=Oslo, England=London, Germany=Berlin} LinkedHasMap: Java LinkedHashMap class is Hashtable and LinkedList implementation of the Map interface, with predictable iteration order. It inherits HashMap class and implements the Map interface. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859import java. util. LinkedHashMap;import java. util. Set;import java. util. Iterator;import java. util. Map;public class LinkedHashMapDemo {  public static void main(String args[]) {     // HashMap Declaration     LinkedHashMap&lt;Integer, String&gt; lhmap =         new LinkedHashMap&lt;Integer, String&gt;();     //Adding elements to LinkedHashMap     lhmap. put(22,  Abey );     lhmap. put(33,  Dawn );     lhmap. put(1,  Sherry );     lhmap. put(2,  Karon );     lhmap. put(100,  Jim );     // Generating a Set of entries     Set set = lhmap. entrySet();     // Displaying elements of LinkedHashMap     Iterator iterator = set. iterator();     while(iterator. hasNext()) {      Map. Entry me = (Map. Entry)iterator. next();      System. out. print( Key is:  + me. getKey() +            &amp; Value is:  +me. getValue()+ \n );     }  }}Output: Key is: 22&amp; Value is: Abey Key is: 33&amp; Value is: Dawn Key is: 1&amp; Value is: Sherry Key is: 2&amp; Value is: Karon Key is: 100&amp; Value is: Jim TreeMap: The TreeMap in Java is used to implement Map interface and NavigableMap along with the AbstractMap Class. The map is sorted according to the natural ordering of its keys, or by a Comparator provided at map creation time, depending on which constructor is used. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263import java. util. TreeMap;import java. util. Set;import java. util. Iterator;import java. util. Map;public class Details {  public static void main(String args[]) {   /* This is how to declare TreeMap */   TreeMap&lt;Integer, String&gt; tmap =       new TreeMap&lt;Integer, String&gt;();   /*Adding elements to TreeMap*/   tmap. put(1,  Data1 );   tmap. put(23,  Data2 );   tmap. put(70,  Data3 );   tmap. put(4,  Data4 );   tmap. put(2,  Data5 );   /* Display content using Iterator*/   Set set = tmap. entrySet();   Iterator iterator = set. iterator();   while(iterator. hasNext()) {     Map. Entry mentry = (Map. Entry)iterator. next();     System. out. print( key is:  + mentry. getKey() +   &amp; Value is:  );     System. out. println(mentry. getValue());   }  }}Output: key is: 1 &amp; Value is: Data1 key is: 2 &amp; Value is: Data5 key is: 4 &amp; Value is: Data4 key is: 23 &amp; Value is: Data2 key is: 70 &amp; Value is: Data3 "
    }, {
    "id": 89,
    "url": "http://localhost:4000/2020-10-31-using-argparse",
    "title": "Creating a Command-Line Interface Program With Argparse",
    "body": "2020/11/01 - What is Argparse?Argparse is a module that comes pre-installed when you install Python. It allows for the creation of user-friendly command-line interfaces. Creating a CLI Program to Find the Area of a Rectangle: To start using argparse to recreate the example above, you will need to import the pacakge: 12345# the following code will be contained within a file called area. pyimport argparseNow we will create a simple method to multiply and return two numbers, like so: 12345def area_of_rectangle(length, width):  return length * widthThis method will be called when the program is executed. The parameters length and width will be extracted from the command line arguments. Now we must create a parser to handle the parsing of command-line arguments along with two positional arguments that we want to extract, i. e. the length and the width of the rectangle. 123456789parser = argparse. ArgumentParser(description='Calculates the area of a rectangle')parser. add_argument('length', default=0, type=int, help='An integer for the length of the rectangle')parser. add_argument('width', default=0, type=int, help='An integer for the width of the rectangle')We can use the values of these arguments by calling upon parser. parse_args(). 1234567args = parser. parse_args()area = area_of_rectangle(args. length, args. width)print('The area of your rectangle is: ', area, ' units squared. ')Putting everything together should look like this: # area. pyimport argparsedef area_of_rectangle(length, width):  return length * widthparser = argparse. ArgumentParser(description='Calculates the area of a rectangle')parser. add_argument('length', default=0, type=int, help='An integer for the length of the rectangle')parser. add_argument('width', default=0, type=int, help='An integer for the width of the rectangle')args = parser. parse_args()area = area_of_rectangle(args. length, args. width)print('The area of your rectangle is: ', area, ' units squared. ')Thats about it! Argparse will now parse your command-line agruments for integers to be used in our method. Every parser will have a -h optional argument by default; this option will display the help message along with the parser’s description.  "
    }, {
    "id": 90,
    "url": "http://localhost:4000/2020-10-31-array-sort-method",
    "title": "JavaScript Array.sort() Method",
    "body": "2020/10/31 - JavaScript Array sort() method. : This method sorts the elements of an array in ascending order by default. It converts the elements from the array to strings then compares their sequences of utf-16 code values. For an array of strings, this works perfectly fine. However, to sort an array of numbers, this method will not work as expected because it converts the elements to strings first. To achieve what you expect, you can provide a compare function as a callback to the sort method. There are 3 possible outcomes in the callback function: 1. &lt; 0 : a comes first 2. 0 : no change 3. &gt; 0 : b comes first If you want to sort in descending order, you can return b - a in the callback function. "
    }, {
    "id": 91,
    "url": "http://localhost:4000/2020-10-31-primary_key_sql",
    "title": "PRIMARY KEY IN SQL",
    "body": "2020/10/31 - PRIMARY-KEY - SQLA primary key is a field in a table which uniquely identifies each row/record in a database table. Primary keys must contain unique values. A primary key column cannot have NULL values. A table can have only one primary key, which may consist of single or multiple fields. When multiple fields are used as a primary key, they are called a composite key. If a table has a primary key defined on any field(s), then you cannot have two records having the same value of that field(s). To define PRIMARY KEY in SQL:- 123456789101112131415161718192021222324252627282930313233343536373839404142434445 CASE 1:-When making the table syntax-  CREATE TABLE STUDENTS(    ROLL_NO INT       NOT NULL,    NAME VARCHAR (20)   NOT NULL,    AGE INT       NOT NULL,     PRIMARY KEY (ROLL_NO)  ); CASE 2:-When there is an existing table in which there is no primary key and you want to add primary key syntax -  (write the following command)  ALTER TABLE STUDENTS ADD PRIMARY KEY (ROLL_NO); CASE 3 :- For defining a PRIMARY KEY constraint on multiple columns syntax -  CREATE TABLE STUDENTS(   ROLL_NO  INT       NOT NULL,   NAME VARCHAR (20)   NOT NULL,   AGE INT       NOT NULL,   PHONE_NO INT (10)      PRIMARY KEY (ROLL_NO,PHONE_NO) );To delete a PRIMARY KEY :- 1234567 APPLICABLE FOR ALL CASES:- syntax -   (You can clear the primary key constraints from the table with the syntax given below)   ALTER TABLE STUDENTS DROP PRIMARY KEY ;"
    }, {
    "id": 92,
    "url": "http://localhost:4000/2020-10-31-reading-linux-file-permissions",
    "title": "Linux File Permissions",
    "body": "2020/10/31 - File PermissionsFile permissions determine who can read, write, or execute a file. In Linux, these details can be viewed by using the ls -l command. On the very left of the list, you will see text that looks similar to this: -rwxrw-r-- These are your file permissions. What do These rwx- Characters Mean?:    r read - user is allowed to view the file’s contents     w write - user is allowed to edit the file’s contents     x execute - user is allowed to execute the file (or in the case of a directory, view its contents)     - no permission - used in place when a permission is not granted  File type: The very first character specifies the file type. In this case, - indicates a regular file. Different characters represent different types:    b block device     c character device     d directory     l symbolic link     p named pipe     s socket file  Owner, Groups, and Others: The next nine characters determine what permissions the owner, groups in ownership, and other users have. The first three characters after the file type indicate the ower’s permissions. In -rwxrw-r--, the owner’s file permissions are rwx. They are allowed to read, write, and execute the file. The following three characters determine permissions for members of groups that own the file. In this case, group permissions are rw-. They are allowed to read and write to the file, but cannot execute it. The last three characters are permissions for all other users that do not fit into the previous two categories. This example’s permissions for other users are r--. They are only allowed to read the file. Diagram:: "
    }, {
    "id": 93,
    "url": "http://localhost:4000/2020-10-31-localization-internationalization",
    "title": "Localization and Internationalization",
    "body": "2020/10/31 - Localization and InternationalizationYou have made an application in Java and everyone is liking your work but there is one issue, not many people know your local language and hence the larger audience is unable to use your application. You want to add support for mutiple languages so that people from across the world can use your application. But there is one small problem you only know 3-4 languages :stuck_out_tongue_winking_eye: Do not worry Locale and ResourceBundle have come to your rescue. These two classes are available under java. util package. Locale: Locale class will be used to store information about language as per ISO language codes. Now what is this? Each Locale is defined usign two things:    language code     country code  In ISO format two letters are used for describing language code (small) as well as country code (capitalized). For example: English and Indian locale would be en IN, similarly Portuguese and Brazil locale would be pt BR. In code a Locale object will be instantiated like this: Locale localeObj = new Locale(language,country); where language could be String containing “en” or “pt” or any other language code. Similarly, country String could hold “IN” or “BR” or any other country code. Properties Files: It’s fancy name for a file that stores key-value pairs. Basically we will use this file to store all the strings that we display in our application. Now, you can see how this will function. We will use same keys but change values for supporting different laguages and store it in a new properties file MessageBundle_&lt;lannguage code&gt;_&lt;country code&gt;. properties. There will be one default properties file which will contain original strings that you have used in application. This properties files will be named as MessageBundle. properties. Let’s assume that the application was written in Portuguese and now we want to add support for English then we will have to create a MessageBundle_en_IN. properties file. You can see what the contents may look like.  ResourceBundle: This class provides functionality to read properties files. But as you can see there can be many such files. Thus, it requires Locale object and  path/to/MessageBundle  to narrow down on which file to use. In code an object will be instantiated like this: Resource messageObj = ResourceBundle( MessageBundle , localeObj); We read values from properies files using getString() function by passing key as argument as shown, String str = messageObj. getString( Norte ) where Norte is a key in properties file. Code more Talk less: Create Language. java file (only to follow SPOC and modularize the code) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859import java. util. ResourceBundle;import java. util. Locale;public class Language {  private Locale locale;  public static ResourceBundle messages;  public String lang;  public String country;  Language(){    // default lamguage is potuguese    this. lang =  pt ;    this. country =  PT ;    this. locale = new Locale(this. lang, this. country);    messages = ResourceBundle. getBundle( MessageBundle , this. locale);  }  Language(String lang, String country){    this. lang = lang;    this. country = country;    this. locale = new Locale(this. lang,this. country);    messages = ResourceBundle. getBundle( MessageBundle , this. locale);  }  public String getMessage(String key){    return messages. getString(key);  } }Create Work. java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465class Work. java{// Language class defined aboveprivate static Language langObj;public static void main(String[] args){		// user input		try{				String language = new String(args[0]);			String country = new String(args[1]);			langObj = new Language(language,country);		}		catch(Exception e){   // use default language			langObj = new Language();		}    // before when Strings were written   // String Monstro_Cachorro_Dormindo =  ha um cachorro grande dormindo ao pe de uma arvore ;    // after replacing it   String Monstro_Cachorro_Dormindo = langObj. getMessage( Monstro_Cachorro_Dormindo );    // Can also write as below, for cases where object cannot be referenced or passed.   // String Monstro_Cachorro_Dormindo = Language. messages. getString( Monstro_Cachorro_Dormindo );    System. out. println(Monstro_Cachorro_Dormindo);    } }}In above program, if no input is given then we get output in Portuguese ha um cachorro grande dormindo ao pe de uma arvore and if en IN is given as input then output is in English there is a big dog sleeping at the foot of a tree. Similarly, if we want to add support for French then we will have to create a MessageBundle_fr_FR. properties file only and pass fr FR as input for language selection and get the output in desired language without changing even a single line of code. The example code shown is very simple but works well to explain the working. Similar functionality can be achieved in any kind of application large or small. "
    }, {
    "id": 94,
    "url": "http://localhost:4000/2020-10-30-ProjectEulerProblem2",
    "title": "Solving Project Euler's Problem 2 with Python",
    "body": "2020/10/30 - Project Eulerlet us first learn what the Project Euler is: Project Euler is a website dedicated to a series of computational problems intended to be solved with computer programs. The project attracts adults and students interested in mathematics and computer programming. Since its creation in 2001 by Colin Hughes, Project Euler has gained notability and popularity worldwide. why Python?: I find Python to be very simple and its syntax is very close to english. What is the problem?: Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, … By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. How do we approach this problem?:    The first step in solving any problem, is to understand the problem first, make sure you can communicate the problem to someone else in your own way without losing the focus.     Write down the problem in pseudocode, this is more like english, so for example you might start this problem’s pseudocode like this          Create the fibonnaci sequence with terms up to but not including four million,           Check if each term is a even number,           Add all the numbers that fulfils (2) and print the sum       Create an algorithm to implement in your code: This would be a step by step process on how you intend to write the code that solves the problem. Let us write and algorithm for our problem:  Create the function for the fibonnaci series,this function returns: 12345  return 1 for the first term  return 1 for the second term  for terms after the second return their value as the sum of the two values before them   Initiate the a variable ‘sum’ to hold the summation of the even fibonnaci numbers     Initiate a varible ‘n’ to indicate the number of a corresponding term in the fibonnaci series     Check if the value of the term is less than 4000000, if true,     Check if the fibonacci term is even, if true     Add the value to the variable ‘sum’     If the number is less than four million, Increament ‘n’ and repeat steps 1 through 6 untill a term that is equal or greater than four million is reached.  Note: I don’t always go through this process religiously, so don’t worry yourself, look at the problem and do whatever works for you. Just make sure you solve the problem. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#Create the function for the fibonnaci series#Name the functiondef fibonacci(n):  #the first term of the fibonnaci series is 1  if n == 1:    return 1  #the second term of the fibonnaci series is 1  elif n == 2:    return 1  #for terms after the second their value is the sum of the two values before them  elif n &gt; 2:    return fibonacci(n-1)+ fibonacci(n-2)#initiate the sum variablesum = 0#initiate the position variable of termsn = 1#Check if the value of the term is less than 4000000while fibonacci(n) &lt;= 4000000:  #Check if the fibonacci term is even  if fibonacci(n)%2==0:    #if that is true add it to the sum    sum = sum + fibonacci(n)  #increament the position varible to move to the next term  n += 1#print the sum variale which by now contains the sum of all even fibonacci terms below 4000000print(sum)Optimization using Cache: While the code above will solve the problem, you’ll notice that your system will slow down and it might take a while before you get the solution. This is due to the fact that the fibonnaci series is a recursion problem…like a Russian doll, in which one doll (fibonnaci term) is dependent on the another term. Example: fibonnnaci(5) = fibonacci(4) + (fibonnaci 3) fibonnacci(4) = fibonnacci(3) + fibonnaci(2) fibonnaci(3) = fibonnaci(2) + fibonnaci(1) Hence; fibonnaci(5) = fibonnaci(2) + fibonnaci (2) + fibbonaci(1) + fibonnaci(2) + fibonnaci(1) You’ll notice that no matter how big the term is, you have to break it down to fibonnaci(2) and fibonnaci(1) this is recursion and this process is slow. Luckily, Pythonb has a solution that can help, which is by using memoization, so if you asked fibonnaci(5), python won’t recalculate fibonnaci(4) since it knows the value from previous calcualtions in the series. The module for this is the lru_cache. This will make the program run faster. let’s implement this: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#import lru_cache to prevent your system from slowing down due to recurssion of the fibonnaci seriesfrom functools import lru_cache#specify the maxsize of the cache@lru_cache(maxsize=1000)#Create the function for the fibonnaci series#Name the functiondef fibonacci(n):  #the first term of the fibonnaci series is 1  if n == 1:    return 1  #the second term of the fibonnaci series is 1  elif n == 2:    return 1  #for terms after the second their value is the sum of the two values before them  elif n &gt; 2:    return fibonacci(n-1)+ fibonacci(n-2)#initiate the sum variablesum = 0#initiate the position variable of termsn = 1#Check if the value of the term is less than 4000000while fibonacci(n) &lt;= 4000000:  #Check if the fibonacci term is even  if fibonacci(n)%2==0:    #if that is true add it to the sum    sum = sum + fibonacci(n)  #increament the position varible to move to the next term  n += 1#print the sum variale which by now contains the sum of all even fibonacci terms below 4000000print(sum)Conclusion:: So this was a 1-minute (maybe more) read article on using Python to solve Project Euler’s Problem 2 and I also try to show the need for optimisation by using cache. There is no one way to solve this problem, you can choose to use a diffrent approach, it depends on you.  I hope this article helps you to get started with using python to solve problems, you can try the more difficult ones, I should be adding another article on another problem soon. Thank you!! "
    }, {
    "id": 95,
    "url": "http://localhost:4000/2020-10-30-ProjectEulerProblem1",
    "title": "Solving Project Euler's Problem 1 with Python",
    "body": "2020/10/30 - Project Eulerlet us first learn what the Project Euler is: Project Euler is a website dedicated to a series of computational problems intended to be solved with computer programs. The project attracts adults and students interested in mathematics and computer programming. Since its creation in 2001 by Colin Hughes, Project Euler has gained notability and popularity worldwide. why Python?: I find Python to be very simple and its syntax is very close to english. What is the problem?: if we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000. How do we approach this problem?:    The first step in solving any problem, is to understand the problem first, make sure you can communicate the problem to someone else in your own way without losing the focus.     Write down the problem in pseudocode, this is more like english, so for example you might start this problem’s pseudocode like this          Pick all numbers that falls below 1000,           Check if the number is a multiple of 3 or 5,           Add all numbers that fulfil (2) and print the sum.       Create an algorithm to implement in your code: This would be a step by step process on how you intend to write the code that solves the problem. Let us write and algorithm for our problem:    initiate a variable ‘count’ that will hold the sum of the numbers.     Use the range function to go through all numbers below 1000(Exclusive)     Check if the number is a multiple of 3 using the ‘%’ operator and increment the variable ‘count’ if this condition is true.     Check if the number is a multiple of 5 using the ‘%’ operator and increment the variable ‘count’ if this condition is true.     print the count variable which by now contains the sum of all multiples of 3 or 5 out.  Note: I don’t always go through this process religiously, so don’t worry yourself, look at the problem and do whatever works for you. Just make sure you solve the problem. 12345678910111213141516171819202122232425#initiate the count variablecount = 0#Use the range function to go through all numbers below 1000(Exclusive)for i in range(1,1000):  #Check if the number is a multiple of 3 using the '%' operator  if i%3==0:    count += i  #Check if the number is a multiple of 5 using the '%' operator  elif i%5==0:    count += i#print the count variable which by now contains the sum of all multiples of 3 or 5 outprint (count)Conclusion:: So this was a 1-minute read article on using Python to solve Project Euler’s Problem 1. There is no one way to solve this problem, you can choose to use list comprehension and list. sum method, it depends on you.  I hope this article helps you to get started with using python to solve problems, you can try the more difficult ones, I should be adding another article on another problem soon. Thank you!! "
    }, {
    "id": 96,
    "url": "http://localhost:4000/2020-10-29-SQL-and-its-commands",
    "title": "SQL and its commands",
    "body": "2020/10/29 - SQL and its commandsLet us first learn about what is SQL SQL stands for Structured Query Language. It lets us access and manipulate databases. What Can SQL do?:    SQL can execute queries against a database     SQL can retrieve data from a database     SQL can insert records in a database     SQL can update records in a database     SQL can delete records from a database     SQL can create new databases     SQL can create new tables in a database     SQL can create stored procedures in a database     SQL can create views in a database     SQL can set permissions on tables, procedures, and views  SO, Structured Query Language(SQL) as we all know is the database language by the use of which we can perform certain operations on the existing database, and also we can use this language to create a database. SQL uses certain commands like Create, Drop, Insert, etc. to carry out the required tasks. These SQL commands are mainly categorized into five categories as:    DDL – Data Definition Language     DQL – Data Query Language     DML – Data Manipulation Language     DCL – Data Control Language     TCL – Transaction Control Language.  Now I will explain the above types of commands: DDL(Data Definition Language):: It actually consists of the SQL commands that can be used to define the database schema. It simply deals with descriptions of the database schema and is used to create and modify the structure of database objects in the database. Examples of DDL commands::  CREATE – is used to create the database or its objects (like a table, index, function, views, store procedure, and triggers). Syntax : 123456789101112131415CREATE TABLE table_name (column1 datatype,column datatype,column3 datatype, . . . . ); DROP – is used to delete objects from the database. Syntax: 123DROP TABLE table_name; ALTER-is used to alter the structure of the database. Syntax: 1234567ALTER TABLE table_nameADD column_name datatype; TRUNCATE–is used to remove all records from a table, including all spaces allocated for the records are removed. Syntax: 123TRUNCATE TABLE table_name; COMMENT –is used to add comments to the data dictionary. Syntax: 12345--Select all:(Single line comment)/*Select all the column of all the records in the Customers table:*/(multi-line comment) RENAME –is used to rename an object existing in the database. Syntax: 12345ALTER TABLE table_nameRENAME TO new_table_name;DQL (Data Query Language) :: DML statements are used for performing queries on the data within schema objects. The purpose of DQL Command is to get some schema relation based on the query passed to it. Example of DQL::  SELECT – is used to retrieve data from a database. Syntax: 1234567SELECT column1, column2, . . . FROM table_name;DML(Data Manipulation Language):: The SQL commands that deals with the manipulation of data present in the database belong to DML or Data Manipulation Language and this includes most of the SQL statements. Examples of DML::  INSERT – is used to insert data into a table. Syntax: 12345INSERT INTO table_name (column1, column2, column3, . . . )VALUES (value1, value2, value3, . . . ); UPDATE – is used to update existing data within a table. Syntax: 1234567UPDATE table_nameSET column1 = value1, column2 = value2, . . . WHERE condition; DELETE – is used to delete records from a database table. Syntax: 123DELETE FROM table_name WHERE condition;DCL(Data Control Language):: DCL includes commands such as GRANT and REVOKE which mainly deals with the rights, permissions, and other controls of the database system. Examples of DCL commands::  GRANT-gives user’s access privileges to the database. Syntax: 12345GRANT privilege_name ON object_name TO {user_name | PUBLIC | role_name}  REVOKE-withdraw user’s access privileges given by using the GRANT command. Syntax: 12345REVOKE privilege_name ON object_name FROM {User_name | PUBLIC | Role_name}TCL(transaction Control Language):: TCL commands deal with the transaction within the database. Examples of TCL commands::  COMMIT– commits a Transaction. Syntax: 123COMMIT; ROLLBACK– rollbacks a transaction in case of any error occurs. Syntax: 123ROLLBACK; SAVEPOINT–sets a savepoint within a transaction. Syntax: 123SAVEPOINT SAVEPOINT_NAME; SET TRANSACTION–specify characteristics for the transaction. Syntax: 123SET TRANSACTION [ READ-WRITE | READ ONLY ];This was just an introduction to SQL and its commands. Hope you understand what is SQL from this article. Thank You!! "
    }, {
    "id": 97,
    "url": "http://localhost:4000/2020-10-28-Datatypes_Variables_Constants_in_GO",
    "title": "Understading Datatypes, Variables Constants In GO",
    "body": "2020/10/28 - Understading Datatypes, Variables Constants In GO 1. Data Types:: Data Types represent the type of the value stored in a variable, type of the value a function returns, etc. There are three basic types in Go Language: Numeric types - Represent numeric values which includes integer, floating point, and complex values. Various numeric types are: int8 - 8 bit signed integers. int16 - 16 bit signed integers. int32 - 32 bit signed integers. int64 - 64 bit signed integers. uint8 - 8 bit unsigned integers. uint16 - 16 bit unsigned integers. uint32 - 32 bit unsigned integers. uint64 - 64 bit unsigned integers. float32 - 32 bit floating point numbers. float64 - 64 bit floating point numbers. complex64 – has float32 real and imaginary parts. complex128 - has float32 real and imaginary parts.  String types - Represents a sequence of bytes(characters). You can do various operations on strings like string concatenation, extracting substring, etc  Boolean types - Represents 2 values, either true or false.  2. Variables:: Variables point to a memory location which stores some kind of value. The type parameter(in the below syntax) represents the type of value that can be stored in the memory location. Variable can be declared using the syntax- 123var &lt;variable_name&gt; &lt;type&gt;Once You declare a variable of a type You can assign the variable to any value of that type. You can also give an initial value to a variable during the declaration itself using 123var &lt;variable_name&gt; &lt;type&gt; = &lt;value&gt;If You declare the variable with an initial value, Go an infer the type of the variable from the type of value assigned. So You can omit the type during the declaration using the syntax- 123  var &lt;variable_name&gt; = &lt;value&gt;Also, You can declare multiple variables with the syntax- 123  var &lt;variable_name1&gt;, &lt;variable_name2&gt; = &lt;value1&gt;, &lt;value2&gt;The below program in this Go tutorial has some Golang examples of variable declarations- 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package mainimport  fmt func main() {  //declaring a integer variable x  var x int  x=3 //assigning x the value 3   fmt. Println( x: , x) //prints 3    //declaring a integer variable y with value 20 in a single statement and prints it  var y int=20  fmt. Println( y: , y)    //declaring a variable z with value 50 and prints it  //Here type int is not explicitly mentioned   var z=50  fmt. Println( z: , z)    //Multiple variables are assigned in single line- i with an integer and j with a string  var i, j = 100, hello   fmt. Println( i and j: , i,j)}The output will be 123456789x: 3y: 20z: 50i and j: 100 hello Go Language also provides an easy way of declaring the variables with value by omitting the var keyword using 1&lt;variable_name&gt; := &lt;value&gt;Note: You used := instead of =. You cannot use := just to assign a value to a variable which is already declared. := is used to declare and assign value.  Create a file called assign. go with the following code- 1234567891011121314151617181920212223package mainimport ( fmt )func main() {	a := 20	fmt. Println(a)	//gives error since a is already declared	a := 30	fmt. Println(a)}Execute go run assign. go to see the result as- 123. /assign. go:7:4: no new variables on left side of :=	Note: Variables declared without an initial value will have of 0 for numeric types, false for Boolean and empty string for strings.  3. Constants:: Constant variables are those variables whose value cannot be changed once assigned. A constant in Go programming language is declared by using the keyword “const”. Create a file called constant. go and with the following code- 12345678910111213141516171819package mainimport ( fmt )func main() {	const b =10	fmt. Println(b)	b = 30	fmt. Println(b)}Execute go run constant. go to see the result as- 123Execute go run constant. go to see the result as-  That’s all for today! Happy Coding :) "
    }, {
    "id": 98,
    "url": "http://localhost:4000/2020-10-28-LesserKnownHTMLTricks",
    "title": "Lesser Known HTML5 Tricks",
    "body": "2020/10/28 - Lesser Known HTML5 Tricks: 1. Editable Content:: 123&lt;h1 contentEditable&gt;Hello World&lt;/h1&gt;This feature lets you edit the content of element inside the browser just by clicking on the content. You must try!  2. HTML anchor element trick:: 1234567891011&lt;a href=”skype:username?chat”&gt;Start chat with the username&lt;/a&gt;&lt;a href=”skype:username?call”&gt;Start call with the username&lt;/a&gt;&lt;a href=”skype:username?add”&gt;Add username&lt;/a&gt;&lt;a href=”mailto:someone@gmail. com &gt;Send email&lt;/a&gt;&lt;a href=”tel:00000000”&gt;Make a call&lt;/a&gt;Here, just know I unfolded some of the things you can do with anchor tags that you may or may not be familiar with before reading this article. Well the good news is now you know these anchor element tricks!  3. Refreshing browser after a specific time:: 123&lt;meta http-equiv=”refresh” content=”10 /&gt; Using this meta code you can refresh your webpage in the iterval of every 10 seconds. Isn’t that super cool? You can use it to make your browser refresh every 5 seconds while you do your CSS. You don’t have to refresh your browser manually to see the changes. Note: you can set content value to any value you like and it will increase or decrease the seconds based on the given value.  4. Hiding elements without the help of CSS:: 123&lt;h1 hidden&gt;Hello World&lt;/h1&gt;Oh yess! Its true you can hide html elements without the help of CSS by using ‘hidden’ attribute. Also it doesn’t work like CSS hidden and what I mean by that is when we hide any element using attribute ‘hidden’ it works more like CSS “display: none” rather than “visibility: hidden”. It takes no space while CSS “visibility: hidden” only hides the element but still take up the space.  5. HTML prefetch webpage:: 123&lt;link rel=”prefetch prerender” href=”” /&gt;We know that after landing to the homepage the user is more likely to navigate to about page then you can prefetch the CSS files that will necessary for that webpage in the background before user even clicks on the link to navigate to that page. What it does is speeds up the process and user feels little to no delay in a reloading of a webpage.  Happy Coding and Keep Reading, Cheers! "
    }, {
    "id": 99,
    "url": "http://localhost:4000/2020-10-28-common-gotchas-when-mutating-a-slice",
    "title": "Common gotchas when mutating a slice",
    "body": "2020/10/28 - Common gotchas when mutating a sliceMutating slices in Go can be a bit confusing. It’s generally known that slices are a reference an underlying array. But when it comes to mutating a slice, there are some very common gotchas that can trip you up. Let’s look at three scenarios. From inside a function: In Go, all variables are passed by value, meaning the function body will receive a copy. When you pass a slice to a function, the variable (slice descriptor), is a copy of the caller’s reference to the underlying array (by caller I mean the place where the function is being called). So if you try to append to the slice inside the function, you are actually appending to a duplicate of the original reference. The caller’s slice will remain unaffected. In the example below, we try to append a value to a slice, using the addNum function. Unfortunately, after calling addNum, the slice hasn’t changed. 12345678910111213141516171819202122232425// THIS WON'T WORKmySlice := []int{1,2,3}func addNum (s []int, num int) {	s = append(s, num)}addNum(mySlice, 4)fmt. Println(mySlice)// --&gt; [1 2 3]To successfully append to the slice, the function must return its copy of the slice. You then assign it to the original slice. 1234567891011121314151617181920212223mySlice := []int{1,2,3}func addNum (s []int, num int) []int {	return append(s, num)}mySlice = addNum(mySlice, 4)fmt. Println(mySlice)// --&gt; [1 2 3 4]From inside a for-loop: When ranging over a slice, the variable referencing each value points to a copy of the value. If you try to mutate the value at a given index with this variable, it will not work. Once you leave the scope of the for-loop, you’ll find the slice was unaffected. 123456789101112131415161718192021// THIS WON'T WORKsomePeople := []string{ Ada ,  Grace ,  Charles }for _, name := range somePeople {	name = strings. ToUpper(name)}fmt. Println(somePeople)// --&gt; [ Ada   Grace   Charles ]For the mutation to stick, you must use bracket notation instead: 12345678910111213141516171819somePeople := []string{ Ada ,  Grace ,  Charles }for i, name := range somePeople {	somePeople[i] = strings. ToUpper(name)}fmt. Println(somePeople)// --&gt; [ ADA   GRACE   CHARLES ]When using variables: This is similar to the for-loop example. Any changes to a slice require the use of bracket notation. Variables will point to copies of the value at a given index, meaning any changes to that variable will not affect the slice. 1234567891011121314151617181920212223242526272829303132333435// THIS WON'T WORKtype food struct {	name  string}pantry := []food{	{name:  banana },	{name:  satsuma },	{name:  kiwi },}toChange := pantry[2] // this makes a copy!toChange = food{name:  strawberry }fmt. Println(pantry)// --&gt; [{banana} {satsuma} {kiwi}]With bracket notation, it works. 12345678910111213141516171819202122232425262728293031type food struct {	name  string}pantry := []food{	{name:  banana },	{name:  satsuma },	{name:  kiwi },}pantry[2] = food{name:  strawberry }fmt. Println(pantry)// --&gt; [{banana} {satsuma} {strawberry}]"
    }, {
    "id": 100,
    "url": "http://localhost:4000/2020-10-28-NumPy",
    "title": "Python NumPy Array",
    "body": "2020/10/28 - NumPy in PythonLet us first learn what is NumPy: NumPy is a python library used for working with arrays. It also has functions for working in the domain of linear algebra, Fourier transform, and matrices. NumPy is an open-source project and we can use it freely. NumPy stands for Numerical Python. why should we use NumPy?: In Python, we have lists that serve the purpose of arrays, but they are slow to process. NumPy aims to provide an array object that is up to 50 times faster than traditional Python lists. The array object in NumPy is called ndarray. It provides a lot of supporting functions that make working with ndarray very easy. Where is NumPy used?: Python NumPy arrays provide tools for integrating C, C++, etc. It is also useful in linear algebra, random number capability, etc. NumPy array can also be used as an efficient multi-dimensional container for generic data. Why is NumPy Faster than lists?: NumPy arrays are stored at one continuous place in memory unlike lists, so processes can access and manipulate them very efficiently. now let us learn how to create an array using NumPy: Create a NumPy ndarray Object: NumPy is used to work with arrays. The array object in NumPy is called ndarray. We can create a NumPy ndarray object by using the array() function. 1234567891011121314151617import numpy as nparr = np. array([1, 2, 3, 4, 5])print(arr)print(type(arr))OUTPUT: [1 2 3 4 5] &lt;class ‘numpy. ndarray’&gt; Joining NumPy Arrays: Joining means putting contents of two or more arrays in a single array. In SQL we join tables based on a key, whereas in NumPy we join arrays by axes. We pass a sequence of arrays that we want to join to the concatenate() function, along with the axis. If the axis is not explicitly passed, it is taken as 0. 123456789101112131415161718192021import numpy as nparr1 = np. array([1, 2, 3])arr2 = np. array([4, 5, 6])arr = np. concatenate((arr1, arr2))print(arr)OUTPUT: [1 2 3 4 5 6] Splitting NumPy Arrays: Splitting is the reverse operation of Joining. Joining merges multiple arrays into one and Splitting breaks one array into multiple. We use array_split() for splitting arrays, we pass it the array we want to split and the number of splits. Split the array into 3 parts: 1234567891011121314151617import numpy as nparr = np. array([1, 2, 3, 4, 5, 6])newarr = np. array_split(arr, 3)print(newarr)OUTPUT: [array([1, 2]), array([3, 4]), array([5, 6])] Sorting Arrays: Sorting means putting elements in an ordered sequence. Ordered sequence is any sequence that has an order corresponding to elements, like numeric or alphabetical, ascending, or descending. The NumPy ndarray object has a function called sort(), that will sort a specified array. Sort the array: 1234567891011import numpy as nparr = np. array([3, 2, 0, 1])print(np. sort(arr))OUTPUT: [0 1 2 3] conclusion:: so this was a 1-minute read article on NumPy. Hope this article helps you to get started with NumPy. Thank you!! "
    }, {
    "id": 101,
    "url": "http://localhost:4000/2020-10-28-persistent-data-structures",
    "title": "Persistent Data Structures",
    "body": "2020/10/28 - Persistent Data StructuresPersistent data structures are data structures that preserve the previous versions of the structure on modification. They are effectively immutable, and depending on the implementation offer a special kind of memory optimization. Being immutable, the persistent data structures are useful when writing concurrent code and the need arises to use some kind of data structure like list, tree, map or other. When a persistent structure is modified, the original structure remains unchanged (it is a previous version), and the modification method returns a new structure that contains the modification. Consider the following list: 123a: 1 -&gt; 2 -&gt; 3if we add another element to it, the list itself is modified: 12345a := add(a, 4)a: 1 -&gt; 2 -&gt; 3 -&gt; 4However if we use a persistent list, then the same operation would look like this: 1234567891011121314151617a: 1 -&gt; 2 -&gt; 3b := persistent_list_add(a, 4)print(a)1 -&gt; 2 -&gt; 3print(b)1 -&gt; 2 -&gt; 3 -&gt; 4The method that adds an element to the list, actually returns a new list, containing the element we added. The original list remains unchanged. There are multiple ways that this can be achieved:  Doing copy-on-write - we copy the entire list in b then actually add the element, leaving the original list a unchanged. This however is not very memory efficient, as every modification would allocate memory for all previous elements - O(n^2) space complexity.  Using a linked list, but we only keep the pointer to the head and the tail of the list. This way we can share the unmodified elements andoptimize the memory usage. Let’s consider the second way of implementing this data structure. We want to reuse the elements from a and just add the final element. 1234567891011a: head a      tail a  \          |  +-&gt; (1) -&gt; (2) -&gt; (3)  /          \b: head b        +-&gt; (4) tail ba and b share the first 3 elements, but only b can “see” the final added element. When removing or updating an element, then we’re only copying the list up to the affected elements. Let’s say we want to update the second element. Then we have to copy the head and the second element: 12345678910111213141516171819a: head a      tail a  \          |  +-&gt; (1) -&gt; (2) -&gt; (3)  /        /  \b: head b     /   +-&gt; (4) tail b and c         /  (1) -&gt; (7) -+   |c: head cAfter changing the element 2 to 7, we have to copy all affected elements, but the rest of the list remains unchanged and shared between the previous versions. Note that all changes return new versions of the list and we cannot directly modify previous versions - a and b remain unchanged after we do set(b, 2, 7). An example of persistent list in Python: Let’s implement this kind of structure in Python. Every list would contain nodes that hold the data and point to the next node. The list itself will contain the HEAD and TAIL nodes. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255class Node:  def __init__(self, value):    self. value = value    self. next = None    def __repr__(self):    return str(self. value)class PList:  def __init__(self, head=None, tail=None):    self. head = head    self. tail = tail    def add(self, value):    '''Adds to the end of the list.     '''    node = Node(value)    if not self. head:      return PList(node, node) # Add first element in an empty list        self. tail. next = node    # Return the new list    return PList(self. head, node)    def pop(self):    '''Removes the last element from the list.     '''    if not self. head:      raise Exception('Cannot pop from empty list')        tail = self. head    while tail. next != self. tail:      tail = tail. next        return self. tail. value, PList(self. head, tail)    def update(self, index, value):    '''Updates the element at index and returns the updated list.     '''    if not self. head:      raise Exception('Empty list. ')        lst = PList()    i = 0    node = self. head    while i &lt; index and node != self. tail:      lst = lst. add(node. value)      node = node. next      i += 1        if i != index:      raise Exception('Index out of bounds')        lst = lst. add(value)    lst. tail. next = node. next        return PList(lst. head, self. tail)  def remove(self, index):    '''Removes the element at index.     '''    if not self. head:      raise Exception('Cannot remove from empty list')    if self. head == self. tail:      if index == 0:        return PList()      else:        raise Exception('Index out of bounds')    lst = PList()    node = self. head    i = 0    while i &lt; (index - 1) and node != self. tail:      lst = lst. add(node. value)      node = node. next      i += 1    if i != (index - 1):      raise Exception('Index out of bounds')    if node. next == self. tail:      # Actually pop      return self. pop()        tail = lst. tail    tail. next = node. next        return node. value, PList(lst. head, self. tail)  def iterate(self):    '''Returns an iterable (iterator) that goes through all elements of the list.     '''    if not self. head:      return []    node = self. head    while node != self. tail: # we must terminate at the tail of the list.       yield node. value      node = node. next    yield node    def __repr__(self):    if not self. head:      return '[]'    return str([v for v in self. iterate()])a = PList(). add(1). add(2). add(3)b = a. add(4)print('Lists a and b after adding element to a:')print('a:', a)print('b:', b)value, c = b. remove(2)print('\nLists after removing element from b:')print('a:', a)print('b:', b)print('c:', c, '(removed ', value, ')')print('\nLists after updating element in b:')d = b. update(1, 7)print('a:', a)print('b:', b)print('c:', c)print('d:', d)After execution, it will print: 1234567891011121314151617181920212223242526272829Lists a and b after adding element to a:a: [1, 2, 3]b: [1, 2, 3, 4]Lists after removing element from b:a: [1, 2, 3]b: [1, 2, 3, 4]c: [1, 3, 4] (removed 2 )Lists after updating element in b:a: [1, 2, 3]b: [1, 2, 3, 4]c: [1, 3, 4]d: [1, 7, 3, 4]which is exactly what we intended and wanted - every list is immutable and we can add/remove/update elements and by doing so we get new lists. "
    }, {
    "id": 102,
    "url": "http://localhost:4000/2020-10-28-LibrariesForNaturalLanguageProcessing",
    "title": "Useful Python libraries For Natural Processing",
    "body": "2020/10/28 - Useful Python libraries For Natural Processing1. CoreNLP: The CoreNLP library — a product of Stanford University — was built to be a production-ready natural language processing solution, capable of delivering NLP predictions and analyses at scale. CoreNLP is written in Java, but multiple Python packages and APIs are available for it, including a native Python NLP library called StanfordNLP. CoreNLP includes a broad range of language tools—grammar tagging, named entity recognition, parsing, sentiment analysis, and plenty more. It was designed to be human language agnostic, and currently supports Arabic, Chinese, French, German, and Spanish in addition to English (with Russian, Swedish, and Danish support available from third parties). CoreNLP also includes a web API server, a convenient way to serve predictions without too much additional work. 2. Genism: Gensim does just two things, but does them exceedingly well. Its focus is statistical semantics—analyzing documents for their structure, then scoring other documents based on their similarity. Gensim can work with very large bodies of text by streaming documents to its analysis engine and performing unsupervised learning on them incrementally. It can create multiple types of models, each suited to different scenarios: Word2Vec, Doc2Vec, FastText, and Latent Dirichlet Allocation.  3. NLTK: The Natural Language Toolkit, or NLTK for short, is among the best-known and most powerful of the Python natural language processing libraries. Many corpora (data sets) and trained models are available to use with NLTK out of the box, so you can start experimenting with NLTK right away.  As the documentation states, NLTK provides a wide variety of tools for working with text: “classification, tokenization, stemming, tagging, parsing, and semantic reasoning. ” It can also work with some third-party tools to enhance its functionality. 4. Pattern: If all you need to do is scrape a popular website and analyze what you find, reach for Pattern. This natural language processing library is far smaller and narrower than other libraries covered here, but that also means it’s focused on doing one common job really well. Pattern comes with built-ins for scraping a number of popular web services and sources (Google, Wikipedia, Twitter, Facebook, generic RSS, etc. ), all of which are available as Python modules (e. g. , from pattern. web import Twitter). You don’t have to reinvent the wheels for getting data from those sites, with all of their individual quirks. You can then perform a variety of common NLP operations on the data, such as sentiment analysis. 5. PyNLPI: PyNLPI (pronounced “pineapple”) has only a basic roster of natural language processing functions, but it has some truly useful data-conversion and data-processsing features for NLP data formats. Most of the NLP functions in PyNLPI are for basic jobs like tokenization or n-gram extraction, along with some statistical functions useful in NLP like Levenshtein distance between strings or Markov chains. Those functions are implemented in pure Python for convenience, so they’re unlikely to have production-level performance.  Thanks for reading, cheers! "
    }, {
    "id": 103,
    "url": "http://localhost:4000/2020-10-28-difference-between-java-7-and-java-8",
    "title": "Java 7 vs Java 8",
    "body": "2020/10/28 - Java 7 vs Java 8First, let us learn what is Java 7 and Java 8 and its features:: What is Java 7 and its features?: Java 7 (codename “Dolphin”) was the first major update to the Java programming language under the ownership and stewardship of Oracle since it acquired Sun Microsystems. The launch of Java SE 7 was an affirmation of Oracle’s commitment to the language and technology. It was a big achievement for the tech giant’s two-year ownership of Sun Microsystems – the company that created Java programming language. The Java 7 release was solid which offers some major upgrades including major bug fixes and improved support for non-Java dynamic languages, plus type interference support for generic class creation. Main features of Java 7 include::    Language enhancements grouped under a Project Coin     String object in a switch statement     Multiple exceptions handling to eliminate duplication of codes     Upgraded class-loader architecture     Improved type interference for generic instance     Library support for ECC (elliptic curve cryptography) algorithms     Upgraded Rowset 1. 1 and JDBC 4. 1     Improved Managed Beans     Automatic resource management in try-statement     Concurrency and collections updates     Compressed 64-bit pointers     JVM support for dynamically-typed languages  What is Java 8 and its features?: Java SE 8 (codename “Spider”) is a revolutionary release of the development platform which brings some major tweaks and upgrades to the Java programming language including an enhanced JavaScript engine, new APIs for a date, and time manipulation, improved and faster JVM, and more. Java SE 8 is a giant leap forward for the programming language which also brings the tech giant’s most anticipated upgrade – the lambda expressions. It’s a new language feature exclusively added in the Java 8 update and which is touted as one of the most significant upgrades to the programming language. The lambda expressions are by far the biggest update to the model which is likely to increase productivity in many business models. Major features of Java 8 include::    Language-level support for Lambda Expressions     Interface Default and Static Methods     Unsigned Integer Arithmetic     Concurrent API enhancements     New Date and Time API     Parallel Sorting     Null Reference Template     New JavaScript Engine, Nashorn     New and improved Stream API     Removal of permanent generation  So in short the difference between Java 7 and Java 8 is as follows::    Java SE 7 was code-named Dolphin and the code name for Java SE 8 is Spider.     Java 7 is supported on Win XP whereas Java 8 is not officially supported on Win XP.     Java 7 brings JVM support for dynamically-typed languages plus Type Interference for Generic Instance creation.  Java 8 brings the most anticipated feature for the programming language called Lambda Expressions, a new language feature that allows users to code local functions as method arguments.  Users can catch multiple exception types in one catch block which could be impossible before JDK 7. Java 8 brings its new specialized API for Date and Time manipulation. Conclusion:: Java 7 was a significant upgrade to the Java model which accommodates some major upgrades to the programming language including language enhancements, multiple exceptions handling, JVM support for dynamically-typed languages, and more. With Java 8, the programming language brings along its anticipated feature called the Lambda Expressions which changed the entire coding paradigm for the Java platform. Thank You!! "
    }, {
    "id": 104,
    "url": "http://localhost:4000/2020-10-28-Create-and-remove-dir",
    "title": "How to create and remove directory in linux.",
    "body": "2020/10/28 - The mkdir command is used to create a new directory. The command can also be used to create multiple and nested directories too. mkdir command Syntax: 123mkdir  Directory_NameExample: 123mkdir  Directory1use the ls command mentioned in 001-list-files-with-dot. md file and you will see the directory is created. shall return 123Directory1Let’s make multiple directories at once. To do so we will use the mkdir command with space after every directory name. 123mkdir  Dir1 Dir2 Dir3shall return 123Dir1 Dir2 Dir3 To create parent directories using the mkdir command and pass the -p option. By using this option you can create a nested directory. 123mkdir -p Dir_out/Dir_in/Lastshall return 1234567Dir_out└── Dir_in  └── LastThe rmdir command is used to remove a directory(it is like the delete folder option in windows) the directory deleted using the rmdir command can not be restored again. This command can not be used to remove a directory with files and sub directory inside them, To do so we use the rm command rmdir command Syntax: 123rmdir  Directory_NameExample: let’s suppose we have created three directory by using mkdir Dir1 Dir2 Dir3 now we will remove the Dir1. 123rmdir  Dir1shall return 123Dir2 Dir3 To delete a directory having more directories and files inside them we use the rm command with -r option. Let’s have two directory Dir1 and Dir_out having Dir_in, inside it. If we use the rmdir command To remove the Dir_out it will give you an error as Directory not empty. To delete it we use the rm command. rm command Syntax: 123rm -r directory_name123rm -r Dir_outshall return 123Dir1"
    }, {
    "id": 105,
    "url": "http://localhost:4000/2020-10-28-backend-fontend-with-javascript",
    "title": "Controlling backend and frontend with just one language, JavaScript",
    "body": "2020/10/28 - If you are looking for a programming language to handle the entire chain of creation of an application, both the client side (frontend) and the server side, database and other parts of the backend, javascript could be the best option. My name is Ronald, I am a FullStack developer that means I take care of both sides: the back and the front side. With JavaScript I can manage the front through native Javascript or through Frameworks such as React. js, Vue. js, or Angular. Of course you need to know HTML and CSS, two basic and easy languages ​​to learn before mastering JavaScript. On the back side I use Node. js (especially the framework: Express) to manage the server and the API’s, I also like to use MongoDB as a database since the language is also Javascript. If you need more tools such as a Docker container or a cloud deployment with AWS and monitoring on production with PM2, you would still be comfortable since the language is still similar to working with JavaScript. Another advantage of Javascript is that it is a language that is relatively easy to learn, with which you can learn to master the front and the back in a few years. Something that with other back-end languages ​​like Java would take a little longer. In conclusion, if you are looking for a programming language with which to comfortably handle the entire fabric of an application, JavaScript is surely a very good choice. :+1: "
    }, {
    "id": 106,
    "url": "http://localhost:4000/2020-10-27-memory-optimization-for-html5-games",
    "title": "Memory optimization for HTML5 games",
    "body": "2020/10/27 - Intro:: Most of the games contains game logic where you need to instantiate a lot of objects from some class like particles that have short lifetime and needs to be destroyed. Problem:: JavaScript’s model is based on garbage collection pattern. This means that the developer don’t have dirrect control over allocated memory. Memory locations (variables) marked as null will be collected by garbage collector and removed from memory. But when garbage collector needs to dispose a lot of objects, takes a lot of processing time. Neceserry spent processing time is bad for the performance of the game. In most cases the memory profile will be like this: How to fix that: Solution for this kind of problem is implementing Object pools pattern. This implementation will help with reusing disposed objects instead of creating new ones. After optimization: Example:    Import object-pool npm module by executing npm install --save object-pool     Replace old implementation  12345678910111213141516171819class GameObject {  speed = 1  run() { /* your code */ }}let gameObject = new GameObject()gameObject. run()with: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import pool from 'object-pool'class GameObject {    speed = 1  run() { /* your code */ }}const gameObjectPool = pool({  init: () =&gt; { // a factory method which should return a freshly created object.     return new GameObject()  },  initSize: 10, // a number to specify the initial size of reserved objects in the pool    disable: gameObject =&gt; {    // reset gameObject properties to default values    gameObject. speed = 1  }})let gameObject = gameObjectPool. create()gameObject. run()For more detailed documentation for the library visit the link. "
    }, {
    "id": 107,
    "url": "http://localhost:4000/2020-10-27-python-fstrings",
    "title": "f-Strings - A nice way of formatting strings",
    "body": "2020/10/27 - Formatting Strings: Creating dynamic texts is a common need in almost any programming language. Python offers a number of ways to create dynamic text and the coolest one is called f-strings The not-so-cool way: Python during its creation had influences from other languages (like C), so it inherited the parser mechanism that runs through a string looking for specific symbols (like %d, %s, %f, for integers, strings and floats respectively). Fortunately in python it is simpler, there is only one symbol for all types of variables, but even so it is not as cool as f-strings 12345678910111213name =  Lebron James age = 35height = 2. 06print( Hey people! My name is %s, I'm %s years old and I'm %s meters tall  % (name, age, height))The super cool way: Starting with python version 3. 6, f-strings were built into python. f-string comes is an abbreviation for “formateed strings literals”. Its syntax is quite simple and intuitive (and much cooler). Just put an f before the strings and identify the variables within the string body 12345678910111213name =  Lebron James age = 35height = 2. 06print(f Hey people! My name is {name}, I'm {age} years old and I'm {height} meters tall )As you can see, this way of creating dynamic strings is more readable, and such more cooler! If you are interested, try to research other details about the f-strings such as the use of arbitrary expressions, multiline expressions, the f-string performance. You will love! "
    }, {
    "id": 108,
    "url": "http://localhost:4000/2020-10-27-How_to_Install_Postgres_on_Mac",
    "title": "How to Install Postgres on Mac",
    "body": "2020/10/27 - How to Install Postgres on Mac&nbsp; For Mac, what would change is the method of installing postgres If you already have Homebrew installed, you can install postgress with the command below, if you don’t have Homebrew installed click here to install it. &nbsp; 12345$ brew update$ brew install postgresql&nbsp; Step 1: Create postgres user:: 123$ sudo -u postgres createuser --interactiveYou should see prompts as shown below: 12345Enter name of role to add: testShall the new role be a superuser? (y/n) y&nbsp; Step 2: Create database: 123$ sudo -u postgres createdb test12345$ sudo -u test psql&nbsp; Step 3: Assign password to the postgres user: 123456789$ sudo -u postgres psqlpostgres=# ALTER USER test with PASSWORD 'your-new-password';Note: Creating a new postgres user is optional, you can make do with the default postgres user if you are want. &nbsp; 12345678910111213$ sudo -u postgres createdb test // or $ createdb test$ sudo -u postgres psqlpostgres=# ALTER USER postgres with PASSWORD 'your-new-password';Then, your connection string would be postgres://postgres:your-new-password@localhost:5432/test &nbsp; Thanks for reading! "
    }, {
    "id": 109,
    "url": "http://localhost:4000/2020-10-27-Install-postgres-on-linux",
    "title": "How to install Postgres on Linux (Debian)",
    "body": "2020/10/27 - How to Install Postgres On Linux (Debian): Step-1: Install using apt. 12345$ sudo apt update$ sudo apt install postgresql postgresql-contribStep-2: Test your Installation 123sudo -u posgtres psqlYou will see: postgres=# To quit type \q Step-3: Create Postgres User 123$ sudo -u postgres createuser --interactiveYou will see: 12345Enter name of role to add: testShall the new role be a superuser? (y/n) yStep-4: Create a Database 123$ sudo -u postgres createdb testNow create the same linux user as postgres user 123$ sudo adduser testNow login to your postgres database 123$ sudo -u test psqlStep-5: Assign Password to postgres user 1234567$ sudo -u postgres psqlpostgres=# ALTER USER test with PASSWORD 'your-new-password';The connection string for the above database will be postgres://test:your-new-password@localhost:5432/test "
    }, {
    "id": 110,
    "url": "http://localhost:4000/2020-10-27-Write-file",
    "title": "First steps in writing files in python",
    "body": "2020/10/27 - Writing files in Python: Working with data, it is often useful not just to read files, but also to be able to write data to files. Here we are going to discuss a first simple approach on how to write data, that we have saved in lists to a file. Create the data: Imagine, that you have read data from a file and calculated some new stuff, that you have saved in two lists: 12345x = [1, 2, 3, 4, 5, 6, 7]y = [7, 6, 5, 4, 3, 2, 1]Now we want to write these to lists to a file, so we can forget about them for a few weeks and then use a read-function and continue working again. A file we are interested in might look something like this: 1234567891011121314151617x,y1,72,63,54,45,36,27,1Write code that creates a file: The easiest code to create and write a file looks like this: 123456789with open( testfile. dat ,  w ) as file:  file. write( x,y\n )  for i in range(len(x)):    file. write(str(x[i]) +  ,  + str(y[i]) +  \n )The first line opens a file named “testfile. dat”. The “w”-statement opens a file and overwrites content. If we swap it for “a” the new content will be appended to the file. Try that one out to see the difference! The first write statement just creates a nice heading for our file, while the rest of the file is written in a loop and adds the data. The single entries have to be given as strings, so the float (or whatever) has to be converted. If you are not sure about the different outcome of 123str(x[i])and 123 x[i] try both out so it does not go wrong in an important moment. Different to reading a file in Python it is not super easy to write a function to write data to a file that fits all needs. But try out some different options to save your data in the python-program and you will find an option that suits your needs. And the general structure usually does not change, so you will be able to go a long way with the few lines you learned here! "
    }, {
    "id": 111,
    "url": "http://localhost:4000/2020-10-27-Read-file",
    "title": "First steps in reading files in python",
    "body": "2020/10/27 - Reading files in Python: When working with data, it is usually provided as a simple text-file, a . dat-file or something similar. Reading a file so we can use the data in our program follows few, simple steps. Nevertheless a lot of things one finds online may seem really complicated, so we start with a really simple example, that can be modified easily. Writing the datafile “test. dat”: The file we are going to read should be named “test. dat” and saved in the same folder as this small program. Doing so you should be able to simply copy and paste the code snippets. The file should look like this: 123456789101112131415x,y1,12,23,34,45,56,6Writing a function read_file: As you usually do not just read one file, we are going to write a function that takes the name of the file and returns lists with the data. 123456789101112131415161718192021222324252627def get_data(name):           # first stept of writing a function  with open(name) as file:      # opens the file we want to read    data = file. read()       # reads the file  lines = data. split( \n )      # split into lines after each linebreak  del lines[0]            # the first line is  x, y   del lines[-1]            # the last line is empty  x = list()  y = list()             # create empty lists  for line in lines:    entry = line. split( , )     # split each line at the comma    x. append(float(entry[0]))    y. append(float(entry[1]))    # add data to list  return x, y             # ending of the functionThis is a big bunch of code, but there are only a few important things to notice: First of all the file is split with “\n” which corresponds to the linebreak. After that two lines are deleted. Try out what happens if you do not do that step! After that the lines are split at each “,”. If you have different things where you want to split that is no problem, for example 123entry = data. split( \t )splits the lines at a tab. The return statement ends the written function and gives us the two lists that we have created. Using the written function: Now we can use the written function to read the file that we have created in the beginning. To do so, simply add some code to your Python-file: 1234567x, y = get_data( test. dat ) # calls the function with our fileprint(x)print(y)By giving the function a filename we can now read that file and use a print-statement to check if everything worked as expected. Modify this function: If you take a close look at the function, you will notice that you can modify it for different use. By adding more lists you can work with files with more entries and as we said before, we can change the characters Python uses to split a line to many different things. "
    }, {
    "id": 112,
    "url": "http://localhost:4000/2020-10-27-Bootstrap",
    "title": "Bootstrap",
    "body": "2020/10/27 - BootstrapBootstrap was created by Twitter developers for internal use but it was laid out in open access and became a convenient set of tools for developing user interfaces of any complexity. Now, Bootstrap is an open and free HTML, CSS, and JS toolkit that is used by web developers to create responsive website designs quickly and effectively. When a Bootstrap web developer connects these files to the page, a large number of classes and ready-made components will become available for design layout. Bootstrap classes: Bootstrap classes can be divided into:    Classes for creating a grid(adaptive page layout).     Classes for styling content(text,code ,images,tables and other information) .     Service classes (for solving the most common auxiliary problems, such as alignment, display control, adding borders, etc. ).  Benefits of Bootstrap: Bootstrap is beneficial for the creation of layouts by providing a great number of templates and ready-made solutions. Other benefits are:  Cross-browser and adaptability:Sites created using Bootstrap are identically displayed on different devices and in modern browsers.  Ease of use:Working with Bootstrap is not difficult; it only requires basic skills and having some basic knowledge working with layouts.  Easy to learn:Again, it is easy to learn. A considerable number of tutorial videos will help you understand Bootstrap without any difficulties and master it. Disadvantages of Bootstrap: Bootstrap has several disadvantages as well.  TemplatesSites developed with Bootstrap are similar to each other: the same structure, navigation, buttons. Each new site is similar to the many already created ones, and this does not seem professional so trying not to use ready-made solutions will help create unique websites. That being said, it is important to understand all the tools offered by Bootstrap to maximize their use in development.  Lack of flexibilityDespite all the advantages, Bootstrap is a tool that has its limitations ( all sites on it are similar to each other). Therefore, Bootstrap may not be suitable for the implementation of some projects.  Older browsersSince Bootstrap tries to keep up with the times and is constantly updated and as a result, the sites on Bootstrap may not display correctly in older browsers. How to download bootstrap?: There are two ways to start using Bootstrap on your web site. You can:    Download Bootstrap from getbootstrap. com     Include Bootstrap from a CDN  Conclusion:: Bootstrap has finally turned out to be the trendiest front-end design framework. The main reason for its success is the huge number of resources accessible through it. It holds a very big online community and help is easily available. It is always kept updated and is presently available on GitHub for download. Thanks!! "
    }, {
    "id": 113,
    "url": "http://localhost:4000/2020-10-27-difference-between-final-finally-finalize",
    "title": "Java Final vs Finally vs Finalize",
    "body": "2020/10/27 - Java Final vs Finally vs FinalizeThis is a very common question which one might face in an interview. So today we are going to discuss the three keywords final, finally, and finalize which are frequently confused. First, let me tell you what a keyword is. A keyword is a reserved word which has a predefined meaning in the language. Because of this, you cannot use keywords as names for variables, methods, classes, or any other identifiers. There are 51 keywords in Java. So now you know what a keyword is, let us see the differences between the keywords final, finally, and finalize. Final Keyword: Final is a keyword used to apply restriction on class, method, and variable. So, a final class cannot be inherited, a final method cannot be overridden, and a final variable cannot be changed. A final variable that has no value is called blank final variable or uninitialized final variable. 123final String your_name;Below is an example of a final variable 1234567891011121314151617class FinalExample{  public static void main()  {    final int a=10;    a=5; //compile Time error  }}So what is going on? a=5 shows a compile time because once a variable is declared you cannot change its value. Also, you should know that a final variable is inherited. So, you cannot declare a constructor as final because a constructor is not inherited. Finally keyword: Finally is a block used in try-catch. Each try contains one and only one finally block. It will be executed whether an exception is handled or not. 123456789101112131415161718192021222324252627282930313233343536373839class FinallyExample{  public static void main()  {    try    {      int a=25;      System. out. println(a);    }    catch(Exception e)    {      System. out. println(e);    }    finally    {      System. out. println( finally block is always executed );    }  }}OUTPUT: 25 finally block is always executed Finalize keyword: Finalize is a method used to perform clean up processing just before the object is garbage collected. Before the object is garbage collected, the runtime system calls its finalize() method. 1234567891011121314151617181920212223242526272829303132333435public class FinalizeExample {    public static void main(String[] args)    {      FinalizeExample obj = new FinalizeExample();      obj = null;      // calling garbage collector      System. gc();      System. out. println( end of garbage collection );     }    @Override   protected void finalize()    {      System. out. println( finalize method called );    }  } OUTPUT: end of garbage collection finalize method called So, in a nutshell the differencve between final, finally, and finalize is final is a keyword, finally is a block and finalize in a method. Thanks!! "
    }, {
    "id": 114,
    "url": "http://localhost:4000/2020-10-26-git-lens",
    "title": "GitLens",
    "body": "2020/10/26 - GitLensGit is a Version Control System, and is usually used with platforms like GitHub to host git projects and make collaboration with other developers easier. Today, VS Code is one of the most popular and powerful code editors around, and has a market place for tons of extensions. One of these extensions is GitLens. It can be downloaded from the VS Code Marketplace and it works for git projects. It let’s you see who, when and why code was changed. Just move your cursor to a line of code, and GitLens will tell you know who authored that code, when, and the reason they added or altered the code right in VS Code. This is very useful if you’re working on a team. You’ll be able to see who authored every line of code. If multiple people edited the same line, GitLens will show you who those people are. You can also go back in history to see who changed the code and how the code evolved. It also lets you see commit details based on the author of the code This allows for better accountability among team members. This is the official GitLens website "
    }, {
    "id": 115,
    "url": "http://localhost:4000/2020-10-26-css-variables",
    "title": "CSS Variables",
    "body": "2020/10/26 - CSS VariablesVariables make our lives easy. For those not familiar with this word, a variable is simply a “storage container” whose value can change/vary, hence the name. In CSS, you can also use variables, or custom properties, an extremely powerful feature. But why even use variables in the first place? Well, for a very small website, it might not matter that much. But imaging you’re using, let’s say, a color more than once in your document, and you later decide to change that color. You’d have to go in every place that has that color and manually change it. This can get messy and confusing. With variables, you’d have to change the color in only one place, and it’ll be updated everywhere where that variable is used. Global Declaration: This makes the custom properties accessible throughout the document 123456789:root { --theme-color: blue; --default-font-size: 1rem;}You can also define them within a ruleset, like this: 1234567. article {  --font-size: 2rem;}Usage: 1234567891011121314151617181920212223body {  font-size: var(--default-font-size);}button {  background-color: var(--theme-color);}. navbar {   font-size: var(--default-font-size);}More on this topic here "
    }, {
    "id": 116,
    "url": "http://localhost:4000/2020-10-26-css-image-display-fix",
    "title": "FIx for properly displaying images",
    "body": "2020/10/26 - CSS Image DIsplay FixYou might or might not have noticed this, but when you inspect images on a webpage using your Dev Tools, there’s a small line underneath them, unless this was “fixed” by the developer. This is not really a bug. It happens because images are inline elements, and once you look at the image below, you’ll begin getting the sense.  The green line is the baseline, an invisble line on which elements “sit”. As you can see, some characters in the word paragraph go beyond this line, creating the red line you’re seeing. And since images are inline elements, they “sit” on the baseline relative to elements before or after them, leaving a whitespace between their base and the space created by characters going beyond the baseline. To avoid this, just give the images a display: 'block'; 1234567img {  display: block;}There, done! Now all images on your page won’t have that annoying whitespace as they will fill it up. "
    }, {
    "id": 117,
    "url": "http://localhost:4000/2020-10-26-sort-trick",
    "title": "JavaScript sort trick",
    "body": "2020/10/26 - Sorting strings in JavaScriptThe JavaScript sort method is very useful when we want to sort numbers, or even strings. But when sorting strings, we ought to be careful because the strings might be in different languages. Luckily, there’s a fix for that. It’s called localeCompare: referenceString. localeCompare(compareString) The referenceString is the string we want to compare, and the compareString is the string against which we’re compareing. The localeCompare method returns a Number, which may be:    -1 if the referenceString is sorted before the compareString    0 if the two strings are equal    1 if the referenceString is sorted after the compareString Here’s an example: 1234567891011const words = ['hello', 'répondre', 'sort', 'déclaré'];words. sort((a, b) =&gt; a. localeCompare(b)); As we can see, some words have certain punctuations. Using localeCompre with sort helps us sort the English and French words in our array successfully. More documentaion can be found here "
    }, {
    "id": 118,
    "url": "http://localhost:4000/2020-10-26-css-responsive-fonts",
    "title": "CSS Responsive Fonts",
    "body": "2020/10/26 - CSS Responsive FontsMaking sure your fonts adapt to different screen layouts is very important. To help us with this, we often use rem units, which are fluid. REM stands for root em. 1rem = the root font size, i. e. the default font size of the browser, or the one the user sets. On most browsers, the default font size is 16px, so 1rem would equal 16px. You can manually set the root font size like this: 1234567html {  font-size: 10px; /* You can put your desired default font size */}Therefore, rem all font sizes will refer to the 10px. So 123456789101112131415p {  font-size: 1rem; /* 1rem = 1 x 10px = 10px*/}h1 {  font-size: 2rem; /* 2rem = 2 x 10px = 20px */}Doing this makes the fonts respond to whatever font size is the default or is set by the use. It is much better the using non-fluid units like PXs. You can read more about CSS units on the Mozilla Documentaion Page "
    }, {
    "id": 119,
    "url": "http://localhost:4000/2020-10-25-java-interface-java-8",
    "title": "Changes behavior interface - Java 8",
    "body": "2020/10/25 - What is interface in JavaAnother way to achieve abstraction In Java. An interface is like a “abstract class” that used is used to group related methods. However, an interface have some features that distinct an abstract class:    An concrete class can implement one or more interfaces     An interface can extend one or more interfaces  123456789101112131415161718192021public class Test implements Interface1,Interface2,Interface3 {  //methods. . . }public interface Interface extends Comparator&lt;T&gt;, Runnable {}If you try extends interface in concrete class, you will have a java compiler error. The same will pass, whether try implements interface using another interface. These examples will be compiler error: 123456789101112131415161718192021public interface Test implements Interface1,Interface2,Interface3 {  //methods. . . }public class Interface extends Comparator&lt;T&gt;, Runnable {}What changeWith Java 8, the interface can have concrete methods and static methods. Before this version, the interface could not have concrete methods or static methods. For create a concrate method in interface, the method must be the keyword default in the signature. Example: 12345678910111213141516171819public default void test(){ //code}public static void staticMethod(){ //code}With this, it is possible add to interface some methods without broken classes that implement it(maintaining compatibility). For example, before java 8 the interface List does not have the method “sort”. If the java programmers wanted to add behavior in the java. util. List without change your subtypes (Vector, ArrayList and others), will be not possible. If they add the behavior, your subtypes will be obligated to change your code to compile and maintain compability. To make the behavior transparent to your subtypes, now they can use the default method to add some features without obligated your subtypes change code. Inherits Behavior: Imagine you have two interfaces with the same default method. What happens with subtype implements the two interfaces? The subtype will be obligated override the method. If no, will have a compiler error. 12345678910111213141516171819202122232425262728293031323334353637383940414243public interface Test1 {	public default void test() {		System. out. println( Test 1 method );	}}public interface Test2 {	public default void test() {		System. out. println( Test 2 method );	}}public class Test implements Test1, Test2 {// Java compiler error}If the interface have static methods, you must use the interfacename. staticmethodname. When we extend the class with static method, you can use the subclass to call the static method. However, if the interface it is not possible. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263public class Parentclass {	public static void testeMethodParent() {	}}public interface Test1 {	public default void test() {		System. out. println( Test 1 method );	}	public static void teste() {	}}public class Test extends Parentclass implements Test1 {	public static void main(String[] args) {		Test. testeMethodParent(); // OK		Test1. testeStaticMethodInterface(); // OK		Test. testeStaticMethodInterface(); // ERROR	}}"
    }, {
    "id": 120,
    "url": "http://localhost:4000/2020-10-25-Using-Matplotlib",
    "title": "How to make an easy plot with matplotlib",
    "body": "2020/10/25 - What is matplotlib?: Matplotlib is a package that can be used to create plots or different form of visualization of data. Creating a simple 2d-Plot: As a firs step the package needs to be imported with: 123from matplotlib import pyplot as pltNow we create the data we want to plot, so for example: 12345x = [1, 2, 3, 4, 5, 6]y = [1, 0, 3. 5, 3, 2, 1]To plot this data we need a simple command: 12345plt. scatter(x, y, marker = 'x', color='red')plt. show()The scatter-function gives a simple representation of the datapoints and the show-command is needed to actually see the plot. To create a scientifically acceptable result some improvement has to be done: 123456789101112131415plt. title('Testplot') #Adds a title above the plotplt. xlabel('x') #Add labels to the axisplt. ylabel('y')plt. grid(linestyle='dotted') #Add a major gridplt. errorbar(x, y, xerr=0. 1, yerr=0. 1, marker='x', linewidth=0, elinewidth=1)plt. show()plt. savefig('testplot. pdf') #Save the plot as a PDFA difference one should note, is that in this case we have used the errorbar-function. Both, to plot and to add errorbars. Because of this the linewidth had to be set to zero otherwise the points would have a connection line. To still have errorbars the elinewidth hat to be set to something greater zero, otherwise they would just disappear. With just slight changes a lot of plots can be done using python! "
    }, {
    "id": 121,
    "url": "http://localhost:4000/2020-10-24-difference-between-@Controller-and-@RestController-in-spring-boot",
    "title": "Controller vs RestController in Spring Boot",
    "body": "2020/10/24 - @Controller vs @RestControllerThe @RestController annotation in Spring MVC is a combination of @Controller and @ResponseBody annotation. It was added into Spring 4. 0 to make the development of RESTful Web Services in Spring framework easier. If you are familiar with Rest web services you know that the main difference between a web application and REST API is that the response from a web application is view in HTML + CSS + JavaScript (client/human view), While REST API returns data in form of JSON or XML(most of the REST clients are programs) From there we can see the difference between @Controller and @RestController @Controller creates a map of the model object and finds a view. @RestController returns the object and object data written onto HTTP response as JSON or XML. The traditional way is to use @Controller and use @ResponseBody annotation but since this is the default behavior of RESTful Web services, Spring introduced @RestController which combined the behavior of @Controller and @ResponseBody together. Here is an example of a code snippets with the same functionality: 123456789101112131415161718192021222324252627@Controller@RequestBodypublic class MvcController {  . . your logic}@RestControllerpublic class RestFullController {  . . . . your logic}The @Controller annotation indicates that the class is a “Controller” like a web controller while @RestController annotation indicates that the class is a controller where @RequestMapping methods assume @ResponseBody semantics by default i. e. servicing REST API. The @Controller is a specialization of @Component annotation while @RestController is a specialization of @Controller annotation. It is actually a convenience controller annotated with @Controller and @ResponseBody. "
    }, {
    "id": 122,
    "url": "http://localhost:4000/2020-10-23-Using-Random",
    "title": "How to make a virtual die roller",
    "body": "2020/10/24 - What is random?: Random is a python package that comes pre-installed when you install Python. It is a way to generate pseudo-random numbers that can be used in many different ways. Making our virtual die: First off, we need to import the package like so: 123import randomSince a normal die has six sides we want to pick a random number 1-6. We can do that like so: 1234567import randomresult = random. randint(1, 6)random. randint(1,6) chooses 1-6 at random and stores it in our variable I called result. Now we want to print our result to the console. We can do that by typing this: 123456789101112131415import randomresult = random. randint(1, 6)print(f'You rolled a {result}!')input( Press enter to continue. . .  )I now have added a way to print our result and I put the variable in an f-string so that I can add my value inside the string. I also added an input to prevent the console from closing immediately after running and a way to exit the program. Thats it! You now have a virtual die! "
    }, {
    "id": 123,
    "url": "http://localhost:4000/2020-10-22-java-collections-hierarchy",
    "title": "Java Collection Hierarchy",
    "body": "2020/10/22 - Java Collection HierarchyJava Collection Framework was introduced in Java 1. 2 version. Collections are containers that group multiple items in a single unit. Collection is an object that represents a group of objects. Collections are dynamic containers that allow you to add or remove items at runtime. It provides an architecture to store and manipulate groups of objects. It allows you to search, sort and manipulate data. It provides interfaces and classes in order to store the data in different data structures. Java Collections hierarchy is a set of API`s, linked between them in parent - child relation.  This is a diagram that shows the hierarchy from the root interface: The Collection Interface(java. util. Collection).  From the diagram of the Collection interface we can see three main data structures in List, Queue and Set. All of these data structures are manipulating only with values(the iterator uses index to check or add or retrieve element). The methods that contain the algorithms that perform the computations(sorting, searching, etc…) are polymorphic. One method can be used on many implementations of the right collection Interface. Methods(algorithms) are reusable. This means that we get to work with super arrays. "
    }, {
    "id": 124,
    "url": "http://localhost:4000/2020-10-19-array-splice-method",
    "title": "JavaScript Array.splice() Method",
    "body": "2020/10/19 - JavaScript Array splice() method. : This method removes or replaces existing elements in the array. It gets the starting index, count(number of items to remove or replace) and optionally what to replace with. It returns the new array (removed items). This method modifies the original array. In case you want to add more elements to the array without removing any, you can provide the count parameter with a value of 0. NB: Not the best way to add items to an array. "
    }, {
    "id": 125,
    "url": "http://localhost:4000/2020-10-19-array-methods-in-javascript",
    "title": "Array methods in JavaScript",
    "body": "2020/10/19 - Arrays An array is a special variable, which can hold more than one value at a time. Syntax to create an Array . 1234567  var array_name = [item1, item2, . . . ];  var cars = [ Audi ,  Volvo ,  BMW ];  console. log(cars); // Result : [ Audi , Volvo , BMW ]   toString() method   To convert Array to String.   123456789  var cars = [ Audi ,  Volvo ,  BMW ]; console. log(cars. toString()); // Result : Audi, Volvo, BMW      push() and pop() method   The push() method adds a new element to an array.   1234567891011 var cars = [ Audi ,  Volvo ,  BMW ];cars. pop());console. log(cars);// Result : [ Audi ,  Volvo ,  Merc ,  Merc ]    The pop() method removes the last element from an array,   1234567var cars = [ Audi ,  Volvo ,  BMW ];console. log(cars. pop()); // Result : BMW      shift() method and unshift() method   The shift() method removes the first array element and “shifts” all other elements to a lower index   123456789 var cars = [ Audi ,  Volvo ,  BMW ];console. log(cars. shift())// Result : Audi    The unshift() method adds a new element to an array (at the beginning)   1234567891011 var cars = [ Audi ,  Volvo ,  BMW ];cars. unshift( Jaguar );console. log(cars); // Result : [ Jaguar ,  Audi ,  Volvo ,  BMW ]      splice() method   The splice() method can be used to add new items to an array   1234567891011 var cars = [ Audi ,  Volvo ,  BMW ];cars. splice(2,0, Jaguar , Accent );console. log(cars);// Result : [ Audi ,  Volvo ,  Jaguar ,  Accent ,  BMW ]    The first parameter (2) defines the position where new elements should be added   The rest of the parameters (“Volvo” , “Accent”) define the new elements to be added.     concat() method   The concat() method creates a new array by merging (concatenating) existing arrays   12345678910111213 var cars = [ Audi ,  Volvo ,  BMW ];var bikes =[ Yamaha ,  KTM ]var vehicles = cars. concat(bikes);console. log(vehicles);// Result : [ Audi ,  Volvo ,  BMW ,  Yamaha ,  KTM ]      slice() method   The slice() method slices out a piece of an array into a new array. it takes two args slice(start , upto)   1234567var vehicles = [ Audi ,  Volvo ,  BMW ,  Yamaha ,  KTM ]var onlyBikes = vehicles. slice(3)console. log(onlyBikes) // Result : [ Yamaha ,  KTM ]   "
    }, {
    "id": 126,
    "url": "http://localhost:4000/2020-10-18-Features-of-Python",
    "title": "Introduction to Python and its features",
    "body": "2020/10/18 - Definition: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics. Its high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for Rapid Application Development, as well as for use as a scripting or glue language to connect existing components together. Beginner’s Guide to Python can be found here Python is one of the languages that is witnessing incredible growth and popularity year by year. In 2017, Stackoverflow calculated that python would beat all other programming languages by 2020 as it has become the fastest-growing programming language in the world. Why is Python so Popular?:  Easy to Learn and Use Python language is incredibly easy to use and learn for new beginners and newcomers. The python language is one of the most accessible programming languages available becauseit has simplified syntax and not complicated, which gives more emphasis on natural language. Due to its ease of learning and usage, python codes can be easily written and executed much faster than other programming languages.  Python Has Amazing Libraries When you’re working on bigger projects, libraries can really help you save time and cut down on the initial development cycle. Python has an excellent selection of libraries,from NumPy and SciPy for scientific computing to Django for web development. There are even a few libraries with a more specific focus, like scikit-learn for machine learning applications and nltk for natural language processing.  Python Has Big Data The use of big data and cloud computing solutions in the enterprise world has also helped skyrocket Python to success. It is one of the most popular languages used in datascience, second only to R. It’s also being used for machine learning and AI systems and various modern technologies.  First-choice Language Python language is the first choice for many programmers and students due to the main reason for python being in high demand in the development market. Students and developersalways look forward to learning a language that is in high demand. Python is undoubtedly the hottest cake in the market now.  The Flexibility of Python Language The python language is so flexible that it gives the developer the chance to try something new. The person who is an expert in python language is not just limited to buildsimilar kinds of things but can also go on to try to make something different than before.  Python Has Some Great Corporate Sponsors Google adopted python language way back in 2006 and have used it for many applications and platforms since then. Lots of Institutional effort and money have been devoted tothe training and success of the python language by Google. They have even created a dedicated portal only for python. "
    }, {
    "id": 127,
    "url": "http://localhost:4000/2020-10-17-set-interface-in-java",
    "title": "Set interface in Java",
    "body": "2020/10/17 - Set InterfaceThe Set Interface java. util. Set represents an unordered list of elements(objects). Set Interface can store only unique values, that means that you can not have duplicates in Set. Set interface is implemented by the classes HashSet, LinkedHashSet, TreeSet(this class implements the SortedSet Interface). Set has many methods to add, remove and manipulate data. HashSet: HashSet class stores elements in a hash table, and it is best performing implementation of the Set. It does not guarantee the order in which elements are inserted. HashSet allows null values but can not contain duplicate values. Internally uses a HashMap to store the elements. Example: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061import java. util. HashSet;import java. util. Set;public class HashSetExample{ public static void main(String [] args){     //Creating a HashSet   Set &lt;String&gt; names = new HashSet&lt;String&gt;();   //Adding new elements to the HashSet   names. add(“Mike”);    names. add(“Bob”);   names. add(“Maria”);   names. add(“Karen”);   names. add(“Mike”);   System. out. println(names);   //Removing an element of the HashSet   boolean isRemoved = names. remove(“Bob”);   System. out. println(names);   //Iterating over a HashSet   for(String name: names){   System. out. println(name);   } }} Output: [Maria, Karen, Mike, Bob] [Karen, Maria, Mike] [Mike, Karen, Maria] LinkedHashSet: LinkedHashSet class is an ordered version of HashSet. It is the implementation of LinkedList in the Set Interface. Internally it uses a hash table with linked lists running through it to store the elements. It keeps the insertion order. Example: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061import java. util. LinkedHashSet;import java. util. Set;public class LinkedHashSetExample{ public static void main(String [] args){     //Creating a HashSet   Set &lt;String&gt; names = new LinkedHashSet&lt;String&gt;();   //Adding new elements to the HashSet   names. add(“Mike”);    names. add(“Bob”);   names. add(“Maria”);   names. add(“Karen”);   names. add(“Mike”);   System. out. println(names);   //Removing an element of the HashSet   boolean isRemoved = names. remove(“Bob”);   System. out. println(names);   //Iterating over a HashSet   for(String name: names){   System. out. println(name);   } }} Output: [Mike, Bob, Maria, Karen] [Mike, Maria, Karen] [Mike, Maria, Karen] TreeSet: TreeSet class implements the Navigable Interface which implements the SortedSet Interface. SortedSet gives functionalities to keep the elements sorted and Navigable gives functionalities to navigate through the TreeSet. Internally it uses a TreeMap to store the elements. TreeSet stores the elements by their natural order(alphabetical or numerical) or based on a custom Comparator that is supplied at the time a TreeSet is created. . You can not have duplicates and null values in TreeSet. It is very useful for storing large amounts of sorted data because it accesses and can retrieve data very fast. Example: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import java. util. SortedSet;import java. util. TreeSet;public class TreeSetExample{ public static void main(String [] args){   //Creating a TreeSet   SortedSet&lt;String&gt; fruits = new TreeSet&lt;String&gt;();   //Adding elements to a TreeSet   fruits. add(“Peach”);   fruits. add(“Apple”);   fruits. add(“Pear”);   fruits. add(“Banana”);   System. out. println(fruits);     //This will add element because it is lower case   fruits. add(“apple”);   System. out. println(fruits);    }}Output: [Apple, Banana, Peach, Pear] [Apple, Banana, Peach, Pear, apple] TreeSet with a custom comparator:: 123456789101112131415161718192021222324252627282930313233343536373839404142434445import java. util. SortedSet;import java. util. TreeSet;public class TreeSetExample{ public static void main(String [] args){ //Creating a TreeSet using a Comparator  SortedSet&lt;String&gt; fruits = new TreeSet&lt;String&gt;(String. CASE_INSESITIVE_ORDER);   //Adding elements to a TreeSet   fruits. add(“Peach”);   fruits. add(“Apple”);   fruits. add(“Pear”);   fruits. add(“Banana”);   //Lower case will be duplicates now   fruits. add(“apple”);   System. out. println(fruits);  }}Output: [Apple, Banana, Peach, Pear] "
    }, {
    "id": 128,
    "url": "http://localhost:4000/2020-10-17-what-is-javascript",
    "title": "A brief introduction to what is JavaScript and why it is popular",
    "body": "2020/10/17 - Definition: A direct quote from the Mozilla developer’s network or MDN  JavaScript is a scripting or programming language that allows you to implement complex features on web pages — every time a web page does more than just sit there and display static information for you to look at — displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, etc. — you can bet that JavaScript is probably involved. In short, it makes your pages feel more dynamic. A webpage generally speaking consists of three key elements:    HTML (Hypertext Markup Language): This allows you to create the structure of the web page     CSS (Cascading stylesheet): This is to make that web page look pretty 😊     JavaScript: Allows you to do anything dynamic with the page including fetching data from a server or making the page interactive  History: JavaScript was not always known as JavaScript. It started with the name LiveScript. At the time of creation of JavaScript, Java was a common language, and it was decided to add the word Java to it. It does not have any relationship with Java, in any case. There is a famous/corny saying  Java is to JavaScript as a car is to carpet As it evolved, it got to be known as ECMAScript. The name JavaScript is a trademark owned by Oracle Corp. in the United States. Don’t believe me? Check it out Why is JavaScript popular?: When I say JavaScript is popular, I mean it. According to the Stack Overflow 2019 developer’s survey, it is the most popular language. For 7 years in a row! So what makes it so famous?    It works well with the other two components of a webpage (HTML and CSS)     Minimal learning curve (which has been considered a good or bad for the language)     Supported by all major browsers and enabled by default     Works without any compilation or transpiling     It can run in the browser or server-side. It can run on anything that can support the JavaScript engine (V8, Trident, SpiderMonkey)  Hopefully, by now, I have sold you on the idea of JavaScript and why it is fun to work with. In the next few blog posts, we will go over the basics of running JavaScript and introduction to principles of JavaScript. As we take a deeper dive into these basics, you will also realize that it’s relatively easy to make mistakes if you don’t know what you are doing. We will learn from the mistakes of the past and try to be a better JavaScript developer. "
    }, {
    "id": 129,
    "url": "http://localhost:4000/2020-10-17-types-in-javascript",
    "title": "Variable types in JavaScript",
    "body": "2020/10/17 - Anytime that you have a value that could be saved in a variable or passed to a function, they can be defined as one of the 7 types in JavaScript. The different types are:    String (usually for text).   1234567`Mary` is a string surrounded by backticks'John' is a string surrounded by single quotes Parwinder  is a string surrounded by double quotes    All three examples provided above are valid strings. The advantage of using backticks is that it allows you to do multi-line strings. For example,   123456789`This is anexample ofa multiline string`    Another cool thing about backticks is that it allows you to evaluate expressions in them. This allows you to concatenate dynamic values to strings without using the concatenate operator (+);   12345const name =  Parwinder ;console. log(`Hello my name is ${name}`); // Hello my name is Parwinder      Number (for numbers with or without decimals). E. g. 72, or 2. 34 are of number type.   Numbers are not quoted (either by single or double quotes or backticks). JavaScript provides many helper methods to work with number. They are part of Math   1234567891011Math. round(20. 5) =&gt; 21Math. round(20. 1) =&gt; 20Math. floor(20. 7) =&gt; 20Math. ceil(20. 1) =&gt; 21Math. random =&gt; 0. 454646447863 // A random number between 0 and 1    One of the common questions that many interviewers seem to ask about number addition in JavaScript is   123console. log(0. 1 + 0. 2) // 0. 30000000000000004    Yep. It is 0. 30000000000000004 instead of simply being 0. 3. This is because your browser is doing floating point math. To read up more about it go to this link   Also, NaN is a special type of number that stands for not a number. This happens when you do an operation like dividing a number by string.     Boolean is used to represent true or false   The presence of something is true, and the absence is false. It is usually calculated if we are making some comparison. For example, isAge &gt; 19 yields true or false, depending on age.   While we are talking about comparison and boolean. Here is a quick intro to == and ===   12345console. log(10 ==  10 ); // trueconsole. log(10 ===  10 ) // false    == only checks for quality of value where as === checks for equality of value and data type     Null   There are two ways of expressing “nothing” in JS, null and undefined. Null is when we have a property, and we have assigned it a value of null—explicitly stating the value of the property to be nothing.   12345let dog = null;console. log(dog); // null    Fun fact: null has a type of object in JavaScript.     Undefined   In the same spirit of expressing nothing in JS, for JavaScript, when you declare a property but do not assign it any value, it results in undefined.   12345let dog;console. log(dog); // undefined      Symbol is a new addition to JS and it is used to obtain a unique identifier. The Symbol() function returns a value of type symbol. Every symbol value returned from Symbol() is unique. A symbol value is generally used as an identifier for object properties     Object: Objects in JS are special. Everything in JS is an object. It is used to express a collection of data.   123456789101112131415161718192021const person = {  first:  Parwinder ,  last:  Bhagat ,  age: 33}console. log(person. first); // Parwinderconsole. log(person. first); // Bhagatconsole. log(person. first); // 33console. log(person. income); // undefined   "
    }, {
    "id": 130,
    "url": "http://localhost:4000/2020-10-17-List-Interface-in-Java",
    "title": "List interface in Java",
    "body": "2020/10/17 - List InterfaceThe List Interface java. util. List represents an ordered list of elements(objects). The elements in the list can be inserted, accessed, iterated and removed by their index (by order in which they appear in the List). Each element has an index. The first element in the list has an index of 0, and the index increments with adding of elements. The list can have duplicate elements. ArrayList, LinkedList and Vector are the three classes that implement the List Interface. ArrayList: ArrayList is the simplest and most often used member of Java Collections Framework. Contrary to Arrays that are fixed, ArrayList can increment and decrement its size when new elements are added or removed. It is a dynamic Array. It allows null values and duplicates. You can retrieve elements by their index that are ordered by their insertion. The ArrayList always manage arrays internally Example: [0] [1] [2] [3] [4]…. . You must use boxed types Integer, Character, etc when creating an ArrayList instead of primitives: int, char, etc…. Creating an ArrayList example: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283import java. util. ArrayList;import java. util. List;  public class ArrayListExample{ Public static void main(String [] args){     // Creating an ArrayList of Strings   List&lt;String&gt; pets = new ArrayList&lt;String&gt;();  // Adding elements to the list  pets. add( dog );  pets. add( cat );  pets. add( fish );  System. out. println(pets);  pets. add(1, “turtle”);  System. out. println(pets);  //Retrieve element at a given index  String myPet = pets. get(0);     System. out. println(“My pet is a ” + myPet + “. ”);  //Remove element at a given index   pets. remove(3);     System. out. println(pets);  //Iterating over an ArrayList   for(String allPets : pets){    System. out. println(allPets)   }  }}Output: [dog, cat, fish] [dog, turtle, cat, fish] My pet is a dog. [dog, turtle, cat] [dog, turtle, cat] These are the basic and most used methods for adding, removing and retrieving elements in an ArrayList. You can check if the List is empty with isEmpty(); method, the size of the list size(); remove an object remove (Object obj); Get the first or last element getFirst(); getLast(); Check if the list contains some element contains(); and many more methods. LinkedList: LinkedList implements the List interface same as the ArrayList and they are very similar to use. The difference between them is the way they store the elements and the way they link to the elements. LinkedList stores the elements in a double links list. Every element is pointing to the next and the previous element. Example: [0] =&gt; [1] =&gt; [2] =&gt; [3] =&gt; [4] 1      [0] &lt;= [1] &lt;= [2] &lt;= [3] &lt;= [4]LinkedList has a better performance on add() and remove() than ArrayList because there is no shifting of the elements but is slower on get() and set() methods. LinkedList maintains insertion order, and can have null and duplicate values. LinkedList Implements the List Interface, but also implements the Queue Interface, that adds additional methods such as offer(), poll(), peek(), Creating a LinkedList example: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485import java. util. LinkedList;import java. util. ArrayList;import java. util. List;  public class LinkedListExample{ Public static void main(String [] args){     // Creating a LinkedList of Strings   List&lt;String&gt; pets = new LinkedList&lt;String&gt;();  // Adding elements to the list   pets. add( dog );  pets. add( cat );  pets. add( fish );  System. out. println(pets);  pets. add(1, “turtle”);  System. out. println(pets);  //Retrieve element at a given index  String myPet = pets. get(0);     System. out. println(“My pet is a ” + myPet + “. ”);  //Remove element at a given index   pets. remove(3);     System. out. println(pets);  //Iterating over an LinkedList   for(String allPets : pets){    System. out. println(allPets)   }  }}Output: [dog, cat, fish] [dog, turtle, cat, fish] My pet is a dog. [dog, turtle, cat] [dog, turtle, cat] Vector: Vector is almost identical to an ArrayList, they are similar to use.  The difference is that ArrayList is not synchronized and the Vector is synchronized. The ArrayList increases its capacity by 50% and Vector increases its capacity by 100% if their number of elements exceeds its capacity. Vector is slow because it is synchronized. ArrayList is more commonly used over Vector because you can synchronize it by yourelves. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667mport java. util. *;public class VectorExample {  public static void main(String args[]) {   /* Vector of initial capacity(size) of 2 */   Vector&lt;String&gt; vec = new Vector&lt;String&gt;(2);   /* Adding elements to a vector*/   vec. addElement( Apple );   vec. addElement( Orange );   vec. addElement( Mango );   vec. addElement( Fig );   /* check size and capacityIncrement*/   System. out. println( Size is:  +vec. size());   System. out. println( Default capacity increment is:  +vec. capacity());   vec. addElement( fruit1 );   vec. addElement( fruit2 );   vec. addElement( fruit3 );   /*size and capacityIncrement after two insertions*/   System. out. println( Size after addition:  +vec. size());   System. out. println( Capacity after increment is:  +vec. capacity());   /*Display Vector elements*/   Enumeration en = vec. elements();   System. out. println( \nElements are: );   while(en. hasMoreElements())     System. out. print(en. nextElement() +    );  }}Output: Size is: 4 Default capacity increment is: 4 Size after addition: 7 Capacity after increment is: 8 Elements are: Apple Orange Mango Fig fruit1 fruit2 fruit3 "
    }, {
    "id": 131,
    "url": "http://localhost:4000/2020-10-13-kubernetes-job-logs",
    "title": "Show Kubernetes Job Logs",
    "body": "2020/10/13 - Get Kubernetes Job LogsWhen using Kubernetes, often you need to read logs from the running pods. On a bigger cluster you may have many pods that are running and many that have either completed or errored out. When deploying Kubernetes Jobs, often you want to read the logs of the job, whether it completed or has any errors. Finding the correct pod amongst many pods may be a bit of a challenge. In this post you’ll learn how to list the correct job pods - all of them, and how to retrieve the job logs - from the current completed pod and from a pods that exited with error. Given you already have a Kubernetes cluster, and the job was deployed in a namespace, this is what you want to do. List the job pods: Let’s say we have a job like this: 1234567891011121314151617181920212223242526272829apiVersion: batch/v1kind: Jobmetadata: name: calculate-fibonacci namespace: examplespec: template:  spec:   containers:   - name: fibonacci    image: node:16-alpine    command: ['node', '-e', 'function f(x){ if(x === 1 || x === 2) return 1; return f(x-1)+f(x-2);} console. log( The 10th fibonacci number is:  , f(10));']   restartPolicy: Never backoffLimit: 4The Job definition:    The name of the job is calculate-fibonacci     The job is in namespace called example  To list the pods associated with this job, do: 123kubectl -n example get pods -l job-name=calculate-fibonacci   -n example - this tells kubectl to work in the example namespace     get pods will give us the list of pods in the namespace     -l job-name=calculate-fibonacci this refines the list of pods that have a label job-name with the name of our job: calculate-fibonacci  This will produce the following output: 12345NAME              READY  STATUS   RESTARTS  AGEcalculate-fibonacci--1-pdzg4  0/1   Completed  0     3sGet the job logs: Once we know the pods associated with a job, we can view the logs the same way we view the logs for any pod: kubectl logs &lt;the id of the pod&gt;: 123kubectl -n example logs calculate-fibonacci--1-pdzg4It will give us the logs for the job: 123The 10th fibonacci number is: 55If the job is still running and we want to follow the logs as they are printed out, just add -f (follow) to the command: 123kubectl -n example logs -f calculate-fibonacci--1-pdzg4One-liner for viewing the logs of a completed job: Now we can combine the both commands into a single one, to view the logs for a completed job: 123kubectl -n example logs $(kubectl -n example get pods -l job-name=calculate-fibonacci --field-selector='status. phase=Succeeded' --no-headers -o custom-columns=':metadata. name')It will give us the logs of the completed pod directly: 123The 10th fibonacci number is: 55Notice that we added a couple of things in the command that selects the pod:    --field-selector='status. phase=Succeeded' - we want to find the pod that has Succeeded status (everything went OK)     --no-headers - we don’t want any headers in the output, as we only want the pod id     custom-columns=':metadata. name' - show just the metadata. name of the pod (the id)  "
    }, {
    "id": 132,
    "url": "http://localhost:4000/2020-07-15-delete-element-from-slice",
    "title": "Howto propoerly delete an element from a slice in Go",
    "body": "2020/07/15 - Properly delete an element from a slice in GoArrays and slices in Go are a bit different from analogous structrures in other languages (like list in Python). An arrays is contigious container that holds the values, while the slice just holds pointers to the start and the end of a region of the container that we’re concerned about. Learn more about slices and arrays in Go here. This makes deleting a value from a slice a bit tricky. There are two ways this can be achieved, depending on whether we want to keep the order of values in the array or not. If we want to keep the order of the values, we can slice the array up to the element we want to remove, then append all elements after the that: 12345678910111213141516171819arr := []string{ a ,  b ,  c ,  d ,  e ,  f }// we want to remove the thrid element  c i := 2arr = append(arr[:i], arr[i+1:]. . . )fmt. Println(arr)// [a b d e f]Note that we used the expansion expression . . . and we’re adding the elements from the slice. This gets the job done, but is not very efficient. However the order of the elements will be preserved. If we don’t care about the order of elements, we can swap the element we want to remove with the last element of the slice, then make the slice to be one element shorter: 12345678910111213141516171819202122232425arr := []string{ a ,  b ,  c ,  d ,  e ,  f }// we want to remove the thrid element  c i := 2arr[i] = arr[len(arr) - 1]arr = arr[:len(arr) - 1]fmt. Println(arr)// [a b f d e]//  c  is not in the slice, but the order is not preservedThis approach is much faster than the previous approach, but does not preserve the order of elements. What is happening behind the scene: remember that in Go, arrays are the container holding the values, and the slice is just a structure that points to the start and the end of the part of the array we’re concerned about? In the second case what we did was the following: We started with something like this: 1234567891011  array: [ a ][ b ][ c ][ d ][ e ][ f ]    ↑             ↑    | ┌-----------------------┘slice (0, 5) start at 0 and end at 5the slice starts at the 0th element and ends at the 5th element. The array is the background container holding the values. After we swap out “c” with “f”, we then set the slice end at 4 and end up with something likie this: 123456789101112131415          ┌---- swap ----┐          ↓       ↓array: [ a ][ b ][ f ][ d ][ e ][ c ]    ↑           ↑    | ┌------------------┘slice (0, 4) start at 0 and end at 4Now the slice ends at the 4th element. Note that the array still holds 6 values, however our slice only “sees” 5. "
    }, {
    "id": 133,
    "url": "http://localhost:4000/2020-07-08-string-to-input-stream",
    "title": "How to convert String to InputStream in Java",
    "body": "2020/07/08 - Convert String to InputStream in JavaVery often, especially when writing tests, you need to pass an InputStream and you want to read the data from a String. To convert to input stream, the easiest way is first to convert the string to array of bytes, then read from the bytes using ByteArrayInputStream. Here is an one-liner on how to do that in Java: 1234567InputStream stream = new ByteArrayInputStream( my-data . getBytes(StandardCharsets. UTF_8));"
    }, {
    "id": 134,
    "url": "http://localhost:4000/2020-07-02-float-nan-infinity",
    "title": "NaN and Infinity in Java",
    "body": "2020/07/02 - NaN and Infinity in JavaYou may be familiar with the fact that you cannot divide an integer with 0 in Java - it yields java. lang. ArithmeticException: / by zero. But what happens when we try to do this with floating point numbers. Let’s give it a try: 12345678910111213141516171819int m = 10, n = 0;System. out. println(m/n);// Exception: java. lang. ArithmeticException: / by zerofloat a = 10. 0f, b = 0. 0f;System. out. println(a/b);// InfinityNow that is interesting, we didn’t get an exception, but instead, we got something as a result: Infinity. If we check out the Float class, we can see that there are a couple of constants defined in the class:    NaN - A constant holding a Not-a-Number (NaN) value of type float.     PositiveInfinity - A constant holding the positive infinity of type float.     NegativeInfinity - A constant holding the negative infinity of type float.  What this means is, that some operations in Java may yield values that are not strictly some defined number and behave in a special way. For example, when we’re diving by 0, we usually say that the result is Infinity. In maths, this has a special meaning, in terms that Infinity is not a specific number and has a set of rules defined for it. In Java, we can see that there are two types of infinity: positive and negative. To get a positive infinity, it means that the result of some operation approaches infinite value, but from the positive side on the number axis - for example if we divide a positive number by 0, we get infinite results but all of them are positive, thus getting positive infinity. On the other hand, if we divide a negative number by 0, we also get infinite results, but all of them are negative, so negative infinity. 1234567891011121314151617181920212223242526272829float a = 1. 0f;float b = 0. 0f;System. out. println((a/b) == Float. POSITIVE_INFINITY);// true// if a is negativea = -1. 0f;System. out. println((a/b) == Float. POSITIVE_INFINITY);// false, we should be getting negative infinitySystem. out. println((a/b) == Float. NEGATIVE_INFINITY);// trueBut what happens when both of the numbers are 0? In maths, dividing zero by zero yields an undefined result. In Java we get NaN. This is also a constant defined in Float and Double classes. If we try to divide zero by zero, we get something that is not a number, so NaN. 123456789101112131415161718192021float a = 0. 0f;float b = 0. 0f;Float c = a/b;System. out. println(c);// NaNSystem. out. println(c == Float. NaN);// falseSystem. out. println(c. isNaN());// trueNow, this looks weird. Why isn’t the result (c), which is clearly NaN, not equal to that constant? This also comes from maths, where we cannot compare two things that are not numbers. We can only compare something that has a clear definition or has a clear value. NaN denotes a mathematically undefined value, and as such we cannot compare it (similar to NULL in SQL). What we can do, is to check whether whatever we got is undefined (Not-a-Number) by using Float. isNaN() method. Some notes on serialization: When serializing special care should be taken to serialize these values properly. If we do naive serialization, we would get an exception: 1234567Gson gson = new Gson();System. out. println(gson. toJson(new SomeObject(10. 0f/0. 0f)));// Throws an exception: java. lang. IllegalArgumentException: Infinity is not a valid double value as per JSON specification. To override this behavior, use GsonBuilder. serializeSpecialFloatingPointValues() method. By setting the serialization of these values, we get the following: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061public static class SomeObject {  private float value;  public SomeObject(float value) {    this. value = value;  }  public float getValue() {    return value;  }  public void setValue(float value) {    this. value = value;  }}. . . GsonBuilder builder = new GsonBuilder();builder. serializeSpecialFloatingPointValues();Gson gson = builder. create();System. out. println(gson. toJson(new SomeObject(10. 0f/0. 0f)));// { value :Infinity}System. out. println(gson. toJson(new SomeObject(-10. 0f/0. 0f)));// { value :-Infinity}System. out. println(gson. toJson(new SomeObject(0. 0f/0. 0f)));// { value :NaN}Be careful though, these values may not be recognized by some JSON parsers and you may get some unpredictable results, such as the values to be converted to String or getting an error while parsing. "
    }, {
    "id": 135,
    "url": "http://localhost:4000/2020-06-21-travis-timeouts-wait",
    "title": "How to increase Travis CI timeout?",
    "body": "2020/06/21 - There are different use cases where Travis jobs could raise the timeout error. Maybe you are trying to install a Python module that takes some time before installing the dependencies e. g: 12345install:  pip install torchor you are running the Java project tests e. g 12345script:  mvn package -Dtestng=test. xmlor pushing a new image to the Docker registry e. g 12345script:  docker push $APPLICATION:$IMAGE_VERSION;The default Travis job timeout is set to 10 min, so in some scenarios the above commands will fail with: 123Timeout (20 minutes) reached. Terminating  . . .  To increase the timeouts travis ci offers a function that will increase the build timeouts: 123install: travis_wait N mvn installThe travis_wait n where the n is the minutes by which the waiting time is increased.  Note: You must carefully use travis_wait since it can extend the build time when there could happen another issue. "
    }, {
    "id": 136,
    "url": "http://localhost:4000/2020-06-17-object-not-subscritble",
    "title": "TypeError 'NoneType' object is not subscriptable",
    "body": "2020/06/17 - This error is quite self-descriptive: 123456789Traceback (most recent call last): File  users. py , line 25, in &lt;module&gt;  user = users[0]TypeError: 'NoneType' object is not subscriptableIt means that you are trying to subscript (index) the object that actually is None. In the above example, the users list is empty so you can’t get the first user from it since None object doesn’t define the __getitem__ method. This simply can be fixed by finding out Why the list is None. "
    }, {
    "id": 137,
    "url": "http://localhost:4000/2020-06-17-find-pypi-downloads",
    "title": "Python package download stats from PyPI",
    "body": "2020/06/17 - The download stats were removed from PyPi modules. There were few reasons for that as explained in the mailing list. So, now the best available option to get the statistics is to use the Google BigQuery database. To use it you only need a Google account and enabled BigQuery API. The most useful query is to count the package downloads: 1234567891011121314151617181920212223242526272829SELECT COUNT(*) AS num_downloads, SUBSTR(_TABLE_SUFFIX, 1, 6) AS `month`FROM `the-psf. pypi. downloads*`WHERE file. project = 'YOUR_PACKAGE_NAME' AND details. installer. name = 'pip' AND _TABLE_SUFFIX  BETWEEN FORMAT_DATE(   '%Y%m01', DATE_SUB(CURRENT_DATE(), INTERVAL 10 MONTH))  AND FORMAT_DATE('%Y%m%d', CURRENT_DATE())GROUP BY `month`ORDER BY `month` DESCThe above query uses the the-psf. pypi. downloads table that contains information about downloads. It selects the package and filters the data to contain only pip installs(no mirrors downloads) in the last 10 months. Other useful columns from the the-psf. pypi. downloads are:       Column   Info   Example   |—|—|—|       file. project   The package name   requests         file. version   Version of the package   1. 2. 1         details. installer. name   Installer name   pip, bandersnatch         details. python   Python version   2. 7, 3. 6, 3. 7. 3   "
    }, {
    "id": 138,
    "url": "http://localhost:4000/2020-06-17-python-modules",
    "title": "Python Modules",
    "body": "2020/06/17 - Imagine a complex project where you have a lot of code. Having everything written in a single Python file will become un-maintainable, too complex and hard to debug. To have an abstraction layer that will provide separation of the code in different parts that can be reusable would be a great advantage. So, for example, to import one file into another and reuse classes and functions from it. Python already provides that abstraction by using the modules. Adding the import statement in the Python file means you are using the modules. Let’s check that with a simple code example. The following directory contains two Python files: 12345├── modulea. py├── moduleb. pyThe modulea contains one function e. g 12345def my_awesome_number(number):  print(f'The awesome number is {number}'. )Now, let’s import modulea in moduleb 1234567891011121314151617# other imports could be included too e. g from random import random # pyhthon module for generating random numbers# import the moduleaimport moduleadef random_number():  numb = random()  modulea. my_awesome_print(numb)What happens when we import modulea in moduleb? The import modulea will look in:    The same directory for the file with the name modulea. py.     The list of directories in the PYTHONPATH.     The installation default directory.  and will raise ModuleNotFound error if the modulea isn’t found. In this example, it will be found and will be executed by the Python interpreter in isolated scope. Next, the random module will be executed too and all of the (classes, functions, variables) in our example my_awesome_number function from modulea will be stored in the module’s dictionary and be available for use through the module’s namespace. The functions from the imported module will be executed only the first time when the module is imported. The imported modules as random and modulea are isolated in the module namespace to avoid the naming collision. In short that is what happens when you import the module. So, with the simple words, we can explain the Python modules as files with the suffix . py that contains Python statements. They as building blocks will provide code simplicity, better maintainability and reusability, so always prefer to use them. To check all of the available built in Python modules check Python Module Index "
    }, {
    "id": 139,
    "url": "http://localhost:4000/2020-06-17-context-managers",
    "title": "Python context managers",
    "body": "2020/06/17 - Have you ever heard about Context managers in Python and you weren’t sure what they are? The name may be strange but I am sure you have already used one. Let’s see one example for reading the file in Python: 12345678910111213  f = open(filename)  try:    yield f  finally:    f. close()In this implementation, the file wouldn’t be closed if the exception happened. Let’s another example that uses the with statement. 12345with open('file. txt') as f:  content = f. read()This code example is clean, easier to read and you are sure that the file method close will be called after execution leaves the with context. So, that is the job of the Context Manager. Context managers (objects that perform context management) allows you to release or allocate the resources when you want and can help you to avoid resource leaks. The contextlib module provides utilities for most of the tasks where the with is used. To learn how to create your own context managers check out . "
    }, {
    "id": 140,
    "url": "http://localhost:4000/2020-06-17-meta-tag",
    "title": "HTML Meta tag viewport",
    "body": "2020/06/17 - The meta name=viewport is not part of any web standards, but most of the mobile browsers today have support for it. The meta tag adds instructions to the browser about the page scaling on different devices. To optimize the webpage for mobile devices add: 123&lt;meta name= viewport  content= width=device-width, initial-scale=1 &gt; Note: meta tag should be added in the &lt;head&gt; of HTML page. The content width=device-width will set the width of the page the same as the device screen size and initial-scale=1. 0 will set the initial zoom on load. This means it will scale on different devices since the viewport(the visible area to the user) is different on the laptops, mobile phones, tablets. Omitting the viewport the browser will use a virtual viewport that will zoom out the website. So, it is always the best practice to add a viewport so the website will be optimized for different screens. "
    }, {
    "id": 141,
    "url": "http://localhost:4000/2020-06-17-doctype",
    "title": "What is Doctype in HTML?",
    "body": "2020/06/17 - The DOCTYPE as the name indicates describes the type of the document that would be used so the web browser, web crawler or other client tools can know what type to expect e. g 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Website Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; The website body&lt;/body&gt;&lt;/html&gt;This means that it is HTML5. The &lt;!DOCTYPE html&gt; is not an HTML tag it is just the information to the consumer so it knows how to parses the HTML. Web browsers are also using &lt;!DOCTYPE html&gt; to found out which mode to use for rendering the web page (quirks mode, almost standards mode, and full standards mode). The main idea of the modes is to make old web pages compatible in the new browsers that are following W3C standards. Check out this https://en. wikipedia. org/wiki/Quirks_mode#Comparison_of_document_types article for the difference in the rendering modes. Sometimes you can find other DOCTYPE declarations. Those are for old versions of HTML, so other declarations were used e. g in HTML 4: 123&lt;!DOCTYPE HTML PUBLIC  -//W3C//DTD HTML 4. 01 Transitional//EN   http://www. w3. org/TR/html4/loose. dtd &gt;This declaration looks more complicated because it contains the document type definition. For the full list of Doctype declarations check out W3 list. "
    }, {
    "id": 142,
    "url": "http://localhost:4000/2020-06-14-fatal-git-tree",
    "title": "fatal git-write-tree error building trees",
    "body": "2020/06/14 - If you search the above error, most of the answers would be to use git reset --hard command. But, you should be careful with executing this command. You can lose all uncommitted changes from your working tree. So how to resolve this error? 12345fatal: git-write-tree: error building treesCannot save the current index stateThis error usually happens when you have conflicts or unmerged paths. To check the unmerged paths run: 123git statusThis should show the following message: 1234567891011121314151617181920212223$ git status&gt; # On branch add-helpers&gt; # You have unmerged paths. &gt; #  (fix conflicts and run  git commit )&gt; #&gt; # Unmerged paths:&gt; #  (use  git add . . .   to mark resolution)&gt; #&gt; # both modified:   utilities/helpers. py&gt; #&gt; no changes added to commit (use  git add  and/or  git commit -a )Open the file with conflicts and look for the conflict markers &lt;&lt;&lt;&lt;&lt; and &gt;&gt;&gt;&gt;&gt;. Make the changes you want to keep and then add your changes: git add utilities/helpers. pyNow, you will be able to commit your changes or switch to another branch. "
    }, {
    "id": 143,
    "url": "http://localhost:4000/2020-06-05-list-index",
    "title": "How to find the index of an element in a list",
    "body": "2020/06/05 - The list. index method will return the index of the first found element in the list for e. g 1234567numbers = [1,2,2,2, 3,4,5,6,7]numbers. index(2)&gt;&gt;&gt;1So, in this case, there are 3 elements with value 2 but the index method returns only the first one. If the value is not found index method will raise a ValueError. 1234567numbers = [1,2,2,2, 3,4,5,6,7]numbers. index(45)&gt;&gt;&gt; ValueError: 45 is not in listThe index method will check every element in the list until it finds a match. That means it has O(n) complexity. In the cases where you have a very long list, you can consider using the start or end optional parameters to the index for e. g 123456789numbers = [1,2,3,4,5,6,7,8,9,10,11,12]# find index of 11 starting from 9th elementnumbers. index(11, 9)&gt;&gt;&gt;10"
    }, {
    "id": 144,
    "url": "http://localhost:4000/2020-06-05-dict-key",
    "title": "Python dict.key vs dict[key]",
    "body": "2020/06/05 - To get the value from the dictionary the most pythonic way would be to use the square brackets [ ] e. g 1234567891011121314151617# note that dict keys are case-sensitivecapitals = {  'usa' : 'washinghton',  'england' : 'london',  'france' : 'paris'}capitals['usa']&gt;&gt;&gt;'washinghton'Also, you can use the get method e. g 123456789101112131415capitals = {  'usa' : 'washinghton',  'england' : 'london',  'france' : 'paris'}capitals. get('usa')&gt;&gt;&gt;'washinghton'So, in both examples we got the same response ‘washinghton’. The question now is what is the difference between this two examples? Let’s try another example, using the key that isn’t in the capitals dict: 123456789101112131415capitals = {  'usa' : 'washinghton',  'england' : 'london',  'france' : 'paris'}capitals['spain']&gt;&gt;&gt; KeyError: 'spain'We got the KeyError, which is quite expected because we know that the ‘spain’ key is not avaiable in the dictionary. Let’s try with get method now: 123456789101112131415capitals = {  'usa' : 'washinghton',  'england' : 'london',  'france' : 'paris'}capitals. get('germany')&gt;&gt;&gt;We didn’t get any Error back, just the empty value. That is the difference between using get method and square brackets. The dict[key] will always throw KeyError when the key is not found. The get method accepts additonal parameter dict. get(key, [default]) which returnes the default value in case the key is not found. In our case we didn’t specify value so it was setup as None. "
    }, {
    "id": 145,
    "url": "http://localhost:4000/2020-06-04-get-time-millis-in-all-languages",
    "title": "Get current time in milliseconds in all popular programing languages",
    "body": "2020/06/04 - Get the current time as milliseconds in:    Python     JavaScript     Java     Swift     Go     C#     C++     Scala     Kotlin     Ruby     PHP     C     Rust     Objective-C     Dart     Lua     Haskell     Clojure     Matlab/Octave     R  Python1234567891011121314151617181920212223242526272829import datetime# Microseconds precision, returned as float numbercurr_time_millis = datetime. datetime. now(). timestamp()*1000print(curr_time_millis) &gt;&gt; 1590571047186. 401# [ millis  ]. [ microseconds]# Get just the millisecondscurr_time_millis = int(datetime. datetime. now(). timestamp()*1000)print(curr_time_millis) &gt;&gt; 1590571047186JavaScript12345678910111213currTimeMillis = new Date(). getTime() // returns unix timestamp in millisecondsconsole. log(currTimeMillis)&gt;&gt; 1590571047186Java1234567891011long currTimeMillis = System. getCurrentTimeMillis();System. out. println(currTimeMillis);&gt;&gt; 1590571047186Swift1234567var currTimeMillis = Int64(NSDate(). timeIntervalSince1970 * 1000)&gt;&gt; 1590571047186Swift 3. 0 1234567var currTimeMillis = Int64(Date(). timeIntervalSince1970 * 1000)&gt;&gt; 1590571047186Go123456789101112131415161718192021222324252627import (   fmt    time )func main() {  currTimeMillis := time. Now(). UnixNano() / int64(time. Millisecond)  fmt. Printf( %d\n , currTimeMillis)}&gt;&gt; 1590571047186C#123long currTimeMillis = DateTimeOffset. Now. ToUnixTimeMilliseconds();C++With C++ 11: 12345678910111213141516171819#inclide &lt;chrono&gt;using namespace std::chrono;unsigned long long curr_time_millis = duration_cast&lt;milliseconds&gt;(  system_clock::now(). time_since_epoch()). count();With time. h 12345678910111213141516171819202122232425#include &lt;sys/time. h&gt;struct timeval tv;gettimeofday(&amp;tv, NULL);unsigned long long curr_time_millis =   (unsigned long long) tv. time_sec * 1000 + // time_sec is the number of seconds  (unsigned long long) tv. time_usec / 1000; // time_usec is the number of microsecondsScala1234567891011121314151617// same as in Javaval currTimeMillis = System. getCurrentTimeMillis();// alternativelyval currTimeMillis = DateTime. now(DateTimeZone. UTC). getMillis()Kotlin1234567891011121314151617// Same as in Javavar currTimeMillis = System. currentTimeMillis()// alternatively, using kotlin. system. getTimeMillisimport kotlin. system. getTimeMillisvar currTimeMillis = getTimeMillis()Ruby123(Time. now. to_f * 1000). to_iPHP123$curr_time_millis = round(microtime(true) * 1000);C12345678910111213141516171819202122232425#include &lt;sys/time. h&gt;struct timeval tv;gettimeofday(&amp;tv, NULL);unsigned long long curr_time_millis =   (unsigned long long) tv. time_sec * 1000 + // time_sec is the number of seconds  (unsigned long long) tv. time_usec / 1000; // time_usec is the number of microsecondsRust123456789101112131415use std::time::{SystemTime, UNIX_EPOCH};fn main() { let curr_time_millis = SystemTime::now(). duration_since(SystemTime::UNIX_EPOCH). expect( We're before UNIX epoch.  ) * 1000; println!( {:?} , curr_time_millis);}Objective-CNSDate *date = [NSDate date];double curr_time_millis = [date timeIntervalSince1970] * 1000. 0;Dart123var currTimeMillis = DateTime. now(). millisecondsSinceEpoch;LuaUse the “socket” package 12345require  socket currTimeMillis = socket. gettime()*1000Haskell1234567891011import Data. Time. Clock. POSIX (getPOSIXTime)main = do currTimeMillis &lt;- round . (1000 *) &lt;$&gt; getPOSIXTimeClojure123(System/currentTimeMillis)Matlab/OctavecurrTimeMillis = round(time() * 1000)R123currTimeMillis = as. numeric(Sys. time())*1000"
    }, {
    "id": 146,
    "url": "http://localhost:4000/2020-06-04-clickhouse-516-db-exception",
    "title": "ClickHouse Code 516. DB::Exception",
    "body": "2020/06/04 - ClickHouse provides a command line tool for connecting to the ClickHouse database called clickhouse-client. Following the official documentation, you need to run clickhouse-client to successfully connect to ClickHouse server. But on the first attempt, you will usually get the following exception: 123Code: 516. DB::Exception: Received from localhost:9000. DB::Exception: default: Authentication failed: password is incorrect or there is no user with such name. That’s because the first time you installed ClickHouse you have entered the default password so you must provide that one as an argument to the clickhouse-client e. g 123clickhouse-client --password=your-password And now, you should get a successful connection message: 1234567ClickHouse client version 20. 4. 2. 9 (official build). Connecting to localhost:9000 as user default. Connected to ClickHouse server version 20. 4. 2 revision 54434. "
    }, {
    "id": 147,
    "url": "http://localhost:4000/2020-06-01-string-isspace",
    "title": "How to check for empty space, tab or newline in Python",
    "body": "2020/06/01 - The built-in string method isspace() checks if there are only whitespace characters in the string, otherwise it will return False. The best use case of this method is to check if the string contains characters as:  ‘\n’ - new line1234567mystring = '\n'mystring. isspace()&gt;&gt;&gt;True ’ ‘ - whitespace1234567mystring = ' 'mystring. isspace()&gt;&gt;&gt;True ‘\t’ - tab1234567mystring = '\t'mystring. isspace()&gt;&gt;&gt;True ‘\r’ - carriage return1234567mystring = '\r'mystring. isspace()&gt;&gt;&gt;True ‘\f’ - form feed1234567mystring = '\f'mystring. isspace()&gt;&gt;&gt;TrueOr combination: 12345678910111213mystring = ' \t'anotherstring = '\n\t'mystring. isspace()anotherstring. isspace()&gt;&gt;&gt;True&gt;&gt;&gt;True Note that isspace() will not return True for ‘’, so always check with not mystring or mystring. isspace(). "
    }, {
    "id": 148,
    "url": "http://localhost:4000/2020-06-01-big-o-notation",
    "title": "What is Big O notation?",
    "body": "2020/06/01 - Let’s preview the following simple fucntion: 1234567891011def sum(n):  # note that := is assignment operator avaiable in Python 3. 8  sum = 0  [sum := sum + x for x in n]  return sumCan you count the steps that are needed before returning the sum? Assigning the 0 value to sum, iterate over each n element and add it to the sum and lastly return the sum. Is there some mathematical notation that can describe this? Yes, that is the Big O notation. You can simply describe the efficiency of the algorithm with Big O notation. The Big O notation is used to describe the complexity of an algorithm according to the run time and space requirements when the different input size is used. Let me show you how it might look with code. 1234567891011def find_awesome_user(users):  for user in users:    if user. city == 'awesome city':      return user  return 'Not found'Before we found the user from an awesome city some number of checks must be performed. The user that we are looking can be the last in the list so we need to iterate through all of them which would be the worst-case scenario. Finding the user from the awesome city on the first iteration would be our best-case scenario. If we have the 50 users our average case scenario would fall somewhere in the middle, around 25 users. So, by analyzing the time complexity of the above function you can think of the best, average and worst-case scenarios. Big O notation measures the worst-case scenario. You can describe the complexity of this function as a linear because of the steps required to complete the execution of the function increase or decrease linearly with the number of users. You can say that the efficiency of the function is about O(n). Sometimes, an algorithm needs to perform a linear time operation for each value in the input data for e. g 1234567for x in data:  for y in data:    print(x, y)In this case, it is a quadratic time complexity O(n2). But what if the function doesn’t depend on the input data? In that case, we can say that it has a constant time O(1). 1234567def find_first(users):  #imagine the users were sorted by id  return users[0]This function doesn’t depend on the input data size, because it always gets the first user from the list. By looking at the above examples maybe you can think of a use case where some algorithm has multiple complexities e. g O(n) + O(n2) + O(n!) etc. So, how can you calculate them, is just by describing the largest complexity of that algorithm. In the above example as O(n!) which is a factorial time complexity that grows in a factorial way.  For additional information on the Big O complexity of most common algorithms in the computer science check bigocheatsheet. "
    }, {
    "id": 149,
    "url": "http://localhost:4000/2020-05-28-linux-dirs-explained",
    "title": "Linux directories structure explained",
    "body": "2020/05/28 - This short article aims to provide a simple and useful explanation to the Linux directory structure.     / - This is the top level root directory, that contains all other directories on the system.     bin - This directory contains all the essential binary executable programs, required for booting, shells like cp, ls, grep, kill, vi text editor etc.     boot - All of the static files used in booting the system are located here e. g grub, vmlinux     cdrom - It is not part of the Filesystem hierarchy standard but can be found usually in Ubuntu. It is used as a temporary location for CD-ROMs.     dev - Files related to the hardware as cdrom, cpu, drive can be found here. Also some pseudo-devices as dev/null.     etc - Host-specific system configuration files.     home - This is the home directory for each user on the system e. g /home/user1, /home/user2 that contains configurations per user.     lib - All of the shared library images and kernel modules needed by /bin and /sbin.     lost+found - All of the unlinked, corrupted files used to recover by fsck are placed here.     media - All of the removable media as CD, USB when plugged into the system are mounted inside the media directory.     mnt - This is used for a temporary mounting file system.     opt - This directory contains optional packages and third party applications.     proc - It contains the information related to the running processes.     root - The home directory for the root user.     sbin - Similar directory as /bin that contains essential binaries for system administration.     srv - This directory contains most of the service related or files specific to servers.     sys - The virtual file system.     usr - All of the files used by the users, not by the system are saved in this directory.     var - It contains most of the variable data files as logs, mails, temp files.  "
    }, {
    "id": 150,
    "url": "http://localhost:4000/2020-05-27-string-equals-vs-equality-operator",
    "title": "Java String.equals vs '=='",
    "body": "2020/05/27 - Java String equals vs the (==) equality operator TL;DR; Always use String. equals or Objects. equals on strings. == compares  memory locations, not the actual content of the string. This is important as  string literals are not kept in the heap and different string objects on the  heap will have different memory locations even if they have the same content. Java is a bit weird when it comes to string comparison. I remember me getting stumped when I first needed to compare strings in Java. I used the == comparison operator and got some weird results that I didn’t expect, for example: 1234567891011121314151617if( foo  ==  foo ) {  // This always gets through}// However thisif(myVariable ==  foo ) {  // would sometimes works, but other times will not work. }So what is going on? It all stems from the way Java handles variables and constants in your code. Maybe you’ve heard of string literals. Literals in Java are primitive data types (like int, float, boolean and sometimes String) which are not instantiated using the new keyword, like these int i = 10; or String str =  foo ;. Notice that there is no new keyword before any of these. When defined like this, Java considers these values as constants and keeps them in a special place in the jvm memory used for constants. The idea behind this is a form of optimization - whenever Java encounters the same value in the code, it does not allocate new memory on the heap, but instead will reuse the value that already has in the static memory. However, if we create new values using the new keyword, we’re instructing the jvm to actually allocate new slot on the heap for our value: String str = new String( foo );. By now you may have some idea of what is going on: 123456789101112131415String a =  foo ; // this is a literal and goes in the static memoryString b =  foo ; // also a literal, with same value as 'a', so 'b' points to the same          // memory location as 'a'String c = new String( foo ) // We allocate  foo  on the heap, although it has the               // same value as 'a' and 'b', it is in a different               // memory location - namely on the heapWhen doing == comparison in Java, by default the jvm compares memory locations - it will compare whether the memory address of the two objects is the same, and if it is, then the objects must be the same. But the strings allocated with new will always get new locations on the Heap, and == will get two different memory locations and will evaluate to false. The way around this is to use String. equals method. This method compares the string content, and not the memory addresses. And that is what we want when comparing strings. Here is some weirdness and examples on how to compare string and what not to do: 12345678910111213141516171819202122232425262728293031323334353637383940414243String a =  foo ;String b =  foo ; a == b // -&gt; true, but don't do this. a. equals(b) // true. Do this instead. String a =  foo ;String b = new String( foo )a == b // false. One is a string literal, the other is a regular object on the heap. a. equals(b) // true. Compares the content:  foo  is equal to  foo . // Alternative approach, with Objects. equalsObjects. equals( foo ,  foo )        // trueObjects. equals( foo , null)        // true. Protects us from null pointer dereferencing. Objects. equals( foo , new String( foo ))  // trueSo basically we want to use String. equals to compare the content of the strings. However in some cases we may run into problems, namely in the cases when we try to call equals from a variable that is null: 123456789String a = null;a. equals( foo ); // NullPointerExceptionSo in cases when we’re comparing with a literal, always call equals from the literal: 1234567String a = null; foo . equals(a)  // false. No exception was thrown. Alternatively you can use Objects. equals (available from java 1. 7). This does what we want and takes care of the null values. 1234567String a = null;Objects. equals(a,  foo ) // false. no exception thrown. "
    }, {
    "id": 151,
    "url": "http://localhost:4000/2020-05-27-string-contains-python",
    "title": "Check if a string contains substring in Python",
    "body": "2020/05/27 - String contains method in PythonPython’s alternative to String. contains is the keyword in. 123456789101112131415161718192021foobar = 'foobar'substr = 'foo'if substr in foobar:  print('Yes')else:  print('No')# Prints 'Yes'Although under the hood Python may use some of the magic methods like __contains__, __iter__ and __getitem__, you should try to avoid using these methods directly on strings. These are useful when defining your own type with testing membership capabilities. "
    }, {
    "id": 152,
    "url": "http://localhost:4000/2020-05-26-notimplemented-notimplementederror",
    "title": "NotImplemented vs NotImplementedError in Python",
    "body": "2020/05/26 - What is NotImplemented?The NotImplemented is built in constant in Python. It should be used by some of the python special methods for e. g (add(), eq()) to address that the operation is not implemented but can be run by other type. If this sounds confusing let’s preview the use case of NotImplemented inside the python datetime standard library. 1234567891011121314151617 def __add__(self, other):    if isinstance(other, timedelta):      # for CPython compatibility, we cannot use      # our __class__ here, but need a real timedelta      return timedelta(self. _days + other. _days,               self. _seconds + other. _seconds,               self. _microseconds + other. _microseconds)    return NotImplementedThe first line checks if the other object is timedelta, and if it is, it will return timedelta object that contains the time, seconds and microseconds of both objects. But if the other object is not timedelta, it doesn’t throw an exception because, maybe the other object will know how to handle this operation. So, in short words the interpreter will try the add operation on the other type. If both attempts returne NotImplemented, then the appropriate exception will be raised. The NotImplementedError exceptionThis is an exception that derives from the RuntimeError. The usual use case of this exception is in the abstract class methods when they required the derived class to override them. 1234567891011class Foo():  @property  def some_method(self):    raise NotImplementedError( The derived class should implement the logic.  )Also, while developing you can raise this exception as a reminder to implement this method in the future. 1234567891011class Foo():  #TODO  def new_method(self):    raise NotImplementedError( Still not implemented.  )"
    }, {
    "id": 153,
    "url": "http://localhost:4000/2020-05-26-symbolic-link",
    "title": "Symbolic link",
    "body": "2020/05/26 - Symbolic LinkWhat is Symbolic Link?: A symlink or a Symbolic Link is simply enough a shortcut to another file. It is a file that points to another file. How to create a Symbolic Link?: Files is a symbolic link to /images/files/prod/files. When you access files or anything inside it, you’ll really access the path under /images. Symbolic links are made and updated using the ln command. This link could have been made with: 123ln -s /images/files/prod/files files-s means to make a symbolic link. To update a link, either delete the link and create it as above, or use the -f option to ln as well. If you are linking to a folder, you should include the -n option: 123ln -sfn /a/new/path filesThis will replace the link with a new one pointing at /a/new/path. The -n option is necessary when linking to a different target folder to avoid creating a sub-folder inside that symbolic link and instead replace the symbolic link completely. "
    }, {
    "id": 154,
    "url": "http://localhost:4000/2020-05-26-list-files-with-dot",
    "title": "How to list `dot` files in Linux",
    "body": "2020/05/26 - The Unix-like operating systems are using . to point to the current directory and . . to point to the parent directory. These entries are not usually the once you are looking when listing the current dir so the ls command hides them. But, there are a lot of files that are also starting with . which will not be visible too. For e. g run ls in a user home: 123lsshall return 1234567891011DesktopDocumentsDownloadsinfo. txtcsa. pySo, there are no . files. Many users are pointing to these files as hidden files but it is not necessarily true. The original intention was to hide only . and . . but it was intentionally left to not list the other files too, since the community users find it more useful to name the files that are used for caching, configuration, preferences etc using the . . If you need to list those files too just add -a or -all flag to the ls command. 12345# do not ignore entries starting with . ls -a, --allshall return 1234567891011121314151617DesktopDocumentsDownloadsinfo. txtcsa. py. gradle. Skype. zoom"
    }, {
    "id": 155,
    "url": "http://localhost:4000/2020-05-26-cronjob",
    "title": "Cron, cron job and crontab",
    "body": "2020/05/26 - Cron, cron job and crontabWhat are cron, cron job, and crontab?: Cron is a system that helps Linux users to schedule any task. However, a cron job is any defined task to run in a given time period. It can be a shell script or a simple bash command. Cron job helps us automate our routine tasks, it can be hourly, daily, monthly, etc. Meanwhile, the crontab stands for cron table. It is a Linux system file that contains a list of the cron job. We define our task — bash command, shell script, Python script, etc scheduled in crontab. Check cron service on Linux system: 123sudo systemctl status crond. serviceUnderstand a cron job syntax: Cron job syntax on crontab.    crontab -a : create a new as crontab file     crontab -e: edit our crontab file or create one if it doesn’t already exist     crontab -l: show up our crontab file     crontab -r: delete our crontab file     crontab -v: show up the last time we have edited our crontab file  minute(s) hour(s) day(s) month(s) weekday(s) command(s) Note: day names 0–6 begin with Sunday. Handling error on cron job: If the cron job encounters an error, the default, it will send an email to the system administrator. Send output to a specific file: 123 * * * * * cd /home/abc &amp;&amp; /bin/bash shell-script. sh &gt;&gt; log. outThe description of the above syntax on a crontab file is as follows:    The * * * * * means that a task will be executed every minute of every hour of every day of every month and every day of the week     The directory will be switched to /home/abc where the shell-script. sh is located     /bin/bash is the path and executable of the Bash shell     The » symbol will append the output to an existing file (log. out), while a single &gt; symbol will overwrite the file     The shell-script. sh is a certain shell script  Use /dev/null: 123 * * * * * cd /home/abc &amp;&amp; /bin/bash shell-script. sh &gt; /dev/null 2&gt;&amp;1The description of the commands:    The &gt; /dev/null tells the cron to redirect the output (STDOUT) to /dev/null     2 is the file descriptor for Standard Error (STDERR)     &amp; is the symbol for file descriptor (without it, the following 1 will be a filename)     1 is the file descriptor for Standard Out (STDOUT)   Note: The 2&gt;&amp;1 tells the cron to redirect all errors (STDERR) to same as standard out (STDOUT)  Write a simple cron automation script: Open our terminal and type crontab -e to open a crontab file. Then, scroll down and type the following command. 123 * * * * * /bin/date &gt;&gt; /tmp/cron_outputCheck that it is working: 123tail -f /tmp/cron_outputYou should see the date updated every minute on the minute (or close to it): 12345Tue Oct 5 12:25:47 IST 2021Tue Oct 5 12:26:47 IST 2021Conclusion: The cron job runs on a Linux system to run and execute our regular tasks (terminal commands). The most important thing to learn about the cron job is the bash command on the terminal, how to set our task schedule, and make sure to catch the whole possibilities when our script is running on production, so we can prevent the error. References: https://crontab. guru/ https://towardsdatascience. com/create-your-first-cronjob-on-the-linux-server-74e2fdc76e78 "
    }, {
    "id": 156,
    "url": "http://localhost:4000/2020-05-20-checkout-remote-branch",
    "title": "How to check out a remote Git branch",
    "body": "2020/05/20 - How to check out a remote Git branch: You need to work on a git branch that you don’t have locally, but you are not sure how to pull and switch to that branch. Let’s first list the remote branches so we are sure the branch exists. To list all of the remote branches run: 123git branch -aThis will list all of the local and remote branches. 1234567local_branch1local_branch2remotes/new_branchThe first displayed are all local branches, and the branches that contain remote/ are the remote branches. Copy the name of the remote branch you want to work on and execute: 123git checkout new_branchYou should see the Branch 'new_branch' set up to track remote branch 'new_branch' from 'origin'. message. This means you have successfully checkout to the new_branch. Multiple remotes: There are cases where the repository will contain more than one remote. In that case run: 123git checkout -t &lt;name of remote&gt;/new_branch"
    }, {
    "id": 157,
    "url": "http://localhost:4000/2020-05-19-reset-mysql-root-password",
    "title": "How to reset the MySQL root password",
    "body": "2020/05/19 - How to reset the MySQL root passwordThis is a usual situation where you have added a password to the root user during the MySQL installation, but later on, you forgot it and can’t login. Don’t worry, we have been to the same situation and will help you to change the password in a few steps.  The first thing to do is to stop the MySQL server:123sudo /etc/init. d/mysql stop Start the server with additional flags:123sudo /usr/sbin/mysqld --skip-grant-tables --skip-networking &amp;The --skip-grant-tables flag will start the server without the grant tables in MySQL system schema. That means no privileges and unrestricted access to all databases, so it is best to also disable remote connections by using the --skip_networking.  Use the MySQL client to connect back to the server:123 mysql -u root Now, let’s reload the grant tables:123FLUSH PRIVILEGES; Update the password for root user:12345update user set authentication_string=password('new_pass') where user='root';update user set plugin= mysql_native_password  where User='root'; The mysql_native_password is the default authentication plugin used. After executing the above query just restart the server and you can loggin with new password. Change the root password in MariaDB 10. x: In the latest MariaDB versions the above steps are simplified. You can skip steps 1 and 2 from above. Start from the 3 step and use sudo when login to MySQL client. The 4 and 5 steps are the same. To verify if the new password works: 123mysql -u root -p"
    }, {
    "id": 158,
    "url": "http://localhost:4000/2020-05-19-remove-github-pages",
    "title": "How to unpublish GitHub pages site",
    "body": "2020/05/19 - How to unpublish GitHub pages siteSometimes, you don’t want your Github Pages personal website to be available, or you are migrating to the new repository so you need to unpublish the site. The first thing that you would usually do is to:    Go to repository settings     Under GitHub Pages select the None(Disable GitHub Pages) option from the dropdown.  That is the correct way but, there is one additional step that you need to do, to successfully unpublish the site. Delete gh-pages branch: The gh-pages branch is the default publishing source branch for most of the GitHub Pages sites. Make sure that this branch is deleted from the repository: git push origin -d gh-pages#git version older then 1. 7git push origin :gh-pagesIf the response is fatal: 'gh-pages' does not appear to be a git repository, make sure that you have the branch locally before deleting it: git pull origin gh-pagesand then delete it. For additonal informations about How to delete remote branch in Git check delete-remote-branch That’s all. You have successfully unpublish the GitHub Pages site.  Note: If you are using a custom domain for the GitHub Pages site, make sure to update your DNS settings. "
    }, {
    "id": 159,
    "url": "http://localhost:4000/2020-05-19-undo-latest-local-commit",
    "title": "How to undo the latest local commit in Git repository",
    "body": "2020/05/19 - Undo the latest local commit in GitSo we’ve committed some changes by mistake and we want to revert it back. No worries, Git is here to help! Depending on what we need, we can do one of the following: Undo all changes in the last commit: To undo all changes made in the last commit, and go back to an earlier commit, we can use git revert. Let’s say we have some repository, and we committed something by mistake: 12345678910111213$ git log --oneline cba9069 (HEAD -&gt; master) Oops, this change is a mistake &lt;-- We want to revert this commit5b7794b Some stable changese57b197 Adds some content187ea9d Initial commitThen, to revert the latest commit, we can use git revert &lt;commit sha&gt;: 123git revert cba9069This will pop up our favorite editor to enter the revert commit message and will create a new commit, which reverts all changes in the given commit. After the command is complete, the repository history will look like this: 12345678910111213$ git log --oneline 0ed5618 (HEAD -&gt; master) Revert  Oops, this change is a mistake   &lt;-- this reverts all changes from cba9069cba9069 Oops, this change is a mistake5b7794b Some stable changes  &lt;-- The final state of the repository will be the same as in this commite57b197 Adds some content187ea9d Initial commitAs you can see, there is an additional commit that reverted our changes and the final state of the repository is the same as the state it had in the previous commit (the commit before the one we wanted to revert). This is useful when we want to keep the repository history and it is the recommended way of doing things. The upside is that we haven’t lost any data, even if we change our mind later, we can always revert again or see the changes in the reverted commit - it’s all there in the history. Reset the changes, modify and commit again: Sometimes we don’t want to revert everything, but instead we need to make just a couple of changes and commit again. In these situations we can use git reset --soft &lt;commit-ref&gt;: Given the same state of the repository: 12345678910111213$ git log --oneline cba9069 (HEAD -&gt; master) Oops, this change is a mistake &lt;-- We want to make some changes here again and commit5b7794b Some stable changese57b197 Adds some content187ea9d Initial commitThen we can do: 123git reset --soft HEAD^This makes a soft reset to the commit that is parent of the current HEAD (the current HEAD is what we want to change). Soft reset means that Git will undo the changes of the commit in the following way:    The HEAD of the repository will now point to 5b7794b Some stable changes (HEAD^ - one up from current HEAD)     The changes introduced in the faulty commit are not lost, but are staged in the repository  This gives us the opportunity to redo the changes and commit again. Doing a git status to see the changes we see something like this: 12345678910111213$ git status On branch masterChanges to be committed: (use  git restore --staged &lt;file&gt;. . .   to unstage)	modified:  README. mdAnd the history log: 1234567891011$ git log --oneline 5b7794b (HEAD -&gt; master) Some stable changese57b197 Adds some content187ea9d Initial commitThis is exactly what we wanted. After doing the changes we can commit: 1234567891011121314151617$ git commit -m  Fixed the commit $ git log --oneline55293e6 (HEAD -&gt; master) Fixed the commit5b7794b Some stable changese57b197 Adds some content187ea9d Initial commitGetting rid of the commit completely: Sometimes we want to get rid of the commit completely. Maybe we have committed some sensitive data by mistake (like an access key or password), and we want no trace of it in the history. In those cases, we can rebase the branch and drop the commits we don’t want. Again starting with the same repository, we can rebase on the parent commit of the good commit (going 2 commits back, because we cannot drop a commit if there is just one commit in the rebase list): 12345678910111213$ git log --oneline cba9069 (HEAD -&gt; master) Oops, this change is a mistake &lt;-- We want this gone5b7794b Some stable changese57b197 Adds some content &lt;-- we pass this commit to the rebase command, so we have 2 commits in the list187ea9d Initial commitRebase: 123git rebase -i e57b197In the rebase editor: 12345pick 5b7794b Some stable changes &lt;-- we want to keep thisdrop cba9069 Oops, this change is a mistake &lt;-- but we want to drop thisSave, and commit. The final state of the repository: 123456789$ git log --oneline 5b7794b (HEAD -&gt; master) Some stable changese57b197 Adds some content187ea9d Initial commitAnd there are no changes staged for commit: 1234567$ git status On branch masternothing to commit, working tree cleanImportant Note: This will completely remove any trace of the commit, so once done, it is very hard to get those changes back if we change our mind later on. We should use this approach only if we are certain that we want that commit completely gone. Final notes: When using approaches 2 and 3 (using reset and rebase), we’re making changes in the repository graph itself. While locally this is absolutely fine, there might be a problem when we’re having a remote repository. When the commit we want to revert is on the remote repository as well, then the two repositories will have different graphs and we cannot push our changes in a straight forward manner without Git complaining that the branches have diverged. Approach 1 however, when using git revert, adds an additional commit, just like a regular commit, which then can be easily pushed to the remote repository. "
    }, {
    "id": 160,
    "url": "http://localhost:4000/2020-05-19-python-regex-cheatsheet",
    "title": "Python Regex Cheat Sheet",
    "body": "2020/05/19 - We all have been in situations where the Regular Expressions were very useful. This days they are not widely used by programmers but if you still need to verify the strings structure, find and replace strings, working on a new processing utility or just doing regex code wars you will find this sheet helpfull. Quantifiers   * - matches 0 or more occurences     + - matches 1 or more occurences     ? - matches 0 or 1 occurences     . - matches any except newline     {m} - matches exactly m     {m,n} - matches between m and n     {m,} - matches m or more     {,n} - matches up to n  Special characters   $ - matches at the end of the string     ^ - matches the start of the string     *? - matches 0 or more repetitions     \ - escape special characters     [a-z] - matches any lowercase a-z letter     [^] - matches NOT in the set     [^ab-d] - matches except a,b,c,d                 m     n - matches either m or n          Special sequences   \d - matches digits     \D - matches non-digits     \s - matches whitespace     \S - matches non-whitespace     \W - matches non-word character     \w - matches a word character     \Z - matches only at the end of the string     \A - matches only at the start of the string  Groups   ( ) - matches the group inside parentheses     (?:A) - matches expression represented by A  For more additional information check re module documentation. "
    }, {
    "id": 161,
    "url": "http://localhost:4000/2020-05-14-install-pytorch-windows",
    "title": "Install Pytorch on Windows",
    "body": "2020/05/14 - Install Pytorch with pip: The Windows version of PyTorch was never uploaded to PyPi because of the binary size limits. When installing it you will end up getting the RuntimeError: PyTorch does not currently provide packages for PyPI error. To successfully install with pip you need to specify the URL locations to the PyTorch wheel: 12345pip install torch===1. 5. 0 torchvision===0. 6. 0 -f https://download. pytorch. org/whl/torch_stable. html Note that this will install the PyTorch with CUDA. If your system hasn’t an NVIDIA GPU install the CPU version instead: 123pip install torch==1. 5. 0+cpu torchvision==0. 6. 0+cpu -f https://download. pytorch. org/whl/torch_stable. htmlInstall Pytorch with Conda: The Conda installation is straight forward: 123conda install pytorch torchvision cudatoolkit=10. 2 -c pytorchand without CUDA: 123conda install pytorch torchvision cpuonly -c pytorchFor additional installation options as LibTorch or installation from Source check the Start Locally guide at https://pytorch. org/. "
    }, {
    "id": 162,
    "url": "http://localhost:4000/2020-05-13-peer-authentication-failed-psycopg2",
    "title": "Psycopg Peer authentication failed for user postgres",
    "body": "2020/05/13 - psycopg2. OperationalError: FATAL: Peer authentication failed for user “postgres”The Psycopg is one of the most popular and widely used python database adapters for the PostgreSQL database. The basic example shows how easy it is to connect to the existing database with psycopg. But, it doesn’t provide all of the required arguments to the connect function that usually leads to the above error. The basic module usage example: 1234567import psycopg2# Connect to an existing databaseconn = psycopg2. connect( dbname=test user=postgres )Since the psycopg2. OperationalError error is quite generic to avoid it make sure you are providing the following arguments:    user - the database user used to authenticate     password - the password for the database user     database - the database name     host - the database host address  The basic example with the required arguments: 123conn = psycopg2. connect(dbname='db', user='postgres', host='localhost', password='postgres') Note: the connection parameters can be added as a connection string or as a set of keyword arguments. "
    }, {
    "id": 163,
    "url": "http://localhost:4000/2020-05-12-delete-remote-branch",
    "title": "Git delete a branch remotely",
    "body": "2020/05/12 - Git delete a branch from the local and remote repositoryWhile working with Git repositories, very often you will create and need to delete a lot of branches. Some branches will be merged into the master branch and some are no longer necessary. In either case, at some point they need to be deleted. We want to keep the repository clean and neat after all. Deleting a local branch in a Git repository is quite straight forward. You can use either of these commands to do it: 12345git branch -d &lt;branch_name&gt;git branch -D &lt;branch_name&gt;To delete a branch in the remote repository, you can do something very similar: 1234567891011git push -d &lt;remote&gt; &lt;branch_name&gt;# &lt;remote&gt; is the remote name, very often 'origin'git push -d origin &lt;branch_name&gt;The difference between -d and -D: Both -d and -D are aliases:  -d is an alias for --delete. This deletes a branch only if the branchhas already been fully merged in its upstream branch. This is very useful when using git workflows, to prevent unintentional mistakes of deleting a branch that is intended to be merged. Once merged, however, the branch can be safely deleted.  -D is shortcut for --delete --force. This deletes the branch regardlessof the merge state of the branch. This is useful for deleting branches that are not expected to be merged. ## Deleting remote branch on Github repository Very often you need to remove a branch on a remote repository on Github. The regular process of creating a Pull Request, once the branch has been merged, offers an action to delete the branch via the web interface: In the branch that should be deleted was not merged via Pull Request, then you can remove it from the command line by pushing to the remote repository: 123 git push -d origin &lt;branch_name&gt;"
    }, {
    "id": 164,
    "url": "http://localhost:4000/2020-05-12-remove-specific-item-from-list",
    "title": "How to remove a specific item from a list (array) [Javascript]",
    "body": "2020/05/12 - How to remove a specific item from a list (array) in JavascriptRemoving an element by value from an array is a very common task in day to day coding. Javascript Arays do not directly expose method to do this by element value, however this can easily be achieved using the splice method: 1234567891011121314151617181920212223let vegetables = ['Cabbage', 'Turnip', 'Radish', 'Carrot']console. log(vegetables)// [ Cabbage ,  Turnip ,  Radish ,  Carrot ]// Remove  Radish let removedItem = vegetables. splice(vegetables. indexOf('Radish'), 1) // this is how to remove an itemconsole. log(vegetables)// [ Cabbage ,  Turnip ,  Carrot ]console. log('Removed item:', removedItem)// Removed Item: RadishThe splice approach is the recommended way of removing an element in Javascript (See “Common Operations” on MDN). The splice method changes the content of the array by removing (and/or replacing) elements in the array, at the given position. The first argument to splice is the position (0-based) of the first element to be removed, and the second argument is the number of elements to be removed from the array starting at that position. By setting 1 as the second argument, only the element at the given position will be removed. An important thing to note is that this approach mutates the array. Remove an element by value without modifying the original array: To remove an element without modifying the original array, we can use slice to slice the array into two sub-arrays and then concatenate them both into one array: 123456789101112131415161718192021let vegetables = ['Cabbage', 'Turnip', 'Radish', 'Carrot']let pos = vegetables. indexOf('Radish') // get the position of the element we want to removelet vegetablesNoRadish = vegetables. slice(0, pos). concat(vegetables. slice(pos + 1))console. log(vegetablesNoRadish)// [ Cabbage ,  Turnip ,  Carrot ]// The original array is unchangedconsole. log(vegetables)// [ Cabbage ,  Turnip ,  Radish ,  Carrot ]Remove all elements with the same value from the array: To remove all elements in the array that have the given value, we can use method filter: 12345678910111213let vegetables = ['Cabbage', 'Turnip', 'Radish', 'Carrot', 'Radish']let vegetablesNoRadish = vegetables. filter(function(val) {  return val !== 'Radish';})console. log(vegetablesNoRadish)// [ Cabbage ,  Turnip ,  Carrot ]Using ECMA Script 6: 1234567891011let vegetables = ['Cabbage', 'Turnip', 'Radish', 'Carrot', 'Radish']let vegetablesNoRadish = vegetables. filter(val =&gt; val !== 'Radish')console. log(vegetablesNoRadish)// [ Cabbage ,  Turnip ,  Carrot ]The approaches above work for most of the popular browsers and in NodeJS environments. "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow-lg" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><small><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});